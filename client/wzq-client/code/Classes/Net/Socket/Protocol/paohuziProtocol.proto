//v1.0 跑胡子 前后端协议定义
//曹涛
//2017.03.29

//保持连接
message REQHold {

}

// 注册
message REQUserRegister {
    required bytes user_name = 1;		//用户名
    required bytes user_pwd = 2;		//密码
}

// 注册反馈消息
message ACKUserRegister {
    required int32 result_id = 1 [default = 0];		//应答结果（0=成功）
    required bytes result_msg = 2;  //应答原因
    
}

// 登录
message REQUserLogin {
    required bytes user_name = 1;        //用户名
    required bytes user_pwd = 2;         //密码
}

// 登录反馈消息
message ACKUserLogin {
    required int32 result_id = 1 [default = 0];        //应答结果（0=成功）
    required UserInfo userinfo = 2;
}

message UserInfo
{
    optional int32 id = 1;
    optional bytes username = 2; //用户的名字
    optional int32 wintimes = 3;
    optional int32 losetimes = 4;
    optional int32 score = 5;
    optional int32 level = 6;
    optional int32 xp = 7;
    optional int32 head_id = 8;
    optional bool is_online = 9;
    optional int32 coins = 10;
    
    message Prop {
        optional int32 id = 1;
        optional int32 quantity = 2;
    }
    
    repeated Prop props = 11;
    optional bytes account = 12; //用户的账号
}

// 获取登录用户的信息
message REQGetUserInfo
{
    required int32 user_id = 1;
}
message ACKGetUserInfo
{
    required int32 result_id = 1;
    required UserInfo userinfo = 2;
}


//匹配消息
//用户发送一个req_msg = "req_match_start"的请求给room表示匹配开始，并附带上自己的信息
//发送一个req_msg = "req_match_stop"的请求给room表示匹配取消，此时也要带上自己的信息，room无法定位到该用户
message REQRoom
{
    required bytes req_msg=1;
    optional UserInfo userinfo = 2;
}
//匹配的应答
//发送code = 0 , result_msg = "ack_match_sucess"的请求表示匹配成功，
//userinfo是对手的信息,black_id 和 white_id是黑棋和白棋选手的id
message ACKRoom
{
    required int32 code   = 1;
    required bytes result_msg=2;
    optional UserInfo userinfo = 3;
    optional int32 black_id = 4;
    optional int32 white_id = 5;
}


//编辑头像请求消息
message REQEditHead {
    optional int32 head_num=1;
    optional int32 user_id=2;
}

message ACKEditHead{
    optional int32 code=1;
}
//修改名字
message REQEditUserName
{
    required bytes username=1;
    required int32 user_id=2;
    optional int32 item_id = 3; //改名卡道具的id，如果为0则表示此次改名不使用改名卡
}

message ACKEditUserName
{
    required int32 code=1;
    required bytes username=2;
}



//用于获取排行榜
message REQGetRandingList
{
    required bytes req_msg=1;
    optional int32 limit=2;
    optional int32 offset=3;
}
message ACKGetRandingList
{
    required int32 code   = 1;
    required bytes result_msg=2;
    repeated UserInfo userinfo_list = 3;
    optional int32 limit=4;
    optional int32 offset=5;
}

// 用户的操作消息
message REQAction
{
    required bytes req_msg = 1;   //下棋的操作是 put_chess 悔棋的操作是 undo_chess
    required int32 table_id = 2;
    required int32 action_id = 3;  //下棋的用户id
    optional int32 action_board_row = 4; //要操作的棋盘的行和列
    optional int32 action_board_col = 5;
    optional int32 remain_time = 6; //悔棋时的剩余时间
}

// 对用户的操作消息的反馈
message ACKAction
{
    required bytes result_msg = 1; //下棋成功 put_chess_sucess   悔棋成功undo_chess_sucess
    required int32 action_id = 2;
    optional int32 action_board_row = 3; //要操作的棋盘的行和列
    optional int32 action_board_col = 4;
    optional bool is_win = 5; //是否有胜利者
    optional int32 win_id = 6;
    optional int32 lose_id = 7;
    optional bytes win_msg = 8;
}

//创建成功的ack,创建成功房间后，game服务向两个人发送 create_game_sucess 的消息，两个人可以正式进入游戏
message ACKCreatGame
{
    required int32 code = 1;
    required bytes result_msg = 2;
    required int32 room_id = 3;
    required int32 black_id = 4;
    required int32 white_id = 5;
    required int32 score = 6;
    required int32 coins = 7;//这场对局的金币数量
}

//用户进入对战界面，然后退出游戏
message REQExitGame
{
    required bytes req_msg = 1;   //退出游戏的操作是 exit_game   退出房间的操作是exit_room
    optional int32 exit_table_id = 2;
    required int32 exit_user_id = 3;
    required int32 enemy_user_id = 4;
}
//另一个用户会收到 ACKExitGame 告知对手退出
message ACKExitGame
{
    required int32 code = 1;
    required bytes result_msg = 2; // enemy_exit_game    enemy_exit_room
    optional int32 exit_table_id = 3;
    optional int32 exit_user_id = 4;
}

// 悔棋的询问消息，询问对手
message REQAskUndoChess
{
    required int32 table_id = 1;
    required int32 action_id = 2;  //悔棋的用户id
}

message ACKAskUndoChess
{
    required bool is_agree_undo_chess = 1; //用户是否同意悔棋，false表示不同意，true表示同意
    required int32 table_id = 2;
    required int32 action_id = 3;  //悔棋的用户id
}


//用户每次下棋的位置
message Position {
    required int32 row = 1;
    required int32 col = 2;
}
// game发给auth服务，用来告诉auth服务哪个user赢了和输了，并记录用户成绩
message REQGameOver
{
    optional int32 winner_id = 1;
    optional int32 loser_id = 2;
    optional int32 score = 3;
    
    required int32 black_id = 4;
    required int32 white_id = 5;
    required bool is_no_winner = 6;
    required bool is_force_exit = 7;
    repeated Position black_positions = 8;
    repeated Position white_positions = 9;
    
}

message REQGetGameHistory
{
    required int32 player_id = 1;
    required int32 limit = 2;
    required int32 offset = 3;
}
message GameInfo
{
    required UserInfo enemy_userinfo = 1;
    required int32 game_id = 2;
    required int32 winner_id =3;
    required int32 loser_id = 4;
    required int32 score = 5;
    required int32 black_id = 6;
    required int32 white_id = 7;
    required bool is_no_winner = 8;
    required bool is_force_exit = 9;
    repeated Position black_positions = 10;
    repeated Position white_positions = 11;
    required bytes game_time = 12;
}
message ACKGetGameHistory
{
    required int32 player_id = 1;
    repeated GameInfo game_info_list = 2;
}

message REQExitAccount{
    required int32 user_id = 1;
}

message REQChat{
    required int32 user_id = 1;
    required int32 table_id = 2;
    required int32 opp_id = 3;
    optional bytes text = 4;
}

message ACKChatText{
    required int32 is_sensitive = 1;
    required int32 user_id = 2;
    required int32 table_id = 3;
    required int32 opp_id = 4;
    optional bytes text = 5;
}




//查找这个用户的信息来添加好友
message REQGetFriendInfo
{
    required bytes firend_name = 1;
    required int32 user_id = 2;
}
//发给客户端这个用户的信息
message ACKGetFriendInfo
{
    required UserInfo firendinfo = 1;
    required bool is_my_friend = 2;  //是否是好友
    required bool is_exist = 3;//是否存在用户
}

//添加好友的请求
message REQAddFriend
{
    //user_id向 friend_id发出一个加好友的申请
    //mysql表中存 friend_id ->  user_id
    
    required int32 friend_id = 1;
    required int32 user_id = 2;
}
//添加好友的响应
message ACKAddFriend
{
    required int32 code = 1;
    optional bytes result_msg = 2;
}
//告知对方有新的好友申请
message REQRequestFriend
{
    required int32 num = 1;
    required int32 user_id =2;
}

//同意或拒绝好友申请
message REQIsAgreeFriend
{
    // user_id同意或拒绝 friend_id 的好友请求
    // user_id -> friend_id
    required int32 user_id = 1;
    required int32 friend_id = 2;
    required bool is_agree = 3;
}
message ACKIsAgreeFriend
{
    required int32 code = 1;
    required bytes result_msg = 2;
}



//获取好友列表的请求
message REQFriendsList
{
    required int32 user_id = 1;
}
message ACKFriendsList
{
    repeated UserInfo firendinfo = 1;
}

//获取好友申请列表
message REQWaitFriendsList
{
    required int32 user_id = 1;
}
message ACKWaitFriendsList
{
    repeated UserInfo firendinfo = 1;
    repeated bytes times = 2;
}

//删除好友的请求
message REQDeleteFriend
{
    required int32 friend_id = 1;
    required int32 user_id = 2;
}
//删除好友的响应
message ACKDeleteFriend
{
    required int32 code = 1;
    optional bytes result_msg = 2;
}






//用户继续游戏  A和B两个人游戏结束，A发起继续游戏的请求
message REQContinueGame
{
    required int32 user_id = 1;
    required int32 enemy_user_id = 2; //B的id
    required int32 table_id = 3;
}
//发给A的回复消息
message ACKContinueGame
{
    required int32 code = 1;   //大概率为0，小概率为1
    //大概率为"等待对手同意继续游戏",小概率为"你的对手已经不在线",因为有可能两个人同时发起继续游戏的请求，然后其中一个人掉线了
    required bytes result_msg = 2;
}

//询问B是否同意继续游戏
message REQAskContinueGame
{
    required int32 enemy_user_id = 1; //A的id
    required int32 user_id = 2; //B的id，在客户端进行校验，防止出现问题，极大概率不会出问题
    required int32 table_id = 3;
}

//B发来的消息
message ACKAskContinueGame
{
    required bool is_agree_continue_game = 1;
    required int32 enemy_user_id = 2; //A的id
    required int32 user_id = 3;
    required int32 table_id = 4;
}

message ACKRefuseContinueGame
{
    required int32 code = 1;
    required bytes result_msg = 2;
}




//A邀请B继续游戏
message REQInviteFriendGame
{
    optional UserInfo userinfo = 1;//A的信息
    required int32 friend_id = 2; //B的id
}
//room发给A的回复
message ACKInviteFriendGame
{
    required int32 code = 1;
    required bytes result_msg = 2;
}

//询问B是否同意继续游戏
message REQAskInviteFriendGame
{
    optional UserInfo friend_info = 1;//A的信息
    required int32 user_id = 2; //B的id
}

//B发来的消息
message ACKAskInviteFriendGame
{
    //是否同意邀请
    required bool is_agree_invite_game = 1;
    optional UserInfo userinfo = 2;//B的信息
    required int32 friend_id = 3; //A的id
    optional bytes result_msg = 4;
}
//发给A的拒绝邀请的信息
message ACKRefuseInviteFriendGame
{
    required int32 code = 1;
    required bytes result_msg = 2;
}

//请求购买
message REQBuy
{
    required int32 user_id = 1;
    required int32 item_id = 2;
    required int32 price = 3;
    required int32 num = 4;
}

//购买响应
message ACKBuy
{
    required int32 code = 1;
    required bytes result_msg = 2;
    optional int32 item_id = 3;
    optional int32 price = 4;
    optional int32 num = 5;
}
