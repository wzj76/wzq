// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paohuziProtocol.proto

#ifndef PROTOBUF_paohuziProtocol_2eproto__INCLUDED
#define PROTOBUF_paohuziProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>



#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_paohuziProtocol_2eproto();
void protobuf_AssignDesc_paohuziProtocol_2eproto();
void protobuf_ShutdownFile_paohuziProtocol_2eproto();

class REQHold;
class REQUserRegister;
class ACKUserRegister;
class REQUserLogin;
class ACKUserLogin;
class UserInfo;
class UserInfo_Prop;
class REQGetUserInfo;
class ACKGetUserInfo;
class REQRoom;
class ACKRoom;
class REQEditHead;
class ACKEditHead;
class REQEditUserName;
class ACKEditUserName;
class REQGetRandingList;
class ACKGetRandingList;
class REQAction;
class ACKAction;
class ACKCreatGame;
class REQExitGame;
class ACKExitGame;
class REQAskUndoChess;
class ACKAskUndoChess;
class Position;
class REQGameOver;
class REQGetGameHistory;
class GameInfo;
class ACKGetGameHistory;
class REQExitAccount;
class REQChat;
class ACKChatText;
class REQGetFriendInfo;
class ACKGetFriendInfo;
class REQAddFriend;
class ACKAddFriend;
class REQRequestFriend;
class REQIsAgreeFriend;
class ACKIsAgreeFriend;
class REQFriendsList;
class ACKFriendsList;
class REQWaitFriendsList;
class ACKWaitFriendsList;
class REQDeleteFriend;
class ACKDeleteFriend;
class REQContinueGame;
class ACKContinueGame;
class REQAskContinueGame;
class ACKAskContinueGame;
class ACKRefuseContinueGame;
class REQInviteFriendGame;
class ACKInviteFriendGame;
class REQAskInviteFriendGame;
class ACKAskInviteFriendGame;
class ACKRefuseInviteFriendGame;
class REQBuy;
class ACKBuy;

// ===================================================================

class REQHold : public ::google::protobuf::Message {
 public:
  REQHold();
  virtual ~REQHold();

  REQHold(const REQHold& from);

  inline REQHold& operator=(const REQHold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQHold& default_instance();

  void Swap(REQHold* other);

  // implements Message ----------------------------------------------

  REQHold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQHold& from);
  void MergeFrom(const REQHold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:REQHold)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQHold* default_instance_;
};
// -------------------------------------------------------------------

class REQUserRegister : public ::google::protobuf::Message {
 public:
  REQUserRegister();
  virtual ~REQUserRegister();

  REQUserRegister(const REQUserRegister& from);

  inline REQUserRegister& operator=(const REQUserRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQUserRegister& default_instance();

  void Swap(REQUserRegister* other);

  // implements Message ----------------------------------------------

  REQUserRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQUserRegister& from);
  void MergeFrom(const REQUserRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const void* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required bytes user_pwd = 2;
  inline bool has_user_pwd() const;
  inline void clear_user_pwd();
  static const int kUserPwdFieldNumber = 2;
  inline const ::std::string& user_pwd() const;
  inline void set_user_pwd(const ::std::string& value);
  inline void set_user_pwd(const char* value);
  inline void set_user_pwd(const void* value, size_t size);
  inline ::std::string* mutable_user_pwd();
  inline ::std::string* release_user_pwd();
  inline void set_allocated_user_pwd(::std::string* user_pwd);

  // @@protoc_insertion_point(class_scope:REQUserRegister)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_user_pwd();
  inline void clear_has_user_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::std::string* user_pwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQUserRegister* default_instance_;
};
// -------------------------------------------------------------------

class ACKUserRegister : public ::google::protobuf::Message {
 public:
  ACKUserRegister();
  virtual ~ACKUserRegister();

  ACKUserRegister(const ACKUserRegister& from);

  inline ACKUserRegister& operator=(const ACKUserRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKUserRegister& default_instance();

  void Swap(ACKUserRegister* other);

  // implements Message ----------------------------------------------

  ACKUserRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKUserRegister& from);
  void MergeFrom(const ACKUserRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_id = 1 [default = 0];
  inline bool has_result_id() const;
  inline void clear_result_id();
  static const int kResultIdFieldNumber = 1;
  inline ::google::protobuf::int32 result_id() const;
  inline void set_result_id(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKUserRegister)
 private:
  inline void set_has_result_id();
  inline void clear_has_result_id();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 result_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKUserRegister* default_instance_;
};
// -------------------------------------------------------------------

class REQUserLogin : public ::google::protobuf::Message {
 public:
  REQUserLogin();
  virtual ~REQUserLogin();

  REQUserLogin(const REQUserLogin& from);

  inline REQUserLogin& operator=(const REQUserLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQUserLogin& default_instance();

  void Swap(REQUserLogin* other);

  // implements Message ----------------------------------------------

  REQUserLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQUserLogin& from);
  void MergeFrom(const REQUserLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const void* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required bytes user_pwd = 2;
  inline bool has_user_pwd() const;
  inline void clear_user_pwd();
  static const int kUserPwdFieldNumber = 2;
  inline const ::std::string& user_pwd() const;
  inline void set_user_pwd(const ::std::string& value);
  inline void set_user_pwd(const char* value);
  inline void set_user_pwd(const void* value, size_t size);
  inline ::std::string* mutable_user_pwd();
  inline ::std::string* release_user_pwd();
  inline void set_allocated_user_pwd(::std::string* user_pwd);

  // @@protoc_insertion_point(class_scope:REQUserLogin)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_user_pwd();
  inline void clear_has_user_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::std::string* user_pwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQUserLogin* default_instance_;
};
// -------------------------------------------------------------------

class ACKUserLogin : public ::google::protobuf::Message {
 public:
  ACKUserLogin();
  virtual ~ACKUserLogin();

  ACKUserLogin(const ACKUserLogin& from);

  inline ACKUserLogin& operator=(const ACKUserLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKUserLogin& default_instance();

  void Swap(ACKUserLogin* other);

  // implements Message ----------------------------------------------

  ACKUserLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKUserLogin& from);
  void MergeFrom(const ACKUserLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_id = 1 [default = 0];
  inline bool has_result_id() const;
  inline void clear_result_id();
  static const int kResultIdFieldNumber = 1;
  inline ::google::protobuf::int32 result_id() const;
  inline void set_result_id(::google::protobuf::int32 value);

  // required .UserInfo userinfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 2;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:ACKUserLogin)
 private:
  inline void set_has_result_id();
  inline void clear_has_result_id();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* userinfo_;
  ::google::protobuf::int32 result_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKUserLogin* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo_Prop : public ::google::protobuf::Message {
 public:
  UserInfo_Prop();
  virtual ~UserInfo_Prop();

  UserInfo_Prop(const UserInfo_Prop& from);

  inline UserInfo_Prop& operator=(const UserInfo_Prop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo_Prop& default_instance();

  void Swap(UserInfo_Prop* other);

  // implements Message ----------------------------------------------

  UserInfo_Prop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo_Prop& from);
  void MergeFrom(const UserInfo_Prop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 quantity = 2;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 2;
  inline ::google::protobuf::int32 quantity() const;
  inline void set_quantity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserInfo.Prop)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_quantity();
  inline void clear_has_quantity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 quantity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static UserInfo_Prop* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UserInfo_Prop Prop;

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional int32 wintimes = 3;
  inline bool has_wintimes() const;
  inline void clear_wintimes();
  static const int kWintimesFieldNumber = 3;
  inline ::google::protobuf::int32 wintimes() const;
  inline void set_wintimes(::google::protobuf::int32 value);

  // optional int32 losetimes = 4;
  inline bool has_losetimes() const;
  inline void clear_losetimes();
  static const int kLosetimesFieldNumber = 4;
  inline ::google::protobuf::int32 losetimes() const;
  inline void set_losetimes(::google::protobuf::int32 value);

  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 xp = 7;
  inline bool has_xp() const;
  inline void clear_xp();
  static const int kXpFieldNumber = 7;
  inline ::google::protobuf::int32 xp() const;
  inline void set_xp(::google::protobuf::int32 value);

  // optional int32 head_id = 8;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 8;
  inline ::google::protobuf::int32 head_id() const;
  inline void set_head_id(::google::protobuf::int32 value);

  // optional bool is_online = 9;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 9;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // optional int32 coins = 10;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 10;
  inline ::google::protobuf::int32 coins() const;
  inline void set_coins(::google::protobuf::int32 value);

  // repeated .UserInfo.Prop props = 11;
  inline int props_size() const;
  inline void clear_props();
  static const int kPropsFieldNumber = 11;
  inline const ::UserInfo_Prop& props(int index) const;
  inline ::UserInfo_Prop* mutable_props(int index);
  inline ::UserInfo_Prop* add_props();
  inline const ::google::protobuf::RepeatedPtrField< ::UserInfo_Prop >&
      props() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserInfo_Prop >*
      mutable_props();

  // optional bytes account = 12;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 12;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_wintimes();
  inline void clear_has_wintimes();
  inline void set_has_losetimes();
  inline void clear_has_losetimes();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_xp();
  inline void clear_has_xp();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_is_online();
  inline void clear_has_is_online();
  inline void set_has_coins();
  inline void clear_has_coins();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 wintimes_;
  ::google::protobuf::int32 losetimes_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 xp_;
  ::google::protobuf::int32 head_id_;
  bool is_online_;
  ::google::protobuf::RepeatedPtrField< ::UserInfo_Prop > props_;
  ::std::string* account_;
  ::google::protobuf::int32 coins_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class REQGetUserInfo : public ::google::protobuf::Message {
 public:
  REQGetUserInfo();
  virtual ~REQGetUserInfo();

  REQGetUserInfo(const REQGetUserInfo& from);

  inline REQGetUserInfo& operator=(const REQGetUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQGetUserInfo& default_instance();

  void Swap(REQGetUserInfo* other);

  // implements Message ----------------------------------------------

  REQGetUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQGetUserInfo& from);
  void MergeFrom(const REQGetUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQGetUserInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQGetUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class ACKGetUserInfo : public ::google::protobuf::Message {
 public:
  ACKGetUserInfo();
  virtual ~ACKGetUserInfo();

  ACKGetUserInfo(const ACKGetUserInfo& from);

  inline ACKGetUserInfo& operator=(const ACKGetUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKGetUserInfo& default_instance();

  void Swap(ACKGetUserInfo* other);

  // implements Message ----------------------------------------------

  ACKGetUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKGetUserInfo& from);
  void MergeFrom(const ACKGetUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_id = 1;
  inline bool has_result_id() const;
  inline void clear_result_id();
  static const int kResultIdFieldNumber = 1;
  inline ::google::protobuf::int32 result_id() const;
  inline void set_result_id(::google::protobuf::int32 value);

  // required .UserInfo userinfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 2;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:ACKGetUserInfo)
 private:
  inline void set_has_result_id();
  inline void clear_has_result_id();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* userinfo_;
  ::google::protobuf::int32 result_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKGetUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class REQRoom : public ::google::protobuf::Message {
 public:
  REQRoom();
  virtual ~REQRoom();

  REQRoom(const REQRoom& from);

  inline REQRoom& operator=(const REQRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQRoom& default_instance();

  void Swap(REQRoom* other);

  // implements Message ----------------------------------------------

  REQRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQRoom& from);
  void MergeFrom(const REQRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes req_msg = 1;
  inline bool has_req_msg() const;
  inline void clear_req_msg();
  static const int kReqMsgFieldNumber = 1;
  inline const ::std::string& req_msg() const;
  inline void set_req_msg(const ::std::string& value);
  inline void set_req_msg(const char* value);
  inline void set_req_msg(const void* value, size_t size);
  inline ::std::string* mutable_req_msg();
  inline ::std::string* release_req_msg();
  inline void set_allocated_req_msg(::std::string* req_msg);

  // optional .UserInfo userinfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 2;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:REQRoom)
 private:
  inline void set_has_req_msg();
  inline void clear_has_req_msg();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_msg_;
  ::UserInfo* userinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQRoom* default_instance_;
};
// -------------------------------------------------------------------

class ACKRoom : public ::google::protobuf::Message {
 public:
  ACKRoom();
  virtual ~ACKRoom();

  ACKRoom(const ACKRoom& from);

  inline ACKRoom& operator=(const ACKRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKRoom& default_instance();

  void Swap(ACKRoom* other);

  // implements Message ----------------------------------------------

  ACKRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKRoom& from);
  void MergeFrom(const ACKRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // optional .UserInfo userinfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 3;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // optional int32 black_id = 4;
  inline bool has_black_id() const;
  inline void clear_black_id();
  static const int kBlackIdFieldNumber = 4;
  inline ::google::protobuf::int32 black_id() const;
  inline void set_black_id(::google::protobuf::int32 value);

  // optional int32 white_id = 5;
  inline bool has_white_id() const;
  inline void clear_white_id();
  static const int kWhiteIdFieldNumber = 5;
  inline ::google::protobuf::int32 white_id() const;
  inline void set_white_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKRoom)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_black_id();
  inline void clear_has_black_id();
  inline void set_has_white_id();
  inline void clear_has_white_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 black_id_;
  ::UserInfo* userinfo_;
  ::google::protobuf::int32 white_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKRoom* default_instance_;
};
// -------------------------------------------------------------------

class REQEditHead : public ::google::protobuf::Message {
 public:
  REQEditHead();
  virtual ~REQEditHead();

  REQEditHead(const REQEditHead& from);

  inline REQEditHead& operator=(const REQEditHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQEditHead& default_instance();

  void Swap(REQEditHead* other);

  // implements Message ----------------------------------------------

  REQEditHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQEditHead& from);
  void MergeFrom(const REQEditHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 head_num = 1;
  inline bool has_head_num() const;
  inline void clear_head_num();
  static const int kHeadNumFieldNumber = 1;
  inline ::google::protobuf::int32 head_num() const;
  inline void set_head_num(::google::protobuf::int32 value);

  // optional int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQEditHead)
 private:
  inline void set_has_head_num();
  inline void clear_has_head_num();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 head_num_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQEditHead* default_instance_;
};
// -------------------------------------------------------------------

class ACKEditHead : public ::google::protobuf::Message {
 public:
  ACKEditHead();
  virtual ~ACKEditHead();

  ACKEditHead(const ACKEditHead& from);

  inline ACKEditHead& operator=(const ACKEditHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKEditHead& default_instance();

  void Swap(ACKEditHead* other);

  // implements Message ----------------------------------------------

  ACKEditHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKEditHead& from);
  void MergeFrom(const ACKEditHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKEditHead)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKEditHead* default_instance_;
};
// -------------------------------------------------------------------

class REQEditUserName : public ::google::protobuf::Message {
 public:
  REQEditUserName();
  virtual ~REQEditUserName();

  REQEditUserName(const REQEditUserName& from);

  inline REQEditUserName& operator=(const REQEditUserName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQEditUserName& default_instance();

  void Swap(REQEditUserName* other);

  // implements Message ----------------------------------------------

  REQEditUserName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQEditUserName& from);
  void MergeFrom(const REQEditUserName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional int32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQEditUserName)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 item_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQEditUserName* default_instance_;
};
// -------------------------------------------------------------------

class ACKEditUserName : public ::google::protobuf::Message {
 public:
  ACKEditUserName();
  virtual ~ACKEditUserName();

  ACKEditUserName(const ACKEditUserName& from);

  inline ACKEditUserName& operator=(const ACKEditUserName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKEditUserName& default_instance();

  void Swap(ACKEditUserName* other);

  // implements Message ----------------------------------------------

  ACKEditUserName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKEditUserName& from);
  void MergeFrom(const ACKEditUserName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:ACKEditUserName)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKEditUserName* default_instance_;
};
// -------------------------------------------------------------------

class REQGetRandingList : public ::google::protobuf::Message {
 public:
  REQGetRandingList();
  virtual ~REQGetRandingList();

  REQGetRandingList(const REQGetRandingList& from);

  inline REQGetRandingList& operator=(const REQGetRandingList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQGetRandingList& default_instance();

  void Swap(REQGetRandingList* other);

  // implements Message ----------------------------------------------

  REQGetRandingList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQGetRandingList& from);
  void MergeFrom(const REQGetRandingList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes req_msg = 1;
  inline bool has_req_msg() const;
  inline void clear_req_msg();
  static const int kReqMsgFieldNumber = 1;
  inline const ::std::string& req_msg() const;
  inline void set_req_msg(const ::std::string& value);
  inline void set_req_msg(const char* value);
  inline void set_req_msg(const void* value, size_t size);
  inline ::std::string* mutable_req_msg();
  inline ::std::string* release_req_msg();
  inline void set_allocated_req_msg(::std::string* req_msg);

  // optional int32 limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // optional int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQGetRandingList)
 private:
  inline void set_has_req_msg();
  inline void clear_has_req_msg();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_msg_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQGetRandingList* default_instance_;
};
// -------------------------------------------------------------------

class ACKGetRandingList : public ::google::protobuf::Message {
 public:
  ACKGetRandingList();
  virtual ~ACKGetRandingList();

  ACKGetRandingList(const ACKGetRandingList& from);

  inline ACKGetRandingList& operator=(const ACKGetRandingList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKGetRandingList& default_instance();

  void Swap(ACKGetRandingList* other);

  // implements Message ----------------------------------------------

  ACKGetRandingList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKGetRandingList& from);
  void MergeFrom(const ACKGetRandingList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // repeated .UserInfo userinfo_list = 3;
  inline int userinfo_list_size() const;
  inline void clear_userinfo_list();
  static const int kUserinfoListFieldNumber = 3;
  inline const ::UserInfo& userinfo_list(int index) const;
  inline ::UserInfo* mutable_userinfo_list(int index);
  inline ::UserInfo* add_userinfo_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
      userinfo_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
      mutable_userinfo_list();

  // optional int32 limit = 4;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 4;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // optional int32 offset = 5;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 5;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKGetRandingList)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::RepeatedPtrField< ::UserInfo > userinfo_list_;
  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKGetRandingList* default_instance_;
};
// -------------------------------------------------------------------

class REQAction : public ::google::protobuf::Message {
 public:
  REQAction();
  virtual ~REQAction();

  REQAction(const REQAction& from);

  inline REQAction& operator=(const REQAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQAction& default_instance();

  void Swap(REQAction* other);

  // implements Message ----------------------------------------------

  REQAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQAction& from);
  void MergeFrom(const REQAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes req_msg = 1;
  inline bool has_req_msg() const;
  inline void clear_req_msg();
  static const int kReqMsgFieldNumber = 1;
  inline const ::std::string& req_msg() const;
  inline void set_req_msg(const ::std::string& value);
  inline void set_req_msg(const char* value);
  inline void set_req_msg(const void* value, size_t size);
  inline ::std::string* mutable_req_msg();
  inline ::std::string* release_req_msg();
  inline void set_allocated_req_msg(::std::string* req_msg);

  // required int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // required int32 action_id = 3;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 3;
  inline ::google::protobuf::int32 action_id() const;
  inline void set_action_id(::google::protobuf::int32 value);

  // optional int32 action_board_row = 4;
  inline bool has_action_board_row() const;
  inline void clear_action_board_row();
  static const int kActionBoardRowFieldNumber = 4;
  inline ::google::protobuf::int32 action_board_row() const;
  inline void set_action_board_row(::google::protobuf::int32 value);

  // optional int32 action_board_col = 5;
  inline bool has_action_board_col() const;
  inline void clear_action_board_col();
  static const int kActionBoardColFieldNumber = 5;
  inline ::google::protobuf::int32 action_board_col() const;
  inline void set_action_board_col(::google::protobuf::int32 value);

  // optional int32 remain_time = 6;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 6;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQAction)
 private:
  inline void set_has_req_msg();
  inline void clear_has_req_msg();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_action_board_row();
  inline void clear_has_action_board_row();
  inline void set_has_action_board_col();
  inline void clear_has_action_board_col();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_msg_;
  ::google::protobuf::int32 table_id_;
  ::google::protobuf::int32 action_id_;
  ::google::protobuf::int32 action_board_row_;
  ::google::protobuf::int32 action_board_col_;
  ::google::protobuf::int32 remain_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQAction* default_instance_;
};
// -------------------------------------------------------------------

class ACKAction : public ::google::protobuf::Message {
 public:
  ACKAction();
  virtual ~ACKAction();

  ACKAction(const ACKAction& from);

  inline ACKAction& operator=(const ACKAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKAction& default_instance();

  void Swap(ACKAction* other);

  // implements Message ----------------------------------------------

  ACKAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKAction& from);
  void MergeFrom(const ACKAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes result_msg = 1;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 1;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // required int32 action_id = 2;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 2;
  inline ::google::protobuf::int32 action_id() const;
  inline void set_action_id(::google::protobuf::int32 value);

  // optional int32 action_board_row = 3;
  inline bool has_action_board_row() const;
  inline void clear_action_board_row();
  static const int kActionBoardRowFieldNumber = 3;
  inline ::google::protobuf::int32 action_board_row() const;
  inline void set_action_board_row(::google::protobuf::int32 value);

  // optional int32 action_board_col = 4;
  inline bool has_action_board_col() const;
  inline void clear_action_board_col();
  static const int kActionBoardColFieldNumber = 4;
  inline ::google::protobuf::int32 action_board_col() const;
  inline void set_action_board_col(::google::protobuf::int32 value);

  // optional bool is_win = 5;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 5;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // optional int32 win_id = 6;
  inline bool has_win_id() const;
  inline void clear_win_id();
  static const int kWinIdFieldNumber = 6;
  inline ::google::protobuf::int32 win_id() const;
  inline void set_win_id(::google::protobuf::int32 value);

  // optional int32 lose_id = 7;
  inline bool has_lose_id() const;
  inline void clear_lose_id();
  static const int kLoseIdFieldNumber = 7;
  inline ::google::protobuf::int32 lose_id() const;
  inline void set_lose_id(::google::protobuf::int32 value);

  // optional bytes win_msg = 8;
  inline bool has_win_msg() const;
  inline void clear_win_msg();
  static const int kWinMsgFieldNumber = 8;
  inline const ::std::string& win_msg() const;
  inline void set_win_msg(const ::std::string& value);
  inline void set_win_msg(const char* value);
  inline void set_win_msg(const void* value, size_t size);
  inline ::std::string* mutable_win_msg();
  inline ::std::string* release_win_msg();
  inline void set_allocated_win_msg(::std::string* win_msg);

  // @@protoc_insertion_point(class_scope:ACKAction)
 private:
  inline void set_has_result_msg();
  inline void clear_has_result_msg();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_action_board_row();
  inline void clear_has_action_board_row();
  inline void set_has_action_board_col();
  inline void clear_has_action_board_col();
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_win_id();
  inline void clear_has_win_id();
  inline void set_has_lose_id();
  inline void clear_has_lose_id();
  inline void set_has_win_msg();
  inline void clear_has_win_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 action_id_;
  ::google::protobuf::int32 action_board_row_;
  ::google::protobuf::int32 action_board_col_;
  bool is_win_;
  ::google::protobuf::int32 win_id_;
  ::google::protobuf::int32 lose_id_;
  ::std::string* win_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKAction* default_instance_;
};
// -------------------------------------------------------------------

class ACKCreatGame : public ::google::protobuf::Message {
 public:
  ACKCreatGame();
  virtual ~ACKCreatGame();

  ACKCreatGame(const ACKCreatGame& from);

  inline ACKCreatGame& operator=(const ACKCreatGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKCreatGame& default_instance();

  void Swap(ACKCreatGame* other);

  // implements Message ----------------------------------------------

  ACKCreatGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKCreatGame& from);
  void MergeFrom(const ACKCreatGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // required int32 black_id = 4;
  inline bool has_black_id() const;
  inline void clear_black_id();
  static const int kBlackIdFieldNumber = 4;
  inline ::google::protobuf::int32 black_id() const;
  inline void set_black_id(::google::protobuf::int32 value);

  // required int32 white_id = 5;
  inline bool has_white_id() const;
  inline void clear_white_id();
  static const int kWhiteIdFieldNumber = 5;
  inline ::google::protobuf::int32 white_id() const;
  inline void set_white_id(::google::protobuf::int32 value);

  // required int32 score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required int32 coins = 7;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 7;
  inline ::google::protobuf::int32 coins() const;
  inline void set_coins(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKCreatGame)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_black_id();
  inline void clear_has_black_id();
  inline void set_has_white_id();
  inline void clear_has_white_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_coins();
  inline void clear_has_coins();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 black_id_;
  ::google::protobuf::int32 white_id_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 coins_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKCreatGame* default_instance_;
};
// -------------------------------------------------------------------

class REQExitGame : public ::google::protobuf::Message {
 public:
  REQExitGame();
  virtual ~REQExitGame();

  REQExitGame(const REQExitGame& from);

  inline REQExitGame& operator=(const REQExitGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQExitGame& default_instance();

  void Swap(REQExitGame* other);

  // implements Message ----------------------------------------------

  REQExitGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQExitGame& from);
  void MergeFrom(const REQExitGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes req_msg = 1;
  inline bool has_req_msg() const;
  inline void clear_req_msg();
  static const int kReqMsgFieldNumber = 1;
  inline const ::std::string& req_msg() const;
  inline void set_req_msg(const ::std::string& value);
  inline void set_req_msg(const char* value);
  inline void set_req_msg(const void* value, size_t size);
  inline ::std::string* mutable_req_msg();
  inline ::std::string* release_req_msg();
  inline void set_allocated_req_msg(::std::string* req_msg);

  // optional int32 exit_table_id = 2;
  inline bool has_exit_table_id() const;
  inline void clear_exit_table_id();
  static const int kExitTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 exit_table_id() const;
  inline void set_exit_table_id(::google::protobuf::int32 value);

  // required int32 exit_user_id = 3;
  inline bool has_exit_user_id() const;
  inline void clear_exit_user_id();
  static const int kExitUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 exit_user_id() const;
  inline void set_exit_user_id(::google::protobuf::int32 value);

  // required int32 enemy_user_id = 4;
  inline bool has_enemy_user_id() const;
  inline void clear_enemy_user_id();
  static const int kEnemyUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 enemy_user_id() const;
  inline void set_enemy_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQExitGame)
 private:
  inline void set_has_req_msg();
  inline void clear_has_req_msg();
  inline void set_has_exit_table_id();
  inline void clear_has_exit_table_id();
  inline void set_has_exit_user_id();
  inline void clear_has_exit_user_id();
  inline void set_has_enemy_user_id();
  inline void clear_has_enemy_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_msg_;
  ::google::protobuf::int32 exit_table_id_;
  ::google::protobuf::int32 exit_user_id_;
  ::google::protobuf::int32 enemy_user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQExitGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKExitGame : public ::google::protobuf::Message {
 public:
  ACKExitGame();
  virtual ~ACKExitGame();

  ACKExitGame(const ACKExitGame& from);

  inline ACKExitGame& operator=(const ACKExitGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKExitGame& default_instance();

  void Swap(ACKExitGame* other);

  // implements Message ----------------------------------------------

  ACKExitGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKExitGame& from);
  void MergeFrom(const ACKExitGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // optional int32 exit_table_id = 3;
  inline bool has_exit_table_id() const;
  inline void clear_exit_table_id();
  static const int kExitTableIdFieldNumber = 3;
  inline ::google::protobuf::int32 exit_table_id() const;
  inline void set_exit_table_id(::google::protobuf::int32 value);

  // optional int32 exit_user_id = 4;
  inline bool has_exit_user_id() const;
  inline void clear_exit_user_id();
  static const int kExitUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 exit_user_id() const;
  inline void set_exit_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKExitGame)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();
  inline void set_has_exit_table_id();
  inline void clear_has_exit_table_id();
  inline void set_has_exit_user_id();
  inline void clear_has_exit_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 exit_table_id_;
  ::google::protobuf::int32 exit_user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKExitGame* default_instance_;
};
// -------------------------------------------------------------------

class REQAskUndoChess : public ::google::protobuf::Message {
 public:
  REQAskUndoChess();
  virtual ~REQAskUndoChess();

  REQAskUndoChess(const REQAskUndoChess& from);

  inline REQAskUndoChess& operator=(const REQAskUndoChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQAskUndoChess& default_instance();

  void Swap(REQAskUndoChess* other);

  // implements Message ----------------------------------------------

  REQAskUndoChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQAskUndoChess& from);
  void MergeFrom(const REQAskUndoChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 table_id = 1;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 1;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // required int32 action_id = 2;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 2;
  inline ::google::protobuf::int32 action_id() const;
  inline void set_action_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQAskUndoChess)
 private:
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_action_id();
  inline void clear_has_action_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 table_id_;
  ::google::protobuf::int32 action_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQAskUndoChess* default_instance_;
};
// -------------------------------------------------------------------

class ACKAskUndoChess : public ::google::protobuf::Message {
 public:
  ACKAskUndoChess();
  virtual ~ACKAskUndoChess();

  ACKAskUndoChess(const ACKAskUndoChess& from);

  inline ACKAskUndoChess& operator=(const ACKAskUndoChess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKAskUndoChess& default_instance();

  void Swap(ACKAskUndoChess* other);

  // implements Message ----------------------------------------------

  ACKAskUndoChess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKAskUndoChess& from);
  void MergeFrom(const ACKAskUndoChess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_agree_undo_chess = 1;
  inline bool has_is_agree_undo_chess() const;
  inline void clear_is_agree_undo_chess();
  static const int kIsAgreeUndoChessFieldNumber = 1;
  inline bool is_agree_undo_chess() const;
  inline void set_is_agree_undo_chess(bool value);

  // required int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // required int32 action_id = 3;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 3;
  inline ::google::protobuf::int32 action_id() const;
  inline void set_action_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKAskUndoChess)
 private:
  inline void set_has_is_agree_undo_chess();
  inline void clear_has_is_agree_undo_chess();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_action_id();
  inline void clear_has_action_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_agree_undo_chess_;
  ::google::protobuf::int32 table_id_;
  ::google::protobuf::int32 action_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKAskUndoChess* default_instance_;
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::Message {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  Position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 row = 1;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 1;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // required int32 col = 2;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 2;
  inline ::google::protobuf::int32 col() const;
  inline void set_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Position)
 private:
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_col();
  inline void clear_has_col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class REQGameOver : public ::google::protobuf::Message {
 public:
  REQGameOver();
  virtual ~REQGameOver();

  REQGameOver(const REQGameOver& from);

  inline REQGameOver& operator=(const REQGameOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQGameOver& default_instance();

  void Swap(REQGameOver* other);

  // implements Message ----------------------------------------------

  REQGameOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQGameOver& from);
  void MergeFrom(const REQGameOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 winner_id = 1;
  inline bool has_winner_id() const;
  inline void clear_winner_id();
  static const int kWinnerIdFieldNumber = 1;
  inline ::google::protobuf::int32 winner_id() const;
  inline void set_winner_id(::google::protobuf::int32 value);

  // optional int32 loser_id = 2;
  inline bool has_loser_id() const;
  inline void clear_loser_id();
  static const int kLoserIdFieldNumber = 2;
  inline ::google::protobuf::int32 loser_id() const;
  inline void set_loser_id(::google::protobuf::int32 value);

  // optional int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required int32 black_id = 4;
  inline bool has_black_id() const;
  inline void clear_black_id();
  static const int kBlackIdFieldNumber = 4;
  inline ::google::protobuf::int32 black_id() const;
  inline void set_black_id(::google::protobuf::int32 value);

  // required int32 white_id = 5;
  inline bool has_white_id() const;
  inline void clear_white_id();
  static const int kWhiteIdFieldNumber = 5;
  inline ::google::protobuf::int32 white_id() const;
  inline void set_white_id(::google::protobuf::int32 value);

  // required bool is_no_winner = 6;
  inline bool has_is_no_winner() const;
  inline void clear_is_no_winner();
  static const int kIsNoWinnerFieldNumber = 6;
  inline bool is_no_winner() const;
  inline void set_is_no_winner(bool value);

  // required bool is_force_exit = 7;
  inline bool has_is_force_exit() const;
  inline void clear_is_force_exit();
  static const int kIsForceExitFieldNumber = 7;
  inline bool is_force_exit() const;
  inline void set_is_force_exit(bool value);

  // repeated .Position black_positions = 8;
  inline int black_positions_size() const;
  inline void clear_black_positions();
  static const int kBlackPositionsFieldNumber = 8;
  inline const ::Position& black_positions(int index) const;
  inline ::Position* mutable_black_positions(int index);
  inline ::Position* add_black_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::Position >&
      black_positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Position >*
      mutable_black_positions();

  // repeated .Position white_positions = 9;
  inline int white_positions_size() const;
  inline void clear_white_positions();
  static const int kWhitePositionsFieldNumber = 9;
  inline const ::Position& white_positions(int index) const;
  inline ::Position* mutable_white_positions(int index);
  inline ::Position* add_white_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::Position >&
      white_positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Position >*
      mutable_white_positions();

  // @@protoc_insertion_point(class_scope:REQGameOver)
 private:
  inline void set_has_winner_id();
  inline void clear_has_winner_id();
  inline void set_has_loser_id();
  inline void clear_has_loser_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_black_id();
  inline void clear_has_black_id();
  inline void set_has_white_id();
  inline void clear_has_white_id();
  inline void set_has_is_no_winner();
  inline void clear_has_is_no_winner();
  inline void set_has_is_force_exit();
  inline void clear_has_is_force_exit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 winner_id_;
  ::google::protobuf::int32 loser_id_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 black_id_;
  ::google::protobuf::int32 white_id_;
  bool is_no_winner_;
  bool is_force_exit_;
  ::google::protobuf::RepeatedPtrField< ::Position > black_positions_;
  ::google::protobuf::RepeatedPtrField< ::Position > white_positions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQGameOver* default_instance_;
};
// -------------------------------------------------------------------

class REQGetGameHistory : public ::google::protobuf::Message {
 public:
  REQGetGameHistory();
  virtual ~REQGetGameHistory();

  REQGetGameHistory(const REQGetGameHistory& from);

  inline REQGetGameHistory& operator=(const REQGetGameHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQGetGameHistory& default_instance();

  void Swap(REQGetGameHistory* other);

  // implements Message ----------------------------------------------

  REQGetGameHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQGetGameHistory& from);
  void MergeFrom(const REQGetGameHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required int32 limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // required int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQGetGameHistory)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQGetGameHistory* default_instance_;
};
// -------------------------------------------------------------------

class GameInfo : public ::google::protobuf::Message {
 public:
  GameInfo();
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfo& default_instance();

  void Swap(GameInfo* other);

  // implements Message ----------------------------------------------

  GameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .UserInfo enemy_userinfo = 1;
  inline bool has_enemy_userinfo() const;
  inline void clear_enemy_userinfo();
  static const int kEnemyUserinfoFieldNumber = 1;
  inline const ::UserInfo& enemy_userinfo() const;
  inline ::UserInfo* mutable_enemy_userinfo();
  inline ::UserInfo* release_enemy_userinfo();
  inline void set_allocated_enemy_userinfo(::UserInfo* enemy_userinfo);

  // required int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // required int32 winner_id = 3;
  inline bool has_winner_id() const;
  inline void clear_winner_id();
  static const int kWinnerIdFieldNumber = 3;
  inline ::google::protobuf::int32 winner_id() const;
  inline void set_winner_id(::google::protobuf::int32 value);

  // required int32 loser_id = 4;
  inline bool has_loser_id() const;
  inline void clear_loser_id();
  static const int kLoserIdFieldNumber = 4;
  inline ::google::protobuf::int32 loser_id() const;
  inline void set_loser_id(::google::protobuf::int32 value);

  // required int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required int32 black_id = 6;
  inline bool has_black_id() const;
  inline void clear_black_id();
  static const int kBlackIdFieldNumber = 6;
  inline ::google::protobuf::int32 black_id() const;
  inline void set_black_id(::google::protobuf::int32 value);

  // required int32 white_id = 7;
  inline bool has_white_id() const;
  inline void clear_white_id();
  static const int kWhiteIdFieldNumber = 7;
  inline ::google::protobuf::int32 white_id() const;
  inline void set_white_id(::google::protobuf::int32 value);

  // required bool is_no_winner = 8;
  inline bool has_is_no_winner() const;
  inline void clear_is_no_winner();
  static const int kIsNoWinnerFieldNumber = 8;
  inline bool is_no_winner() const;
  inline void set_is_no_winner(bool value);

  // required bool is_force_exit = 9;
  inline bool has_is_force_exit() const;
  inline void clear_is_force_exit();
  static const int kIsForceExitFieldNumber = 9;
  inline bool is_force_exit() const;
  inline void set_is_force_exit(bool value);

  // repeated .Position black_positions = 10;
  inline int black_positions_size() const;
  inline void clear_black_positions();
  static const int kBlackPositionsFieldNumber = 10;
  inline const ::Position& black_positions(int index) const;
  inline ::Position* mutable_black_positions(int index);
  inline ::Position* add_black_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::Position >&
      black_positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Position >*
      mutable_black_positions();

  // repeated .Position white_positions = 11;
  inline int white_positions_size() const;
  inline void clear_white_positions();
  static const int kWhitePositionsFieldNumber = 11;
  inline const ::Position& white_positions(int index) const;
  inline ::Position* mutable_white_positions(int index);
  inline ::Position* add_white_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::Position >&
      white_positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Position >*
      mutable_white_positions();

  // required bytes game_time = 12;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 12;
  inline const ::std::string& game_time() const;
  inline void set_game_time(const ::std::string& value);
  inline void set_game_time(const char* value);
  inline void set_game_time(const void* value, size_t size);
  inline ::std::string* mutable_game_time();
  inline ::std::string* release_game_time();
  inline void set_allocated_game_time(::std::string* game_time);

  // @@protoc_insertion_point(class_scope:GameInfo)
 private:
  inline void set_has_enemy_userinfo();
  inline void clear_has_enemy_userinfo();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_winner_id();
  inline void clear_has_winner_id();
  inline void set_has_loser_id();
  inline void clear_has_loser_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_black_id();
  inline void clear_has_black_id();
  inline void set_has_white_id();
  inline void clear_has_white_id();
  inline void set_has_is_no_winner();
  inline void clear_has_is_no_winner();
  inline void set_has_is_force_exit();
  inline void clear_has_is_force_exit();
  inline void set_has_game_time();
  inline void clear_has_game_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* enemy_userinfo_;
  ::google::protobuf::int32 game_id_;
  ::google::protobuf::int32 winner_id_;
  ::google::protobuf::int32 loser_id_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 black_id_;
  ::google::protobuf::int32 white_id_;
  ::google::protobuf::RepeatedPtrField< ::Position > black_positions_;
  ::google::protobuf::RepeatedPtrField< ::Position > white_positions_;
  ::std::string* game_time_;
  bool is_no_winner_;
  bool is_force_exit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static GameInfo* default_instance_;
};
// -------------------------------------------------------------------

class ACKGetGameHistory : public ::google::protobuf::Message {
 public:
  ACKGetGameHistory();
  virtual ~ACKGetGameHistory();

  ACKGetGameHistory(const ACKGetGameHistory& from);

  inline ACKGetGameHistory& operator=(const ACKGetGameHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKGetGameHistory& default_instance();

  void Swap(ACKGetGameHistory* other);

  // implements Message ----------------------------------------------

  ACKGetGameHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKGetGameHistory& from);
  void MergeFrom(const ACKGetGameHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // repeated .GameInfo game_info_list = 2;
  inline int game_info_list_size() const;
  inline void clear_game_info_list();
  static const int kGameInfoListFieldNumber = 2;
  inline const ::GameInfo& game_info_list(int index) const;
  inline ::GameInfo* mutable_game_info_list(int index);
  inline ::GameInfo* add_game_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::GameInfo >&
      game_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::GameInfo >*
      mutable_game_info_list();

  // @@protoc_insertion_point(class_scope:ACKGetGameHistory)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GameInfo > game_info_list_;
  ::google::protobuf::int32 player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKGetGameHistory* default_instance_;
};
// -------------------------------------------------------------------

class REQExitAccount : public ::google::protobuf::Message {
 public:
  REQExitAccount();
  virtual ~REQExitAccount();

  REQExitAccount(const REQExitAccount& from);

  inline REQExitAccount& operator=(const REQExitAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQExitAccount& default_instance();

  void Swap(REQExitAccount* other);

  // implements Message ----------------------------------------------

  REQExitAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQExitAccount& from);
  void MergeFrom(const REQExitAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQExitAccount)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQExitAccount* default_instance_;
};
// -------------------------------------------------------------------

class REQChat : public ::google::protobuf::Message {
 public:
  REQChat();
  virtual ~REQChat();

  REQChat(const REQChat& from);

  inline REQChat& operator=(const REQChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQChat& default_instance();

  void Swap(REQChat* other);

  // implements Message ----------------------------------------------

  REQChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQChat& from);
  void MergeFrom(const REQChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // required int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // required int32 opp_id = 3;
  inline bool has_opp_id() const;
  inline void clear_opp_id();
  static const int kOppIdFieldNumber = 3;
  inline ::google::protobuf::int32 opp_id() const;
  inline void set_opp_id(::google::protobuf::int32 value);

  // optional bytes text = 4;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:REQChat)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_opp_id();
  inline void clear_has_opp_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 table_id_;
  ::std::string* text_;
  ::google::protobuf::int32 opp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQChat* default_instance_;
};
// -------------------------------------------------------------------

class ACKChatText : public ::google::protobuf::Message {
 public:
  ACKChatText();
  virtual ~ACKChatText();

  ACKChatText(const ACKChatText& from);

  inline ACKChatText& operator=(const ACKChatText& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKChatText& default_instance();

  void Swap(ACKChatText* other);

  // implements Message ----------------------------------------------

  ACKChatText* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKChatText& from);
  void MergeFrom(const ACKChatText& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 is_sensitive = 1;
  inline bool has_is_sensitive() const;
  inline void clear_is_sensitive();
  static const int kIsSensitiveFieldNumber = 1;
  inline ::google::protobuf::int32 is_sensitive() const;
  inline void set_is_sensitive(::google::protobuf::int32 value);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // required int32 table_id = 3;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 3;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // required int32 opp_id = 4;
  inline bool has_opp_id() const;
  inline void clear_opp_id();
  static const int kOppIdFieldNumber = 4;
  inline ::google::protobuf::int32 opp_id() const;
  inline void set_opp_id(::google::protobuf::int32 value);

  // optional bytes text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:ACKChatText)
 private:
  inline void set_has_is_sensitive();
  inline void clear_has_is_sensitive();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_opp_id();
  inline void clear_has_opp_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 is_sensitive_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 table_id_;
  ::google::protobuf::int32 opp_id_;
  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKChatText* default_instance_;
};
// -------------------------------------------------------------------

class REQGetFriendInfo : public ::google::protobuf::Message {
 public:
  REQGetFriendInfo();
  virtual ~REQGetFriendInfo();

  REQGetFriendInfo(const REQGetFriendInfo& from);

  inline REQGetFriendInfo& operator=(const REQGetFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQGetFriendInfo& default_instance();

  void Swap(REQGetFriendInfo* other);

  // implements Message ----------------------------------------------

  REQGetFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQGetFriendInfo& from);
  void MergeFrom(const REQGetFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes firend_name = 1;
  inline bool has_firend_name() const;
  inline void clear_firend_name();
  static const int kFirendNameFieldNumber = 1;
  inline const ::std::string& firend_name() const;
  inline void set_firend_name(const ::std::string& value);
  inline void set_firend_name(const char* value);
  inline void set_firend_name(const void* value, size_t size);
  inline ::std::string* mutable_firend_name();
  inline ::std::string* release_firend_name();
  inline void set_allocated_firend_name(::std::string* firend_name);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQGetFriendInfo)
 private:
  inline void set_has_firend_name();
  inline void clear_has_firend_name();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* firend_name_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQGetFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class ACKGetFriendInfo : public ::google::protobuf::Message {
 public:
  ACKGetFriendInfo();
  virtual ~ACKGetFriendInfo();

  ACKGetFriendInfo(const ACKGetFriendInfo& from);

  inline ACKGetFriendInfo& operator=(const ACKGetFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKGetFriendInfo& default_instance();

  void Swap(ACKGetFriendInfo* other);

  // implements Message ----------------------------------------------

  ACKGetFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKGetFriendInfo& from);
  void MergeFrom(const ACKGetFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .UserInfo firendinfo = 1;
  inline bool has_firendinfo() const;
  inline void clear_firendinfo();
  static const int kFirendinfoFieldNumber = 1;
  inline const ::UserInfo& firendinfo() const;
  inline ::UserInfo* mutable_firendinfo();
  inline ::UserInfo* release_firendinfo();
  inline void set_allocated_firendinfo(::UserInfo* firendinfo);

  // required bool is_my_friend = 2;
  inline bool has_is_my_friend() const;
  inline void clear_is_my_friend();
  static const int kIsMyFriendFieldNumber = 2;
  inline bool is_my_friend() const;
  inline void set_is_my_friend(bool value);

  // required bool is_exist = 3;
  inline bool has_is_exist() const;
  inline void clear_is_exist();
  static const int kIsExistFieldNumber = 3;
  inline bool is_exist() const;
  inline void set_is_exist(bool value);

  // @@protoc_insertion_point(class_scope:ACKGetFriendInfo)
 private:
  inline void set_has_firendinfo();
  inline void clear_has_firendinfo();
  inline void set_has_is_my_friend();
  inline void clear_has_is_my_friend();
  inline void set_has_is_exist();
  inline void clear_has_is_exist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* firendinfo_;
  bool is_my_friend_;
  bool is_exist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKGetFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class REQAddFriend : public ::google::protobuf::Message {
 public:
  REQAddFriend();
  virtual ~REQAddFriend();

  REQAddFriend(const REQAddFriend& from);

  inline REQAddFriend& operator=(const REQAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQAddFriend& default_instance();

  void Swap(REQAddFriend* other);

  // implements Message ----------------------------------------------

  REQAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQAddFriend& from);
  void MergeFrom(const REQAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 friend_id = 1;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int32 friend_id() const;
  inline void set_friend_id(::google::protobuf::int32 value);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQAddFriend)
 private:
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 friend_id_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class ACKAddFriend : public ::google::protobuf::Message {
 public:
  ACKAddFriend();
  virtual ~ACKAddFriend();

  ACKAddFriend(const ACKAddFriend& from);

  inline ACKAddFriend& operator=(const ACKAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKAddFriend& default_instance();

  void Swap(ACKAddFriend* other);

  // implements Message ----------------------------------------------

  ACKAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKAddFriend& from);
  void MergeFrom(const ACKAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKAddFriend)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class REQRequestFriend : public ::google::protobuf::Message {
 public:
  REQRequestFriend();
  virtual ~REQRequestFriend();

  REQRequestFriend(const REQRequestFriend& from);

  inline REQRequestFriend& operator=(const REQRequestFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQRequestFriend& default_instance();

  void Swap(REQRequestFriend* other);

  // implements Message ----------------------------------------------

  REQRequestFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQRequestFriend& from);
  void MergeFrom(const REQRequestFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQRequestFriend)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQRequestFriend* default_instance_;
};
// -------------------------------------------------------------------

class REQIsAgreeFriend : public ::google::protobuf::Message {
 public:
  REQIsAgreeFriend();
  virtual ~REQIsAgreeFriend();

  REQIsAgreeFriend(const REQIsAgreeFriend& from);

  inline REQIsAgreeFriend& operator=(const REQIsAgreeFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQIsAgreeFriend& default_instance();

  void Swap(REQIsAgreeFriend* other);

  // implements Message ----------------------------------------------

  REQIsAgreeFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQIsAgreeFriend& from);
  void MergeFrom(const REQIsAgreeFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // required int32 friend_id = 2;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::int32 friend_id() const;
  inline void set_friend_id(::google::protobuf::int32 value);

  // required bool is_agree = 3;
  inline bool has_is_agree() const;
  inline void clear_is_agree();
  static const int kIsAgreeFieldNumber = 3;
  inline bool is_agree() const;
  inline void set_is_agree(bool value);

  // @@protoc_insertion_point(class_scope:REQIsAgreeFriend)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_is_agree();
  inline void clear_has_is_agree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 friend_id_;
  bool is_agree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQIsAgreeFriend* default_instance_;
};
// -------------------------------------------------------------------

class ACKIsAgreeFriend : public ::google::protobuf::Message {
 public:
  ACKIsAgreeFriend();
  virtual ~ACKIsAgreeFriend();

  ACKIsAgreeFriend(const ACKIsAgreeFriend& from);

  inline ACKIsAgreeFriend& operator=(const ACKIsAgreeFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKIsAgreeFriend& default_instance();

  void Swap(ACKIsAgreeFriend* other);

  // implements Message ----------------------------------------------

  ACKIsAgreeFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKIsAgreeFriend& from);
  void MergeFrom(const ACKIsAgreeFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKIsAgreeFriend)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKIsAgreeFriend* default_instance_;
};
// -------------------------------------------------------------------

class REQFriendsList : public ::google::protobuf::Message {
 public:
  REQFriendsList();
  virtual ~REQFriendsList();

  REQFriendsList(const REQFriendsList& from);

  inline REQFriendsList& operator=(const REQFriendsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQFriendsList& default_instance();

  void Swap(REQFriendsList* other);

  // implements Message ----------------------------------------------

  REQFriendsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQFriendsList& from);
  void MergeFrom(const REQFriendsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQFriendsList)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQFriendsList* default_instance_;
};
// -------------------------------------------------------------------

class ACKFriendsList : public ::google::protobuf::Message {
 public:
  ACKFriendsList();
  virtual ~ACKFriendsList();

  ACKFriendsList(const ACKFriendsList& from);

  inline ACKFriendsList& operator=(const ACKFriendsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKFriendsList& default_instance();

  void Swap(ACKFriendsList* other);

  // implements Message ----------------------------------------------

  ACKFriendsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKFriendsList& from);
  void MergeFrom(const ACKFriendsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UserInfo firendinfo = 1;
  inline int firendinfo_size() const;
  inline void clear_firendinfo();
  static const int kFirendinfoFieldNumber = 1;
  inline const ::UserInfo& firendinfo(int index) const;
  inline ::UserInfo* mutable_firendinfo(int index);
  inline ::UserInfo* add_firendinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
      firendinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
      mutable_firendinfo();

  // @@protoc_insertion_point(class_scope:ACKFriendsList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::UserInfo > firendinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKFriendsList* default_instance_;
};
// -------------------------------------------------------------------

class REQWaitFriendsList : public ::google::protobuf::Message {
 public:
  REQWaitFriendsList();
  virtual ~REQWaitFriendsList();

  REQWaitFriendsList(const REQWaitFriendsList& from);

  inline REQWaitFriendsList& operator=(const REQWaitFriendsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQWaitFriendsList& default_instance();

  void Swap(REQWaitFriendsList* other);

  // implements Message ----------------------------------------------

  REQWaitFriendsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQWaitFriendsList& from);
  void MergeFrom(const REQWaitFriendsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQWaitFriendsList)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQWaitFriendsList* default_instance_;
};
// -------------------------------------------------------------------

class ACKWaitFriendsList : public ::google::protobuf::Message {
 public:
  ACKWaitFriendsList();
  virtual ~ACKWaitFriendsList();

  ACKWaitFriendsList(const ACKWaitFriendsList& from);

  inline ACKWaitFriendsList& operator=(const ACKWaitFriendsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKWaitFriendsList& default_instance();

  void Swap(ACKWaitFriendsList* other);

  // implements Message ----------------------------------------------

  ACKWaitFriendsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKWaitFriendsList& from);
  void MergeFrom(const ACKWaitFriendsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UserInfo firendinfo = 1;
  inline int firendinfo_size() const;
  inline void clear_firendinfo();
  static const int kFirendinfoFieldNumber = 1;
  inline const ::UserInfo& firendinfo(int index) const;
  inline ::UserInfo* mutable_firendinfo(int index);
  inline ::UserInfo* add_firendinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
      firendinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
      mutable_firendinfo();

  // repeated bytes times = 2;
  inline int times_size() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline const ::std::string& times(int index) const;
  inline ::std::string* mutable_times(int index);
  inline void set_times(int index, const ::std::string& value);
  inline void set_times(int index, const char* value);
  inline void set_times(int index, const void* value, size_t size);
  inline ::std::string* add_times();
  inline void add_times(const ::std::string& value);
  inline void add_times(const char* value);
  inline void add_times(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& times() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_times();

  // @@protoc_insertion_point(class_scope:ACKWaitFriendsList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::UserInfo > firendinfo_;
  ::google::protobuf::RepeatedPtrField< ::std::string> times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKWaitFriendsList* default_instance_;
};
// -------------------------------------------------------------------

class REQDeleteFriend : public ::google::protobuf::Message {
 public:
  REQDeleteFriend();
  virtual ~REQDeleteFriend();

  REQDeleteFriend(const REQDeleteFriend& from);

  inline REQDeleteFriend& operator=(const REQDeleteFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQDeleteFriend& default_instance();

  void Swap(REQDeleteFriend* other);

  // implements Message ----------------------------------------------

  REQDeleteFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQDeleteFriend& from);
  void MergeFrom(const REQDeleteFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 friend_id = 1;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int32 friend_id() const;
  inline void set_friend_id(::google::protobuf::int32 value);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQDeleteFriend)
 private:
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 friend_id_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQDeleteFriend* default_instance_;
};
// -------------------------------------------------------------------

class ACKDeleteFriend : public ::google::protobuf::Message {
 public:
  ACKDeleteFriend();
  virtual ~ACKDeleteFriend();

  ACKDeleteFriend(const ACKDeleteFriend& from);

  inline ACKDeleteFriend& operator=(const ACKDeleteFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKDeleteFriend& default_instance();

  void Swap(ACKDeleteFriend* other);

  // implements Message ----------------------------------------------

  ACKDeleteFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKDeleteFriend& from);
  void MergeFrom(const ACKDeleteFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKDeleteFriend)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKDeleteFriend* default_instance_;
};
// -------------------------------------------------------------------

class REQContinueGame : public ::google::protobuf::Message {
 public:
  REQContinueGame();
  virtual ~REQContinueGame();

  REQContinueGame(const REQContinueGame& from);

  inline REQContinueGame& operator=(const REQContinueGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQContinueGame& default_instance();

  void Swap(REQContinueGame* other);

  // implements Message ----------------------------------------------

  REQContinueGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQContinueGame& from);
  void MergeFrom(const REQContinueGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // required int32 enemy_user_id = 2;
  inline bool has_enemy_user_id() const;
  inline void clear_enemy_user_id();
  static const int kEnemyUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 enemy_user_id() const;
  inline void set_enemy_user_id(::google::protobuf::int32 value);

  // required int32 table_id = 3;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 3;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQContinueGame)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_enemy_user_id();
  inline void clear_has_enemy_user_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 enemy_user_id_;
  ::google::protobuf::int32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQContinueGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKContinueGame : public ::google::protobuf::Message {
 public:
  ACKContinueGame();
  virtual ~ACKContinueGame();

  ACKContinueGame(const ACKContinueGame& from);

  inline ACKContinueGame& operator=(const ACKContinueGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKContinueGame& default_instance();

  void Swap(ACKContinueGame* other);

  // implements Message ----------------------------------------------

  ACKContinueGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKContinueGame& from);
  void MergeFrom(const ACKContinueGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKContinueGame)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKContinueGame* default_instance_;
};
// -------------------------------------------------------------------

class REQAskContinueGame : public ::google::protobuf::Message {
 public:
  REQAskContinueGame();
  virtual ~REQAskContinueGame();

  REQAskContinueGame(const REQAskContinueGame& from);

  inline REQAskContinueGame& operator=(const REQAskContinueGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQAskContinueGame& default_instance();

  void Swap(REQAskContinueGame* other);

  // implements Message ----------------------------------------------

  REQAskContinueGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQAskContinueGame& from);
  void MergeFrom(const REQAskContinueGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 enemy_user_id = 1;
  inline bool has_enemy_user_id() const;
  inline void clear_enemy_user_id();
  static const int kEnemyUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 enemy_user_id() const;
  inline void set_enemy_user_id(::google::protobuf::int32 value);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // required int32 table_id = 3;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 3;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQAskContinueGame)
 private:
  inline void set_has_enemy_user_id();
  inline void clear_has_enemy_user_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 enemy_user_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQAskContinueGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKAskContinueGame : public ::google::protobuf::Message {
 public:
  ACKAskContinueGame();
  virtual ~ACKAskContinueGame();

  ACKAskContinueGame(const ACKAskContinueGame& from);

  inline ACKAskContinueGame& operator=(const ACKAskContinueGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKAskContinueGame& default_instance();

  void Swap(ACKAskContinueGame* other);

  // implements Message ----------------------------------------------

  ACKAskContinueGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKAskContinueGame& from);
  void MergeFrom(const ACKAskContinueGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_agree_continue_game = 1;
  inline bool has_is_agree_continue_game() const;
  inline void clear_is_agree_continue_game();
  static const int kIsAgreeContinueGameFieldNumber = 1;
  inline bool is_agree_continue_game() const;
  inline void set_is_agree_continue_game(bool value);

  // required int32 enemy_user_id = 2;
  inline bool has_enemy_user_id() const;
  inline void clear_enemy_user_id();
  static const int kEnemyUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 enemy_user_id() const;
  inline void set_enemy_user_id(::google::protobuf::int32 value);

  // required int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // required int32 table_id = 4;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 4;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKAskContinueGame)
 private:
  inline void set_has_is_agree_continue_game();
  inline void clear_has_is_agree_continue_game();
  inline void set_has_enemy_user_id();
  inline void clear_has_enemy_user_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_agree_continue_game_;
  ::google::protobuf::int32 enemy_user_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 table_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKAskContinueGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKRefuseContinueGame : public ::google::protobuf::Message {
 public:
  ACKRefuseContinueGame();
  virtual ~ACKRefuseContinueGame();

  ACKRefuseContinueGame(const ACKRefuseContinueGame& from);

  inline ACKRefuseContinueGame& operator=(const ACKRefuseContinueGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKRefuseContinueGame& default_instance();

  void Swap(ACKRefuseContinueGame* other);

  // implements Message ----------------------------------------------

  ACKRefuseContinueGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKRefuseContinueGame& from);
  void MergeFrom(const ACKRefuseContinueGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKRefuseContinueGame)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKRefuseContinueGame* default_instance_;
};
// -------------------------------------------------------------------

class REQInviteFriendGame : public ::google::protobuf::Message {
 public:
  REQInviteFriendGame();
  virtual ~REQInviteFriendGame();

  REQInviteFriendGame(const REQInviteFriendGame& from);

  inline REQInviteFriendGame& operator=(const REQInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQInviteFriendGame& default_instance();

  void Swap(REQInviteFriendGame* other);

  // implements Message ----------------------------------------------

  REQInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQInviteFriendGame& from);
  void MergeFrom(const REQInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UserInfo userinfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // required int32 friend_id = 2;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::int32 friend_id() const;
  inline void set_friend_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQInviteFriendGame)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* userinfo_;
  ::google::protobuf::int32 friend_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQInviteFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKInviteFriendGame : public ::google::protobuf::Message {
 public:
  ACKInviteFriendGame();
  virtual ~ACKInviteFriendGame();

  ACKInviteFriendGame(const ACKInviteFriendGame& from);

  inline ACKInviteFriendGame& operator=(const ACKInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKInviteFriendGame& default_instance();

  void Swap(ACKInviteFriendGame* other);

  // implements Message ----------------------------------------------

  ACKInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKInviteFriendGame& from);
  void MergeFrom(const ACKInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKInviteFriendGame)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKInviteFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class REQAskInviteFriendGame : public ::google::protobuf::Message {
 public:
  REQAskInviteFriendGame();
  virtual ~REQAskInviteFriendGame();

  REQAskInviteFriendGame(const REQAskInviteFriendGame& from);

  inline REQAskInviteFriendGame& operator=(const REQAskInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQAskInviteFriendGame& default_instance();

  void Swap(REQAskInviteFriendGame* other);

  // implements Message ----------------------------------------------

  REQAskInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQAskInviteFriendGame& from);
  void MergeFrom(const REQAskInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UserInfo friend_info = 1;
  inline bool has_friend_info() const;
  inline void clear_friend_info();
  static const int kFriendInfoFieldNumber = 1;
  inline const ::UserInfo& friend_info() const;
  inline ::UserInfo* mutable_friend_info();
  inline ::UserInfo* release_friend_info();
  inline void set_allocated_friend_info(::UserInfo* friend_info);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQAskInviteFriendGame)
 private:
  inline void set_has_friend_info();
  inline void clear_has_friend_info();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* friend_info_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQAskInviteFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKAskInviteFriendGame : public ::google::protobuf::Message {
 public:
  ACKAskInviteFriendGame();
  virtual ~ACKAskInviteFriendGame();

  ACKAskInviteFriendGame(const ACKAskInviteFriendGame& from);

  inline ACKAskInviteFriendGame& operator=(const ACKAskInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKAskInviteFriendGame& default_instance();

  void Swap(ACKAskInviteFriendGame* other);

  // implements Message ----------------------------------------------

  ACKAskInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKAskInviteFriendGame& from);
  void MergeFrom(const ACKAskInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_agree_invite_game = 1;
  inline bool has_is_agree_invite_game() const;
  inline void clear_is_agree_invite_game();
  static const int kIsAgreeInviteGameFieldNumber = 1;
  inline bool is_agree_invite_game() const;
  inline void set_is_agree_invite_game(bool value);

  // optional .UserInfo userinfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 2;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // required int32 friend_id = 3;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 3;
  inline ::google::protobuf::int32 friend_id() const;
  inline void set_friend_id(::google::protobuf::int32 value);

  // optional bytes result_msg = 4;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 4;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKAskInviteFriendGame)
 private:
  inline void set_has_is_agree_invite_game();
  inline void clear_has_is_agree_invite_game();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* userinfo_;
  bool is_agree_invite_game_;
  ::google::protobuf::int32 friend_id_;
  ::std::string* result_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKAskInviteFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKRefuseInviteFriendGame : public ::google::protobuf::Message {
 public:
  ACKRefuseInviteFriendGame();
  virtual ~ACKRefuseInviteFriendGame();

  ACKRefuseInviteFriendGame(const ACKRefuseInviteFriendGame& from);

  inline ACKRefuseInviteFriendGame& operator=(const ACKRefuseInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKRefuseInviteFriendGame& default_instance();

  void Swap(ACKRefuseInviteFriendGame* other);

  // implements Message ----------------------------------------------

  ACKRefuseInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKRefuseInviteFriendGame& from);
  void MergeFrom(const ACKRefuseInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKRefuseInviteFriendGame)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKRefuseInviteFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class REQBuy : public ::google::protobuf::Message {
 public:
  REQBuy();
  virtual ~REQBuy();

  REQBuy(const REQBuy& from);

  inline REQBuy& operator=(const REQBuy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQBuy& default_instance();

  void Swap(REQBuy* other);

  // implements Message ----------------------------------------------

  REQBuy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQBuy& from);
  void MergeFrom(const REQBuy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // required int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // required int32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // required int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQBuy)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQBuy* default_instance_;
};
// -------------------------------------------------------------------

class ACKBuy : public ::google::protobuf::Message {
 public:
  ACKBuy();
  virtual ~ACKBuy();

  ACKBuy(const ACKBuy& from);

  inline ACKBuy& operator=(const ACKBuy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKBuy& default_instance();

  void Swap(ACKBuy* other);

  // implements Message ----------------------------------------------

  ACKBuy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKBuy& from);
  void MergeFrom(const ACKBuy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // optional int32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional int32 price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int32 num = 5;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 5;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKBuy)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_paohuziProtocol_2eproto();
  friend void protobuf_AssignDesc_paohuziProtocol_2eproto();
  friend void protobuf_ShutdownFile_paohuziProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKBuy* default_instance_;
};
// ===================================================================


// ===================================================================

// REQHold

// -------------------------------------------------------------------

// REQUserRegister

// required bytes user_name = 1;
inline bool REQUserRegister::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQUserRegister::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQUserRegister::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQUserRegister::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& REQUserRegister::user_name() const {
  return *user_name_;
}
inline void REQUserRegister::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void REQUserRegister::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void REQUserRegister::set_user_name(const void* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQUserRegister::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* REQUserRegister::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQUserRegister::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes user_pwd = 2;
inline bool REQUserRegister::has_user_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQUserRegister::set_has_user_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQUserRegister::clear_has_user_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQUserRegister::clear_user_pwd() {
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    user_pwd_->clear();
  }
  clear_has_user_pwd();
}
inline const ::std::string& REQUserRegister::user_pwd() const {
  return *user_pwd_;
}
inline void REQUserRegister::set_user_pwd(const ::std::string& value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void REQUserRegister::set_user_pwd(const char* value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void REQUserRegister::set_user_pwd(const void* value, size_t size) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQUserRegister::mutable_user_pwd() {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  return user_pwd_;
}
inline ::std::string* REQUserRegister::release_user_pwd() {
  clear_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_pwd_;
    user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQUserRegister::set_allocated_user_pwd(::std::string* user_pwd) {
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete user_pwd_;
  }
  if (user_pwd) {
    set_has_user_pwd();
    user_pwd_ = user_pwd;
  } else {
    clear_has_user_pwd();
    user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKUserRegister

// required int32 result_id = 1 [default = 0];
inline bool ACKUserRegister::has_result_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKUserRegister::set_has_result_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKUserRegister::clear_has_result_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKUserRegister::clear_result_id() {
  result_id_ = 0;
  clear_has_result_id();
}
inline ::google::protobuf::int32 ACKUserRegister::result_id() const {
  return result_id_;
}
inline void ACKUserRegister::set_result_id(::google::protobuf::int32 value) {
  set_has_result_id();
  result_id_ = value;
}

// required bytes result_msg = 2;
inline bool ACKUserRegister::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKUserRegister::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKUserRegister::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKUserRegister::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKUserRegister::result_msg() const {
  return *result_msg_;
}
inline void ACKUserRegister::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKUserRegister::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKUserRegister::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKUserRegister::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKUserRegister::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKUserRegister::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQUserLogin

// required bytes user_name = 1;
inline bool REQUserLogin::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQUserLogin::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQUserLogin::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQUserLogin::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& REQUserLogin::user_name() const {
  return *user_name_;
}
inline void REQUserLogin::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void REQUserLogin::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void REQUserLogin::set_user_name(const void* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQUserLogin::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* REQUserLogin::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQUserLogin::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes user_pwd = 2;
inline bool REQUserLogin::has_user_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQUserLogin::set_has_user_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQUserLogin::clear_has_user_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQUserLogin::clear_user_pwd() {
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    user_pwd_->clear();
  }
  clear_has_user_pwd();
}
inline const ::std::string& REQUserLogin::user_pwd() const {
  return *user_pwd_;
}
inline void REQUserLogin::set_user_pwd(const ::std::string& value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void REQUserLogin::set_user_pwd(const char* value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void REQUserLogin::set_user_pwd(const void* value, size_t size) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQUserLogin::mutable_user_pwd() {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  return user_pwd_;
}
inline ::std::string* REQUserLogin::release_user_pwd() {
  clear_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_pwd_;
    user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQUserLogin::set_allocated_user_pwd(::std::string* user_pwd) {
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete user_pwd_;
  }
  if (user_pwd) {
    set_has_user_pwd();
    user_pwd_ = user_pwd;
  } else {
    clear_has_user_pwd();
    user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKUserLogin

// required int32 result_id = 1 [default = 0];
inline bool ACKUserLogin::has_result_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKUserLogin::set_has_result_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKUserLogin::clear_has_result_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKUserLogin::clear_result_id() {
  result_id_ = 0;
  clear_has_result_id();
}
inline ::google::protobuf::int32 ACKUserLogin::result_id() const {
  return result_id_;
}
inline void ACKUserLogin::set_result_id(::google::protobuf::int32 value) {
  set_has_result_id();
  result_id_ = value;
}

// required .UserInfo userinfo = 2;
inline bool ACKUserLogin::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKUserLogin::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKUserLogin::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKUserLogin::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& ACKUserLogin::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* ACKUserLogin::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* ACKUserLogin::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void ACKUserLogin::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// -------------------------------------------------------------------

// UserInfo_Prop

// optional int32 id = 1;
inline bool UserInfo_Prop::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo_Prop::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo_Prop::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo_Prop::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserInfo_Prop::id() const {
  return id_;
}
inline void UserInfo_Prop::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 quantity = 2;
inline bool UserInfo_Prop::has_quantity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo_Prop::set_has_quantity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo_Prop::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo_Prop::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
inline ::google::protobuf::int32 UserInfo_Prop::quantity() const {
  return quantity_;
}
inline void UserInfo_Prop::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
}

// -------------------------------------------------------------------

// UserInfo

// optional int32 id = 1;
inline bool UserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserInfo::id() const {
  return id_;
}
inline void UserInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes username = 2;
inline bool UserInfo::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& UserInfo::username() const {
  return *username_;
}
inline void UserInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserInfo::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* UserInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInfo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 wintimes = 3;
inline bool UserInfo::has_wintimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_wintimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_wintimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_wintimes() {
  wintimes_ = 0;
  clear_has_wintimes();
}
inline ::google::protobuf::int32 UserInfo::wintimes() const {
  return wintimes_;
}
inline void UserInfo::set_wintimes(::google::protobuf::int32 value) {
  set_has_wintimes();
  wintimes_ = value;
}

// optional int32 losetimes = 4;
inline bool UserInfo::has_losetimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_losetimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_losetimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_losetimes() {
  losetimes_ = 0;
  clear_has_losetimes();
}
inline ::google::protobuf::int32 UserInfo::losetimes() const {
  return losetimes_;
}
inline void UserInfo::set_losetimes(::google::protobuf::int32 value) {
  set_has_losetimes();
  losetimes_ = value;
}

// optional int32 score = 5;
inline bool UserInfo::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 UserInfo::score() const {
  return score_;
}
inline void UserInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 level = 6;
inline bool UserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserInfo::level() const {
  return level_;
}
inline void UserInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 xp = 7;
inline bool UserInfo::has_xp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::set_has_xp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo::clear_has_xp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo::clear_xp() {
  xp_ = 0;
  clear_has_xp();
}
inline ::google::protobuf::int32 UserInfo::xp() const {
  return xp_;
}
inline void UserInfo::set_xp(::google::protobuf::int32 value) {
  set_has_xp();
  xp_ = value;
}

// optional int32 head_id = 8;
inline bool UserInfo::has_head_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::set_has_head_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo::clear_head_id() {
  head_id_ = 0;
  clear_has_head_id();
}
inline ::google::protobuf::int32 UserInfo::head_id() const {
  return head_id_;
}
inline void UserInfo::set_head_id(::google::protobuf::int32 value) {
  set_has_head_id();
  head_id_ = value;
}

// optional bool is_online = 9;
inline bool UserInfo::has_is_online() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo::set_has_is_online() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfo::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfo::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool UserInfo::is_online() const {
  return is_online_;
}
inline void UserInfo::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// optional int32 coins = 10;
inline bool UserInfo::has_coins() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo::set_has_coins() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfo::clear_has_coins() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfo::clear_coins() {
  coins_ = 0;
  clear_has_coins();
}
inline ::google::protobuf::int32 UserInfo::coins() const {
  return coins_;
}
inline void UserInfo::set_coins(::google::protobuf::int32 value) {
  set_has_coins();
  coins_ = value;
}

// repeated .UserInfo.Prop props = 11;
inline int UserInfo::props_size() const {
  return props_.size();
}
inline void UserInfo::clear_props() {
  props_.Clear();
}
inline const ::UserInfo_Prop& UserInfo::props(int index) const {
  return props_.Get(index);
}
inline ::UserInfo_Prop* UserInfo::mutable_props(int index) {
  return props_.Mutable(index);
}
inline ::UserInfo_Prop* UserInfo::add_props() {
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo_Prop >&
UserInfo::props() const {
  return props_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo_Prop >*
UserInfo::mutable_props() {
  return &props_;
}

// optional bytes account = 12;
inline bool UserInfo::has_account() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserInfo::set_has_account() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& UserInfo::account() const {
  return *account_;
}
inline void UserInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void UserInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void UserInfo::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* UserInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQGetUserInfo

// required int32 user_id = 1;
inline bool REQGetUserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQGetUserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQGetUserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQGetUserInfo::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQGetUserInfo::user_id() const {
  return user_id_;
}
inline void REQGetUserInfo::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// ACKGetUserInfo

// required int32 result_id = 1;
inline bool ACKGetUserInfo::has_result_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKGetUserInfo::set_has_result_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKGetUserInfo::clear_has_result_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKGetUserInfo::clear_result_id() {
  result_id_ = 0;
  clear_has_result_id();
}
inline ::google::protobuf::int32 ACKGetUserInfo::result_id() const {
  return result_id_;
}
inline void ACKGetUserInfo::set_result_id(::google::protobuf::int32 value) {
  set_has_result_id();
  result_id_ = value;
}

// required .UserInfo userinfo = 2;
inline bool ACKGetUserInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKGetUserInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKGetUserInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKGetUserInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& ACKGetUserInfo::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* ACKGetUserInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* ACKGetUserInfo::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void ACKGetUserInfo::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// -------------------------------------------------------------------

// REQRoom

// required bytes req_msg = 1;
inline bool REQRoom::has_req_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQRoom::set_has_req_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQRoom::clear_has_req_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQRoom::clear_req_msg() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    req_msg_->clear();
  }
  clear_has_req_msg();
}
inline const ::std::string& REQRoom::req_msg() const {
  return *req_msg_;
}
inline void REQRoom::set_req_msg(const ::std::string& value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQRoom::set_req_msg(const char* value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQRoom::set_req_msg(const void* value, size_t size) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQRoom::mutable_req_msg() {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  return req_msg_;
}
inline ::std::string* REQRoom::release_req_msg() {
  clear_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_msg_;
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQRoom::set_allocated_req_msg(::std::string* req_msg) {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (req_msg) {
    set_has_req_msg();
    req_msg_ = req_msg;
  } else {
    clear_has_req_msg();
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .UserInfo userinfo = 2;
inline bool REQRoom::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQRoom::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQRoom::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQRoom::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& REQRoom::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* REQRoom::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* REQRoom::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void REQRoom::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// -------------------------------------------------------------------

// ACKRoom

// required int32 code = 1;
inline bool ACKRoom::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKRoom::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKRoom::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKRoom::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKRoom::code() const {
  return code_;
}
inline void ACKRoom::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKRoom::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKRoom::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKRoom::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKRoom::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKRoom::result_msg() const {
  return *result_msg_;
}
inline void ACKRoom::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRoom::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRoom::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKRoom::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKRoom::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKRoom::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .UserInfo userinfo = 3;
inline bool ACKRoom::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKRoom::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKRoom::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKRoom::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& ACKRoom::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* ACKRoom::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* ACKRoom::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void ACKRoom::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// optional int32 black_id = 4;
inline bool ACKRoom::has_black_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKRoom::set_has_black_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKRoom::clear_has_black_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKRoom::clear_black_id() {
  black_id_ = 0;
  clear_has_black_id();
}
inline ::google::protobuf::int32 ACKRoom::black_id() const {
  return black_id_;
}
inline void ACKRoom::set_black_id(::google::protobuf::int32 value) {
  set_has_black_id();
  black_id_ = value;
}

// optional int32 white_id = 5;
inline bool ACKRoom::has_white_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACKRoom::set_has_white_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACKRoom::clear_has_white_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACKRoom::clear_white_id() {
  white_id_ = 0;
  clear_has_white_id();
}
inline ::google::protobuf::int32 ACKRoom::white_id() const {
  return white_id_;
}
inline void ACKRoom::set_white_id(::google::protobuf::int32 value) {
  set_has_white_id();
  white_id_ = value;
}

// -------------------------------------------------------------------

// REQEditHead

// optional int32 head_num = 1;
inline bool REQEditHead::has_head_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQEditHead::set_has_head_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQEditHead::clear_has_head_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQEditHead::clear_head_num() {
  head_num_ = 0;
  clear_has_head_num();
}
inline ::google::protobuf::int32 REQEditHead::head_num() const {
  return head_num_;
}
inline void REQEditHead::set_head_num(::google::protobuf::int32 value) {
  set_has_head_num();
  head_num_ = value;
}

// optional int32 user_id = 2;
inline bool REQEditHead::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQEditHead::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQEditHead::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQEditHead::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQEditHead::user_id() const {
  return user_id_;
}
inline void REQEditHead::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// ACKEditHead

// optional int32 code = 1;
inline bool ACKEditHead::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKEditHead::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKEditHead::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKEditHead::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKEditHead::code() const {
  return code_;
}
inline void ACKEditHead::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// REQEditUserName

// required bytes username = 1;
inline bool REQEditUserName::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQEditUserName::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQEditUserName::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQEditUserName::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& REQEditUserName::username() const {
  return *username_;
}
inline void REQEditUserName::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void REQEditUserName::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void REQEditUserName::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQEditUserName::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* REQEditUserName::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQEditUserName::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 user_id = 2;
inline bool REQEditUserName::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQEditUserName::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQEditUserName::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQEditUserName::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQEditUserName::user_id() const {
  return user_id_;
}
inline void REQEditUserName::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 item_id = 3;
inline bool REQEditUserName::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQEditUserName::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQEditUserName::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQEditUserName::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 REQEditUserName::item_id() const {
  return item_id_;
}
inline void REQEditUserName::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// ACKEditUserName

// required int32 code = 1;
inline bool ACKEditUserName::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKEditUserName::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKEditUserName::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKEditUserName::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKEditUserName::code() const {
  return code_;
}
inline void ACKEditUserName::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes username = 2;
inline bool ACKEditUserName::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKEditUserName::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKEditUserName::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKEditUserName::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& ACKEditUserName::username() const {
  return *username_;
}
inline void ACKEditUserName::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ACKEditUserName::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ACKEditUserName::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKEditUserName::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* ACKEditUserName::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKEditUserName::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQGetRandingList

// required bytes req_msg = 1;
inline bool REQGetRandingList::has_req_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQGetRandingList::set_has_req_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQGetRandingList::clear_has_req_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQGetRandingList::clear_req_msg() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    req_msg_->clear();
  }
  clear_has_req_msg();
}
inline const ::std::string& REQGetRandingList::req_msg() const {
  return *req_msg_;
}
inline void REQGetRandingList::set_req_msg(const ::std::string& value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQGetRandingList::set_req_msg(const char* value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQGetRandingList::set_req_msg(const void* value, size_t size) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQGetRandingList::mutable_req_msg() {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  return req_msg_;
}
inline ::std::string* REQGetRandingList::release_req_msg() {
  clear_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_msg_;
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQGetRandingList::set_allocated_req_msg(::std::string* req_msg) {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (req_msg) {
    set_has_req_msg();
    req_msg_ = req_msg;
  } else {
    clear_has_req_msg();
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 limit = 2;
inline bool REQGetRandingList::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQGetRandingList::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQGetRandingList::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQGetRandingList::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 REQGetRandingList::limit() const {
  return limit_;
}
inline void REQGetRandingList::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// optional int32 offset = 3;
inline bool REQGetRandingList::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQGetRandingList::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQGetRandingList::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQGetRandingList::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 REQGetRandingList::offset() const {
  return offset_;
}
inline void REQGetRandingList::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// ACKGetRandingList

// required int32 code = 1;
inline bool ACKGetRandingList::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKGetRandingList::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKGetRandingList::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKGetRandingList::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKGetRandingList::code() const {
  return code_;
}
inline void ACKGetRandingList::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKGetRandingList::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKGetRandingList::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKGetRandingList::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKGetRandingList::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKGetRandingList::result_msg() const {
  return *result_msg_;
}
inline void ACKGetRandingList::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKGetRandingList::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKGetRandingList::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKGetRandingList::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKGetRandingList::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKGetRandingList::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .UserInfo userinfo_list = 3;
inline int ACKGetRandingList::userinfo_list_size() const {
  return userinfo_list_.size();
}
inline void ACKGetRandingList::clear_userinfo_list() {
  userinfo_list_.Clear();
}
inline const ::UserInfo& ACKGetRandingList::userinfo_list(int index) const {
  return userinfo_list_.Get(index);
}
inline ::UserInfo* ACKGetRandingList::mutable_userinfo_list(int index) {
  return userinfo_list_.Mutable(index);
}
inline ::UserInfo* ACKGetRandingList::add_userinfo_list() {
  return userinfo_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
ACKGetRandingList::userinfo_list() const {
  return userinfo_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
ACKGetRandingList::mutable_userinfo_list() {
  return &userinfo_list_;
}

// optional int32 limit = 4;
inline bool ACKGetRandingList::has_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKGetRandingList::set_has_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKGetRandingList::clear_has_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKGetRandingList::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 ACKGetRandingList::limit() const {
  return limit_;
}
inline void ACKGetRandingList::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// optional int32 offset = 5;
inline bool ACKGetRandingList::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACKGetRandingList::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACKGetRandingList::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACKGetRandingList::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 ACKGetRandingList::offset() const {
  return offset_;
}
inline void ACKGetRandingList::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// REQAction

// required bytes req_msg = 1;
inline bool REQAction::has_req_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQAction::set_has_req_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQAction::clear_has_req_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQAction::clear_req_msg() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    req_msg_->clear();
  }
  clear_has_req_msg();
}
inline const ::std::string& REQAction::req_msg() const {
  return *req_msg_;
}
inline void REQAction::set_req_msg(const ::std::string& value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQAction::set_req_msg(const char* value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQAction::set_req_msg(const void* value, size_t size) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQAction::mutable_req_msg() {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  return req_msg_;
}
inline ::std::string* REQAction::release_req_msg() {
  clear_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_msg_;
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQAction::set_allocated_req_msg(::std::string* req_msg) {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (req_msg) {
    set_has_req_msg();
    req_msg_ = req_msg;
  } else {
    clear_has_req_msg();
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 table_id = 2;
inline bool REQAction::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQAction::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQAction::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQAction::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 REQAction::table_id() const {
  return table_id_;
}
inline void REQAction::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required int32 action_id = 3;
inline bool REQAction::has_action_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQAction::set_has_action_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQAction::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQAction::clear_action_id() {
  action_id_ = 0;
  clear_has_action_id();
}
inline ::google::protobuf::int32 REQAction::action_id() const {
  return action_id_;
}
inline void REQAction::set_action_id(::google::protobuf::int32 value) {
  set_has_action_id();
  action_id_ = value;
}

// optional int32 action_board_row = 4;
inline bool REQAction::has_action_board_row() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void REQAction::set_has_action_board_row() {
  _has_bits_[0] |= 0x00000008u;
}
inline void REQAction::clear_has_action_board_row() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void REQAction::clear_action_board_row() {
  action_board_row_ = 0;
  clear_has_action_board_row();
}
inline ::google::protobuf::int32 REQAction::action_board_row() const {
  return action_board_row_;
}
inline void REQAction::set_action_board_row(::google::protobuf::int32 value) {
  set_has_action_board_row();
  action_board_row_ = value;
}

// optional int32 action_board_col = 5;
inline bool REQAction::has_action_board_col() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void REQAction::set_has_action_board_col() {
  _has_bits_[0] |= 0x00000010u;
}
inline void REQAction::clear_has_action_board_col() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void REQAction::clear_action_board_col() {
  action_board_col_ = 0;
  clear_has_action_board_col();
}
inline ::google::protobuf::int32 REQAction::action_board_col() const {
  return action_board_col_;
}
inline void REQAction::set_action_board_col(::google::protobuf::int32 value) {
  set_has_action_board_col();
  action_board_col_ = value;
}

// optional int32 remain_time = 6;
inline bool REQAction::has_remain_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void REQAction::set_has_remain_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void REQAction::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void REQAction::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 REQAction::remain_time() const {
  return remain_time_;
}
inline void REQAction::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// -------------------------------------------------------------------

// ACKAction

// required bytes result_msg = 1;
inline bool ACKAction::has_result_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKAction::set_has_result_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKAction::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKAction::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKAction::result_msg() const {
  return *result_msg_;
}
inline void ACKAction::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAction::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAction::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKAction::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKAction::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKAction::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 action_id = 2;
inline bool ACKAction::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKAction::set_has_action_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKAction::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKAction::clear_action_id() {
  action_id_ = 0;
  clear_has_action_id();
}
inline ::google::protobuf::int32 ACKAction::action_id() const {
  return action_id_;
}
inline void ACKAction::set_action_id(::google::protobuf::int32 value) {
  set_has_action_id();
  action_id_ = value;
}

// optional int32 action_board_row = 3;
inline bool ACKAction::has_action_board_row() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKAction::set_has_action_board_row() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKAction::clear_has_action_board_row() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKAction::clear_action_board_row() {
  action_board_row_ = 0;
  clear_has_action_board_row();
}
inline ::google::protobuf::int32 ACKAction::action_board_row() const {
  return action_board_row_;
}
inline void ACKAction::set_action_board_row(::google::protobuf::int32 value) {
  set_has_action_board_row();
  action_board_row_ = value;
}

// optional int32 action_board_col = 4;
inline bool ACKAction::has_action_board_col() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKAction::set_has_action_board_col() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKAction::clear_has_action_board_col() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKAction::clear_action_board_col() {
  action_board_col_ = 0;
  clear_has_action_board_col();
}
inline ::google::protobuf::int32 ACKAction::action_board_col() const {
  return action_board_col_;
}
inline void ACKAction::set_action_board_col(::google::protobuf::int32 value) {
  set_has_action_board_col();
  action_board_col_ = value;
}

// optional bool is_win = 5;
inline bool ACKAction::has_is_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACKAction::set_has_is_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACKAction::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACKAction::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool ACKAction::is_win() const {
  return is_win_;
}
inline void ACKAction::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// optional int32 win_id = 6;
inline bool ACKAction::has_win_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ACKAction::set_has_win_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ACKAction::clear_has_win_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ACKAction::clear_win_id() {
  win_id_ = 0;
  clear_has_win_id();
}
inline ::google::protobuf::int32 ACKAction::win_id() const {
  return win_id_;
}
inline void ACKAction::set_win_id(::google::protobuf::int32 value) {
  set_has_win_id();
  win_id_ = value;
}

// optional int32 lose_id = 7;
inline bool ACKAction::has_lose_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ACKAction::set_has_lose_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ACKAction::clear_has_lose_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ACKAction::clear_lose_id() {
  lose_id_ = 0;
  clear_has_lose_id();
}
inline ::google::protobuf::int32 ACKAction::lose_id() const {
  return lose_id_;
}
inline void ACKAction::set_lose_id(::google::protobuf::int32 value) {
  set_has_lose_id();
  lose_id_ = value;
}

// optional bytes win_msg = 8;
inline bool ACKAction::has_win_msg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ACKAction::set_has_win_msg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ACKAction::clear_has_win_msg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ACKAction::clear_win_msg() {
  if (win_msg_ != &::google::protobuf::internal::kEmptyString) {
    win_msg_->clear();
  }
  clear_has_win_msg();
}
inline const ::std::string& ACKAction::win_msg() const {
  return *win_msg_;
}
inline void ACKAction::set_win_msg(const ::std::string& value) {
  set_has_win_msg();
  if (win_msg_ == &::google::protobuf::internal::kEmptyString) {
    win_msg_ = new ::std::string;
  }
  win_msg_->assign(value);
}
inline void ACKAction::set_win_msg(const char* value) {
  set_has_win_msg();
  if (win_msg_ == &::google::protobuf::internal::kEmptyString) {
    win_msg_ = new ::std::string;
  }
  win_msg_->assign(value);
}
inline void ACKAction::set_win_msg(const void* value, size_t size) {
  set_has_win_msg();
  if (win_msg_ == &::google::protobuf::internal::kEmptyString) {
    win_msg_ = new ::std::string;
  }
  win_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKAction::mutable_win_msg() {
  set_has_win_msg();
  if (win_msg_ == &::google::protobuf::internal::kEmptyString) {
    win_msg_ = new ::std::string;
  }
  return win_msg_;
}
inline ::std::string* ACKAction::release_win_msg() {
  clear_has_win_msg();
  if (win_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = win_msg_;
    win_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKAction::set_allocated_win_msg(::std::string* win_msg) {
  if (win_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete win_msg_;
  }
  if (win_msg) {
    set_has_win_msg();
    win_msg_ = win_msg;
  } else {
    clear_has_win_msg();
    win_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKCreatGame

// required int32 code = 1;
inline bool ACKCreatGame::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKCreatGame::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKCreatGame::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKCreatGame::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKCreatGame::code() const {
  return code_;
}
inline void ACKCreatGame::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKCreatGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKCreatGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKCreatGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKCreatGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKCreatGame::result_msg() const {
  return *result_msg_;
}
inline void ACKCreatGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKCreatGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKCreatGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKCreatGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKCreatGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKCreatGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 room_id = 3;
inline bool ACKCreatGame::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKCreatGame::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKCreatGame::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKCreatGame::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 ACKCreatGame::room_id() const {
  return room_id_;
}
inline void ACKCreatGame::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 black_id = 4;
inline bool ACKCreatGame::has_black_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKCreatGame::set_has_black_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKCreatGame::clear_has_black_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKCreatGame::clear_black_id() {
  black_id_ = 0;
  clear_has_black_id();
}
inline ::google::protobuf::int32 ACKCreatGame::black_id() const {
  return black_id_;
}
inline void ACKCreatGame::set_black_id(::google::protobuf::int32 value) {
  set_has_black_id();
  black_id_ = value;
}

// required int32 white_id = 5;
inline bool ACKCreatGame::has_white_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACKCreatGame::set_has_white_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACKCreatGame::clear_has_white_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACKCreatGame::clear_white_id() {
  white_id_ = 0;
  clear_has_white_id();
}
inline ::google::protobuf::int32 ACKCreatGame::white_id() const {
  return white_id_;
}
inline void ACKCreatGame::set_white_id(::google::protobuf::int32 value) {
  set_has_white_id();
  white_id_ = value;
}

// required int32 score = 6;
inline bool ACKCreatGame::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ACKCreatGame::set_has_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ACKCreatGame::clear_has_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ACKCreatGame::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ACKCreatGame::score() const {
  return score_;
}
inline void ACKCreatGame::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int32 coins = 7;
inline bool ACKCreatGame::has_coins() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ACKCreatGame::set_has_coins() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ACKCreatGame::clear_has_coins() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ACKCreatGame::clear_coins() {
  coins_ = 0;
  clear_has_coins();
}
inline ::google::protobuf::int32 ACKCreatGame::coins() const {
  return coins_;
}
inline void ACKCreatGame::set_coins(::google::protobuf::int32 value) {
  set_has_coins();
  coins_ = value;
}

// -------------------------------------------------------------------

// REQExitGame

// required bytes req_msg = 1;
inline bool REQExitGame::has_req_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQExitGame::set_has_req_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQExitGame::clear_has_req_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQExitGame::clear_req_msg() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    req_msg_->clear();
  }
  clear_has_req_msg();
}
inline const ::std::string& REQExitGame::req_msg() const {
  return *req_msg_;
}
inline void REQExitGame::set_req_msg(const ::std::string& value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQExitGame::set_req_msg(const char* value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQExitGame::set_req_msg(const void* value, size_t size) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQExitGame::mutable_req_msg() {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  return req_msg_;
}
inline ::std::string* REQExitGame::release_req_msg() {
  clear_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_msg_;
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQExitGame::set_allocated_req_msg(::std::string* req_msg) {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (req_msg) {
    set_has_req_msg();
    req_msg_ = req_msg;
  } else {
    clear_has_req_msg();
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 exit_table_id = 2;
inline bool REQExitGame::has_exit_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQExitGame::set_has_exit_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQExitGame::clear_has_exit_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQExitGame::clear_exit_table_id() {
  exit_table_id_ = 0;
  clear_has_exit_table_id();
}
inline ::google::protobuf::int32 REQExitGame::exit_table_id() const {
  return exit_table_id_;
}
inline void REQExitGame::set_exit_table_id(::google::protobuf::int32 value) {
  set_has_exit_table_id();
  exit_table_id_ = value;
}

// required int32 exit_user_id = 3;
inline bool REQExitGame::has_exit_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQExitGame::set_has_exit_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQExitGame::clear_has_exit_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQExitGame::clear_exit_user_id() {
  exit_user_id_ = 0;
  clear_has_exit_user_id();
}
inline ::google::protobuf::int32 REQExitGame::exit_user_id() const {
  return exit_user_id_;
}
inline void REQExitGame::set_exit_user_id(::google::protobuf::int32 value) {
  set_has_exit_user_id();
  exit_user_id_ = value;
}

// required int32 enemy_user_id = 4;
inline bool REQExitGame::has_enemy_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void REQExitGame::set_has_enemy_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void REQExitGame::clear_has_enemy_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void REQExitGame::clear_enemy_user_id() {
  enemy_user_id_ = 0;
  clear_has_enemy_user_id();
}
inline ::google::protobuf::int32 REQExitGame::enemy_user_id() const {
  return enemy_user_id_;
}
inline void REQExitGame::set_enemy_user_id(::google::protobuf::int32 value) {
  set_has_enemy_user_id();
  enemy_user_id_ = value;
}

// -------------------------------------------------------------------

// ACKExitGame

// required int32 code = 1;
inline bool ACKExitGame::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKExitGame::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKExitGame::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKExitGame::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKExitGame::code() const {
  return code_;
}
inline void ACKExitGame::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKExitGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKExitGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKExitGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKExitGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKExitGame::result_msg() const {
  return *result_msg_;
}
inline void ACKExitGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKExitGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKExitGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKExitGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKExitGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKExitGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 exit_table_id = 3;
inline bool ACKExitGame::has_exit_table_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKExitGame::set_has_exit_table_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKExitGame::clear_has_exit_table_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKExitGame::clear_exit_table_id() {
  exit_table_id_ = 0;
  clear_has_exit_table_id();
}
inline ::google::protobuf::int32 ACKExitGame::exit_table_id() const {
  return exit_table_id_;
}
inline void ACKExitGame::set_exit_table_id(::google::protobuf::int32 value) {
  set_has_exit_table_id();
  exit_table_id_ = value;
}

// optional int32 exit_user_id = 4;
inline bool ACKExitGame::has_exit_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKExitGame::set_has_exit_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKExitGame::clear_has_exit_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKExitGame::clear_exit_user_id() {
  exit_user_id_ = 0;
  clear_has_exit_user_id();
}
inline ::google::protobuf::int32 ACKExitGame::exit_user_id() const {
  return exit_user_id_;
}
inline void ACKExitGame::set_exit_user_id(::google::protobuf::int32 value) {
  set_has_exit_user_id();
  exit_user_id_ = value;
}

// -------------------------------------------------------------------

// REQAskUndoChess

// required int32 table_id = 1;
inline bool REQAskUndoChess::has_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQAskUndoChess::set_has_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQAskUndoChess::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQAskUndoChess::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 REQAskUndoChess::table_id() const {
  return table_id_;
}
inline void REQAskUndoChess::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required int32 action_id = 2;
inline bool REQAskUndoChess::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQAskUndoChess::set_has_action_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQAskUndoChess::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQAskUndoChess::clear_action_id() {
  action_id_ = 0;
  clear_has_action_id();
}
inline ::google::protobuf::int32 REQAskUndoChess::action_id() const {
  return action_id_;
}
inline void REQAskUndoChess::set_action_id(::google::protobuf::int32 value) {
  set_has_action_id();
  action_id_ = value;
}

// -------------------------------------------------------------------

// ACKAskUndoChess

// required bool is_agree_undo_chess = 1;
inline bool ACKAskUndoChess::has_is_agree_undo_chess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKAskUndoChess::set_has_is_agree_undo_chess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKAskUndoChess::clear_has_is_agree_undo_chess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKAskUndoChess::clear_is_agree_undo_chess() {
  is_agree_undo_chess_ = false;
  clear_has_is_agree_undo_chess();
}
inline bool ACKAskUndoChess::is_agree_undo_chess() const {
  return is_agree_undo_chess_;
}
inline void ACKAskUndoChess::set_is_agree_undo_chess(bool value) {
  set_has_is_agree_undo_chess();
  is_agree_undo_chess_ = value;
}

// required int32 table_id = 2;
inline bool ACKAskUndoChess::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKAskUndoChess::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKAskUndoChess::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKAskUndoChess::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 ACKAskUndoChess::table_id() const {
  return table_id_;
}
inline void ACKAskUndoChess::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required int32 action_id = 3;
inline bool ACKAskUndoChess::has_action_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKAskUndoChess::set_has_action_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKAskUndoChess::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKAskUndoChess::clear_action_id() {
  action_id_ = 0;
  clear_has_action_id();
}
inline ::google::protobuf::int32 ACKAskUndoChess::action_id() const {
  return action_id_;
}
inline void ACKAskUndoChess::set_action_id(::google::protobuf::int32 value) {
  set_has_action_id();
  action_id_ = value;
}

// -------------------------------------------------------------------

// Position

// required int32 row = 1;
inline bool Position::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 Position::row() const {
  return row_;
}
inline void Position::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
}

// required int32 col = 2;
inline bool Position::has_col() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_col() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_col() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_col() {
  col_ = 0;
  clear_has_col();
}
inline ::google::protobuf::int32 Position::col() const {
  return col_;
}
inline void Position::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
}

// -------------------------------------------------------------------

// REQGameOver

// optional int32 winner_id = 1;
inline bool REQGameOver::has_winner_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQGameOver::set_has_winner_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQGameOver::clear_has_winner_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQGameOver::clear_winner_id() {
  winner_id_ = 0;
  clear_has_winner_id();
}
inline ::google::protobuf::int32 REQGameOver::winner_id() const {
  return winner_id_;
}
inline void REQGameOver::set_winner_id(::google::protobuf::int32 value) {
  set_has_winner_id();
  winner_id_ = value;
}

// optional int32 loser_id = 2;
inline bool REQGameOver::has_loser_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQGameOver::set_has_loser_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQGameOver::clear_has_loser_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQGameOver::clear_loser_id() {
  loser_id_ = 0;
  clear_has_loser_id();
}
inline ::google::protobuf::int32 REQGameOver::loser_id() const {
  return loser_id_;
}
inline void REQGameOver::set_loser_id(::google::protobuf::int32 value) {
  set_has_loser_id();
  loser_id_ = value;
}

// optional int32 score = 3;
inline bool REQGameOver::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQGameOver::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQGameOver::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQGameOver::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 REQGameOver::score() const {
  return score_;
}
inline void REQGameOver::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int32 black_id = 4;
inline bool REQGameOver::has_black_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void REQGameOver::set_has_black_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void REQGameOver::clear_has_black_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void REQGameOver::clear_black_id() {
  black_id_ = 0;
  clear_has_black_id();
}
inline ::google::protobuf::int32 REQGameOver::black_id() const {
  return black_id_;
}
inline void REQGameOver::set_black_id(::google::protobuf::int32 value) {
  set_has_black_id();
  black_id_ = value;
}

// required int32 white_id = 5;
inline bool REQGameOver::has_white_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void REQGameOver::set_has_white_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void REQGameOver::clear_has_white_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void REQGameOver::clear_white_id() {
  white_id_ = 0;
  clear_has_white_id();
}
inline ::google::protobuf::int32 REQGameOver::white_id() const {
  return white_id_;
}
inline void REQGameOver::set_white_id(::google::protobuf::int32 value) {
  set_has_white_id();
  white_id_ = value;
}

// required bool is_no_winner = 6;
inline bool REQGameOver::has_is_no_winner() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void REQGameOver::set_has_is_no_winner() {
  _has_bits_[0] |= 0x00000020u;
}
inline void REQGameOver::clear_has_is_no_winner() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void REQGameOver::clear_is_no_winner() {
  is_no_winner_ = false;
  clear_has_is_no_winner();
}
inline bool REQGameOver::is_no_winner() const {
  return is_no_winner_;
}
inline void REQGameOver::set_is_no_winner(bool value) {
  set_has_is_no_winner();
  is_no_winner_ = value;
}

// required bool is_force_exit = 7;
inline bool REQGameOver::has_is_force_exit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void REQGameOver::set_has_is_force_exit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void REQGameOver::clear_has_is_force_exit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void REQGameOver::clear_is_force_exit() {
  is_force_exit_ = false;
  clear_has_is_force_exit();
}
inline bool REQGameOver::is_force_exit() const {
  return is_force_exit_;
}
inline void REQGameOver::set_is_force_exit(bool value) {
  set_has_is_force_exit();
  is_force_exit_ = value;
}

// repeated .Position black_positions = 8;
inline int REQGameOver::black_positions_size() const {
  return black_positions_.size();
}
inline void REQGameOver::clear_black_positions() {
  black_positions_.Clear();
}
inline const ::Position& REQGameOver::black_positions(int index) const {
  return black_positions_.Get(index);
}
inline ::Position* REQGameOver::mutable_black_positions(int index) {
  return black_positions_.Mutable(index);
}
inline ::Position* REQGameOver::add_black_positions() {
  return black_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Position >&
REQGameOver::black_positions() const {
  return black_positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Position >*
REQGameOver::mutable_black_positions() {
  return &black_positions_;
}

// repeated .Position white_positions = 9;
inline int REQGameOver::white_positions_size() const {
  return white_positions_.size();
}
inline void REQGameOver::clear_white_positions() {
  white_positions_.Clear();
}
inline const ::Position& REQGameOver::white_positions(int index) const {
  return white_positions_.Get(index);
}
inline ::Position* REQGameOver::mutable_white_positions(int index) {
  return white_positions_.Mutable(index);
}
inline ::Position* REQGameOver::add_white_positions() {
  return white_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Position >&
REQGameOver::white_positions() const {
  return white_positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Position >*
REQGameOver::mutable_white_positions() {
  return &white_positions_;
}

// -------------------------------------------------------------------

// REQGetGameHistory

// required int32 player_id = 1;
inline bool REQGetGameHistory::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQGetGameHistory::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQGetGameHistory::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQGetGameHistory::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 REQGetGameHistory::player_id() const {
  return player_id_;
}
inline void REQGetGameHistory::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required int32 limit = 2;
inline bool REQGetGameHistory::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQGetGameHistory::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQGetGameHistory::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQGetGameHistory::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 REQGetGameHistory::limit() const {
  return limit_;
}
inline void REQGetGameHistory::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// required int32 offset = 3;
inline bool REQGetGameHistory::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQGetGameHistory::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQGetGameHistory::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQGetGameHistory::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 REQGetGameHistory::offset() const {
  return offset_;
}
inline void REQGetGameHistory::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// GameInfo

// required .UserInfo enemy_userinfo = 1;
inline bool GameInfo::has_enemy_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInfo::set_has_enemy_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInfo::clear_has_enemy_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInfo::clear_enemy_userinfo() {
  if (enemy_userinfo_ != NULL) enemy_userinfo_->::UserInfo::Clear();
  clear_has_enemy_userinfo();
}
inline const ::UserInfo& GameInfo::enemy_userinfo() const {
  return enemy_userinfo_ != NULL ? *enemy_userinfo_ : *default_instance_->enemy_userinfo_;
}
inline ::UserInfo* GameInfo::mutable_enemy_userinfo() {
  set_has_enemy_userinfo();
  if (enemy_userinfo_ == NULL) enemy_userinfo_ = new ::UserInfo;
  return enemy_userinfo_;
}
inline ::UserInfo* GameInfo::release_enemy_userinfo() {
  clear_has_enemy_userinfo();
  ::UserInfo* temp = enemy_userinfo_;
  enemy_userinfo_ = NULL;
  return temp;
}
inline void GameInfo::set_allocated_enemy_userinfo(::UserInfo* enemy_userinfo) {
  delete enemy_userinfo_;
  enemy_userinfo_ = enemy_userinfo;
  if (enemy_userinfo) {
    set_has_enemy_userinfo();
  } else {
    clear_has_enemy_userinfo();
  }
}

// required int32 game_id = 2;
inline bool GameInfo::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInfo::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInfo::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInfo::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 GameInfo::game_id() const {
  return game_id_;
}
inline void GameInfo::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// required int32 winner_id = 3;
inline bool GameInfo::has_winner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInfo::set_has_winner_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInfo::clear_has_winner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInfo::clear_winner_id() {
  winner_id_ = 0;
  clear_has_winner_id();
}
inline ::google::protobuf::int32 GameInfo::winner_id() const {
  return winner_id_;
}
inline void GameInfo::set_winner_id(::google::protobuf::int32 value) {
  set_has_winner_id();
  winner_id_ = value;
}

// required int32 loser_id = 4;
inline bool GameInfo::has_loser_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameInfo::set_has_loser_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameInfo::clear_has_loser_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameInfo::clear_loser_id() {
  loser_id_ = 0;
  clear_has_loser_id();
}
inline ::google::protobuf::int32 GameInfo::loser_id() const {
  return loser_id_;
}
inline void GameInfo::set_loser_id(::google::protobuf::int32 value) {
  set_has_loser_id();
  loser_id_ = value;
}

// required int32 score = 5;
inline bool GameInfo::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameInfo::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 GameInfo::score() const {
  return score_;
}
inline void GameInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int32 black_id = 6;
inline bool GameInfo::has_black_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameInfo::set_has_black_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameInfo::clear_has_black_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameInfo::clear_black_id() {
  black_id_ = 0;
  clear_has_black_id();
}
inline ::google::protobuf::int32 GameInfo::black_id() const {
  return black_id_;
}
inline void GameInfo::set_black_id(::google::protobuf::int32 value) {
  set_has_black_id();
  black_id_ = value;
}

// required int32 white_id = 7;
inline bool GameInfo::has_white_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameInfo::set_has_white_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameInfo::clear_has_white_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameInfo::clear_white_id() {
  white_id_ = 0;
  clear_has_white_id();
}
inline ::google::protobuf::int32 GameInfo::white_id() const {
  return white_id_;
}
inline void GameInfo::set_white_id(::google::protobuf::int32 value) {
  set_has_white_id();
  white_id_ = value;
}

// required bool is_no_winner = 8;
inline bool GameInfo::has_is_no_winner() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameInfo::set_has_is_no_winner() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameInfo::clear_has_is_no_winner() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameInfo::clear_is_no_winner() {
  is_no_winner_ = false;
  clear_has_is_no_winner();
}
inline bool GameInfo::is_no_winner() const {
  return is_no_winner_;
}
inline void GameInfo::set_is_no_winner(bool value) {
  set_has_is_no_winner();
  is_no_winner_ = value;
}

// required bool is_force_exit = 9;
inline bool GameInfo::has_is_force_exit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameInfo::set_has_is_force_exit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameInfo::clear_has_is_force_exit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameInfo::clear_is_force_exit() {
  is_force_exit_ = false;
  clear_has_is_force_exit();
}
inline bool GameInfo::is_force_exit() const {
  return is_force_exit_;
}
inline void GameInfo::set_is_force_exit(bool value) {
  set_has_is_force_exit();
  is_force_exit_ = value;
}

// repeated .Position black_positions = 10;
inline int GameInfo::black_positions_size() const {
  return black_positions_.size();
}
inline void GameInfo::clear_black_positions() {
  black_positions_.Clear();
}
inline const ::Position& GameInfo::black_positions(int index) const {
  return black_positions_.Get(index);
}
inline ::Position* GameInfo::mutable_black_positions(int index) {
  return black_positions_.Mutable(index);
}
inline ::Position* GameInfo::add_black_positions() {
  return black_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Position >&
GameInfo::black_positions() const {
  return black_positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Position >*
GameInfo::mutable_black_positions() {
  return &black_positions_;
}

// repeated .Position white_positions = 11;
inline int GameInfo::white_positions_size() const {
  return white_positions_.size();
}
inline void GameInfo::clear_white_positions() {
  white_positions_.Clear();
}
inline const ::Position& GameInfo::white_positions(int index) const {
  return white_positions_.Get(index);
}
inline ::Position* GameInfo::mutable_white_positions(int index) {
  return white_positions_.Mutable(index);
}
inline ::Position* GameInfo::add_white_positions() {
  return white_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Position >&
GameInfo::white_positions() const {
  return white_positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Position >*
GameInfo::mutable_white_positions() {
  return &white_positions_;
}

// required bytes game_time = 12;
inline bool GameInfo::has_game_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameInfo::set_has_game_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameInfo::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameInfo::clear_game_time() {
  if (game_time_ != &::google::protobuf::internal::kEmptyString) {
    game_time_->clear();
  }
  clear_has_game_time();
}
inline const ::std::string& GameInfo::game_time() const {
  return *game_time_;
}
inline void GameInfo::set_game_time(const ::std::string& value) {
  set_has_game_time();
  if (game_time_ == &::google::protobuf::internal::kEmptyString) {
    game_time_ = new ::std::string;
  }
  game_time_->assign(value);
}
inline void GameInfo::set_game_time(const char* value) {
  set_has_game_time();
  if (game_time_ == &::google::protobuf::internal::kEmptyString) {
    game_time_ = new ::std::string;
  }
  game_time_->assign(value);
}
inline void GameInfo::set_game_time(const void* value, size_t size) {
  set_has_game_time();
  if (game_time_ == &::google::protobuf::internal::kEmptyString) {
    game_time_ = new ::std::string;
  }
  game_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameInfo::mutable_game_time() {
  set_has_game_time();
  if (game_time_ == &::google::protobuf::internal::kEmptyString) {
    game_time_ = new ::std::string;
  }
  return game_time_;
}
inline ::std::string* GameInfo::release_game_time() {
  clear_has_game_time();
  if (game_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_time_;
    game_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameInfo::set_allocated_game_time(::std::string* game_time) {
  if (game_time_ != &::google::protobuf::internal::kEmptyString) {
    delete game_time_;
  }
  if (game_time) {
    set_has_game_time();
    game_time_ = game_time;
  } else {
    clear_has_game_time();
    game_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKGetGameHistory

// required int32 player_id = 1;
inline bool ACKGetGameHistory::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKGetGameHistory::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKGetGameHistory::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKGetGameHistory::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 ACKGetGameHistory::player_id() const {
  return player_id_;
}
inline void ACKGetGameHistory::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// repeated .GameInfo game_info_list = 2;
inline int ACKGetGameHistory::game_info_list_size() const {
  return game_info_list_.size();
}
inline void ACKGetGameHistory::clear_game_info_list() {
  game_info_list_.Clear();
}
inline const ::GameInfo& ACKGetGameHistory::game_info_list(int index) const {
  return game_info_list_.Get(index);
}
inline ::GameInfo* ACKGetGameHistory::mutable_game_info_list(int index) {
  return game_info_list_.Mutable(index);
}
inline ::GameInfo* ACKGetGameHistory::add_game_info_list() {
  return game_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameInfo >&
ACKGetGameHistory::game_info_list() const {
  return game_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::GameInfo >*
ACKGetGameHistory::mutable_game_info_list() {
  return &game_info_list_;
}

// -------------------------------------------------------------------

// REQExitAccount

// required int32 user_id = 1;
inline bool REQExitAccount::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQExitAccount::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQExitAccount::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQExitAccount::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQExitAccount::user_id() const {
  return user_id_;
}
inline void REQExitAccount::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// REQChat

// required int32 user_id = 1;
inline bool REQChat::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQChat::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQChat::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQChat::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQChat::user_id() const {
  return user_id_;
}
inline void REQChat::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 table_id = 2;
inline bool REQChat::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQChat::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQChat::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQChat::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 REQChat::table_id() const {
  return table_id_;
}
inline void REQChat::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required int32 opp_id = 3;
inline bool REQChat::has_opp_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQChat::set_has_opp_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQChat::clear_has_opp_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQChat::clear_opp_id() {
  opp_id_ = 0;
  clear_has_opp_id();
}
inline ::google::protobuf::int32 REQChat::opp_id() const {
  return opp_id_;
}
inline void REQChat::set_opp_id(::google::protobuf::int32 value) {
  set_has_opp_id();
  opp_id_ = value;
}

// optional bytes text = 4;
inline bool REQChat::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void REQChat::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void REQChat::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void REQChat::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& REQChat::text() const {
  return *text_;
}
inline void REQChat::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void REQChat::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void REQChat::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQChat::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* REQChat::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQChat::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKChatText

// required int32 is_sensitive = 1;
inline bool ACKChatText::has_is_sensitive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKChatText::set_has_is_sensitive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKChatText::clear_has_is_sensitive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKChatText::clear_is_sensitive() {
  is_sensitive_ = 0;
  clear_has_is_sensitive();
}
inline ::google::protobuf::int32 ACKChatText::is_sensitive() const {
  return is_sensitive_;
}
inline void ACKChatText::set_is_sensitive(::google::protobuf::int32 value) {
  set_has_is_sensitive();
  is_sensitive_ = value;
}

// required int32 user_id = 2;
inline bool ACKChatText::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKChatText::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKChatText::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKChatText::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 ACKChatText::user_id() const {
  return user_id_;
}
inline void ACKChatText::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 table_id = 3;
inline bool ACKChatText::has_table_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKChatText::set_has_table_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKChatText::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKChatText::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 ACKChatText::table_id() const {
  return table_id_;
}
inline void ACKChatText::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required int32 opp_id = 4;
inline bool ACKChatText::has_opp_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKChatText::set_has_opp_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKChatText::clear_has_opp_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKChatText::clear_opp_id() {
  opp_id_ = 0;
  clear_has_opp_id();
}
inline ::google::protobuf::int32 ACKChatText::opp_id() const {
  return opp_id_;
}
inline void ACKChatText::set_opp_id(::google::protobuf::int32 value) {
  set_has_opp_id();
  opp_id_ = value;
}

// optional bytes text = 5;
inline bool ACKChatText::has_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACKChatText::set_has_text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACKChatText::clear_has_text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACKChatText::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ACKChatText::text() const {
  return *text_;
}
inline void ACKChatText::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ACKChatText::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ACKChatText::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKChatText::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ACKChatText::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKChatText::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQGetFriendInfo

// required bytes firend_name = 1;
inline bool REQGetFriendInfo::has_firend_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQGetFriendInfo::set_has_firend_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQGetFriendInfo::clear_has_firend_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQGetFriendInfo::clear_firend_name() {
  if (firend_name_ != &::google::protobuf::internal::kEmptyString) {
    firend_name_->clear();
  }
  clear_has_firend_name();
}
inline const ::std::string& REQGetFriendInfo::firend_name() const {
  return *firend_name_;
}
inline void REQGetFriendInfo::set_firend_name(const ::std::string& value) {
  set_has_firend_name();
  if (firend_name_ == &::google::protobuf::internal::kEmptyString) {
    firend_name_ = new ::std::string;
  }
  firend_name_->assign(value);
}
inline void REQGetFriendInfo::set_firend_name(const char* value) {
  set_has_firend_name();
  if (firend_name_ == &::google::protobuf::internal::kEmptyString) {
    firend_name_ = new ::std::string;
  }
  firend_name_->assign(value);
}
inline void REQGetFriendInfo::set_firend_name(const void* value, size_t size) {
  set_has_firend_name();
  if (firend_name_ == &::google::protobuf::internal::kEmptyString) {
    firend_name_ = new ::std::string;
  }
  firend_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQGetFriendInfo::mutable_firend_name() {
  set_has_firend_name();
  if (firend_name_ == &::google::protobuf::internal::kEmptyString) {
    firend_name_ = new ::std::string;
  }
  return firend_name_;
}
inline ::std::string* REQGetFriendInfo::release_firend_name() {
  clear_has_firend_name();
  if (firend_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firend_name_;
    firend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQGetFriendInfo::set_allocated_firend_name(::std::string* firend_name) {
  if (firend_name_ != &::google::protobuf::internal::kEmptyString) {
    delete firend_name_;
  }
  if (firend_name) {
    set_has_firend_name();
    firend_name_ = firend_name;
  } else {
    clear_has_firend_name();
    firend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 user_id = 2;
inline bool REQGetFriendInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQGetFriendInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQGetFriendInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQGetFriendInfo::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQGetFriendInfo::user_id() const {
  return user_id_;
}
inline void REQGetFriendInfo::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// ACKGetFriendInfo

// required .UserInfo firendinfo = 1;
inline bool ACKGetFriendInfo::has_firendinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKGetFriendInfo::set_has_firendinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKGetFriendInfo::clear_has_firendinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKGetFriendInfo::clear_firendinfo() {
  if (firendinfo_ != NULL) firendinfo_->::UserInfo::Clear();
  clear_has_firendinfo();
}
inline const ::UserInfo& ACKGetFriendInfo::firendinfo() const {
  return firendinfo_ != NULL ? *firendinfo_ : *default_instance_->firendinfo_;
}
inline ::UserInfo* ACKGetFriendInfo::mutable_firendinfo() {
  set_has_firendinfo();
  if (firendinfo_ == NULL) firendinfo_ = new ::UserInfo;
  return firendinfo_;
}
inline ::UserInfo* ACKGetFriendInfo::release_firendinfo() {
  clear_has_firendinfo();
  ::UserInfo* temp = firendinfo_;
  firendinfo_ = NULL;
  return temp;
}
inline void ACKGetFriendInfo::set_allocated_firendinfo(::UserInfo* firendinfo) {
  delete firendinfo_;
  firendinfo_ = firendinfo;
  if (firendinfo) {
    set_has_firendinfo();
  } else {
    clear_has_firendinfo();
  }
}

// required bool is_my_friend = 2;
inline bool ACKGetFriendInfo::has_is_my_friend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKGetFriendInfo::set_has_is_my_friend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKGetFriendInfo::clear_has_is_my_friend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKGetFriendInfo::clear_is_my_friend() {
  is_my_friend_ = false;
  clear_has_is_my_friend();
}
inline bool ACKGetFriendInfo::is_my_friend() const {
  return is_my_friend_;
}
inline void ACKGetFriendInfo::set_is_my_friend(bool value) {
  set_has_is_my_friend();
  is_my_friend_ = value;
}

// required bool is_exist = 3;
inline bool ACKGetFriendInfo::has_is_exist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKGetFriendInfo::set_has_is_exist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKGetFriendInfo::clear_has_is_exist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKGetFriendInfo::clear_is_exist() {
  is_exist_ = false;
  clear_has_is_exist();
}
inline bool ACKGetFriendInfo::is_exist() const {
  return is_exist_;
}
inline void ACKGetFriendInfo::set_is_exist(bool value) {
  set_has_is_exist();
  is_exist_ = value;
}

// -------------------------------------------------------------------

// REQAddFriend

// required int32 friend_id = 1;
inline bool REQAddFriend::has_friend_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQAddFriend::set_has_friend_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQAddFriend::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQAddFriend::clear_friend_id() {
  friend_id_ = 0;
  clear_has_friend_id();
}
inline ::google::protobuf::int32 REQAddFriend::friend_id() const {
  return friend_id_;
}
inline void REQAddFriend::set_friend_id(::google::protobuf::int32 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// required int32 user_id = 2;
inline bool REQAddFriend::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQAddFriend::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQAddFriend::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQAddFriend::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQAddFriend::user_id() const {
  return user_id_;
}
inline void REQAddFriend::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// ACKAddFriend

// required int32 code = 1;
inline bool ACKAddFriend::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKAddFriend::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKAddFriend::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKAddFriend::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKAddFriend::code() const {
  return code_;
}
inline void ACKAddFriend::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional bytes result_msg = 2;
inline bool ACKAddFriend::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKAddFriend::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKAddFriend::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKAddFriend::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKAddFriend::result_msg() const {
  return *result_msg_;
}
inline void ACKAddFriend::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAddFriend::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAddFriend::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKAddFriend::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKAddFriend::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKAddFriend::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQRequestFriend

// required int32 num = 1;
inline bool REQRequestFriend::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQRequestFriend::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQRequestFriend::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQRequestFriend::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 REQRequestFriend::num() const {
  return num_;
}
inline void REQRequestFriend::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// required int32 user_id = 2;
inline bool REQRequestFriend::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQRequestFriend::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQRequestFriend::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQRequestFriend::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQRequestFriend::user_id() const {
  return user_id_;
}
inline void REQRequestFriend::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// REQIsAgreeFriend

// required int32 user_id = 1;
inline bool REQIsAgreeFriend::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQIsAgreeFriend::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQIsAgreeFriend::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQIsAgreeFriend::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQIsAgreeFriend::user_id() const {
  return user_id_;
}
inline void REQIsAgreeFriend::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 friend_id = 2;
inline bool REQIsAgreeFriend::has_friend_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQIsAgreeFriend::set_has_friend_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQIsAgreeFriend::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQIsAgreeFriend::clear_friend_id() {
  friend_id_ = 0;
  clear_has_friend_id();
}
inline ::google::protobuf::int32 REQIsAgreeFriend::friend_id() const {
  return friend_id_;
}
inline void REQIsAgreeFriend::set_friend_id(::google::protobuf::int32 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// required bool is_agree = 3;
inline bool REQIsAgreeFriend::has_is_agree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQIsAgreeFriend::set_has_is_agree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQIsAgreeFriend::clear_has_is_agree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQIsAgreeFriend::clear_is_agree() {
  is_agree_ = false;
  clear_has_is_agree();
}
inline bool REQIsAgreeFriend::is_agree() const {
  return is_agree_;
}
inline void REQIsAgreeFriend::set_is_agree(bool value) {
  set_has_is_agree();
  is_agree_ = value;
}

// -------------------------------------------------------------------

// ACKIsAgreeFriend

// required int32 code = 1;
inline bool ACKIsAgreeFriend::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKIsAgreeFriend::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKIsAgreeFriend::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKIsAgreeFriend::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKIsAgreeFriend::code() const {
  return code_;
}
inline void ACKIsAgreeFriend::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKIsAgreeFriend::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKIsAgreeFriend::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKIsAgreeFriend::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKIsAgreeFriend::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKIsAgreeFriend::result_msg() const {
  return *result_msg_;
}
inline void ACKIsAgreeFriend::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKIsAgreeFriend::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKIsAgreeFriend::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKIsAgreeFriend::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKIsAgreeFriend::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKIsAgreeFriend::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQFriendsList

// required int32 user_id = 1;
inline bool REQFriendsList::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQFriendsList::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQFriendsList::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQFriendsList::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQFriendsList::user_id() const {
  return user_id_;
}
inline void REQFriendsList::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// ACKFriendsList

// repeated .UserInfo firendinfo = 1;
inline int ACKFriendsList::firendinfo_size() const {
  return firendinfo_.size();
}
inline void ACKFriendsList::clear_firendinfo() {
  firendinfo_.Clear();
}
inline const ::UserInfo& ACKFriendsList::firendinfo(int index) const {
  return firendinfo_.Get(index);
}
inline ::UserInfo* ACKFriendsList::mutable_firendinfo(int index) {
  return firendinfo_.Mutable(index);
}
inline ::UserInfo* ACKFriendsList::add_firendinfo() {
  return firendinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
ACKFriendsList::firendinfo() const {
  return firendinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
ACKFriendsList::mutable_firendinfo() {
  return &firendinfo_;
}

// -------------------------------------------------------------------

// REQWaitFriendsList

// required int32 user_id = 1;
inline bool REQWaitFriendsList::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQWaitFriendsList::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQWaitFriendsList::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQWaitFriendsList::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQWaitFriendsList::user_id() const {
  return user_id_;
}
inline void REQWaitFriendsList::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// ACKWaitFriendsList

// repeated .UserInfo firendinfo = 1;
inline int ACKWaitFriendsList::firendinfo_size() const {
  return firendinfo_.size();
}
inline void ACKWaitFriendsList::clear_firendinfo() {
  firendinfo_.Clear();
}
inline const ::UserInfo& ACKWaitFriendsList::firendinfo(int index) const {
  return firendinfo_.Get(index);
}
inline ::UserInfo* ACKWaitFriendsList::mutable_firendinfo(int index) {
  return firendinfo_.Mutable(index);
}
inline ::UserInfo* ACKWaitFriendsList::add_firendinfo() {
  return firendinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
ACKWaitFriendsList::firendinfo() const {
  return firendinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
ACKWaitFriendsList::mutable_firendinfo() {
  return &firendinfo_;
}

// repeated bytes times = 2;
inline int ACKWaitFriendsList::times_size() const {
  return times_.size();
}
inline void ACKWaitFriendsList::clear_times() {
  times_.Clear();
}
inline const ::std::string& ACKWaitFriendsList::times(int index) const {
  return times_.Get(index);
}
inline ::std::string* ACKWaitFriendsList::mutable_times(int index) {
  return times_.Mutable(index);
}
inline void ACKWaitFriendsList::set_times(int index, const ::std::string& value) {
  times_.Mutable(index)->assign(value);
}
inline void ACKWaitFriendsList::set_times(int index, const char* value) {
  times_.Mutable(index)->assign(value);
}
inline void ACKWaitFriendsList::set_times(int index, const void* value, size_t size) {
  times_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKWaitFriendsList::add_times() {
  return times_.Add();
}
inline void ACKWaitFriendsList::add_times(const ::std::string& value) {
  times_.Add()->assign(value);
}
inline void ACKWaitFriendsList::add_times(const char* value) {
  times_.Add()->assign(value);
}
inline void ACKWaitFriendsList::add_times(const void* value, size_t size) {
  times_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ACKWaitFriendsList::times() const {
  return times_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ACKWaitFriendsList::mutable_times() {
  return &times_;
}

// -------------------------------------------------------------------

// REQDeleteFriend

// required int32 friend_id = 1;
inline bool REQDeleteFriend::has_friend_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQDeleteFriend::set_has_friend_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQDeleteFriend::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQDeleteFriend::clear_friend_id() {
  friend_id_ = 0;
  clear_has_friend_id();
}
inline ::google::protobuf::int32 REQDeleteFriend::friend_id() const {
  return friend_id_;
}
inline void REQDeleteFriend::set_friend_id(::google::protobuf::int32 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// required int32 user_id = 2;
inline bool REQDeleteFriend::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQDeleteFriend::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQDeleteFriend::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQDeleteFriend::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQDeleteFriend::user_id() const {
  return user_id_;
}
inline void REQDeleteFriend::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// ACKDeleteFriend

// required int32 code = 1;
inline bool ACKDeleteFriend::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKDeleteFriend::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKDeleteFriend::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKDeleteFriend::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKDeleteFriend::code() const {
  return code_;
}
inline void ACKDeleteFriend::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional bytes result_msg = 2;
inline bool ACKDeleteFriend::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKDeleteFriend::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKDeleteFriend::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKDeleteFriend::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKDeleteFriend::result_msg() const {
  return *result_msg_;
}
inline void ACKDeleteFriend::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKDeleteFriend::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKDeleteFriend::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKDeleteFriend::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKDeleteFriend::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKDeleteFriend::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQContinueGame

// required int32 user_id = 1;
inline bool REQContinueGame::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQContinueGame::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQContinueGame::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQContinueGame::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQContinueGame::user_id() const {
  return user_id_;
}
inline void REQContinueGame::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 enemy_user_id = 2;
inline bool REQContinueGame::has_enemy_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQContinueGame::set_has_enemy_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQContinueGame::clear_has_enemy_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQContinueGame::clear_enemy_user_id() {
  enemy_user_id_ = 0;
  clear_has_enemy_user_id();
}
inline ::google::protobuf::int32 REQContinueGame::enemy_user_id() const {
  return enemy_user_id_;
}
inline void REQContinueGame::set_enemy_user_id(::google::protobuf::int32 value) {
  set_has_enemy_user_id();
  enemy_user_id_ = value;
}

// required int32 table_id = 3;
inline bool REQContinueGame::has_table_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQContinueGame::set_has_table_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQContinueGame::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQContinueGame::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 REQContinueGame::table_id() const {
  return table_id_;
}
inline void REQContinueGame::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// ACKContinueGame

// required int32 code = 1;
inline bool ACKContinueGame::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKContinueGame::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKContinueGame::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKContinueGame::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKContinueGame::code() const {
  return code_;
}
inline void ACKContinueGame::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKContinueGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKContinueGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKContinueGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKContinueGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKContinueGame::result_msg() const {
  return *result_msg_;
}
inline void ACKContinueGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKContinueGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKContinueGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKContinueGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKContinueGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKContinueGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQAskContinueGame

// required int32 enemy_user_id = 1;
inline bool REQAskContinueGame::has_enemy_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQAskContinueGame::set_has_enemy_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQAskContinueGame::clear_has_enemy_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQAskContinueGame::clear_enemy_user_id() {
  enemy_user_id_ = 0;
  clear_has_enemy_user_id();
}
inline ::google::protobuf::int32 REQAskContinueGame::enemy_user_id() const {
  return enemy_user_id_;
}
inline void REQAskContinueGame::set_enemy_user_id(::google::protobuf::int32 value) {
  set_has_enemy_user_id();
  enemy_user_id_ = value;
}

// required int32 user_id = 2;
inline bool REQAskContinueGame::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQAskContinueGame::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQAskContinueGame::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQAskContinueGame::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQAskContinueGame::user_id() const {
  return user_id_;
}
inline void REQAskContinueGame::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 table_id = 3;
inline bool REQAskContinueGame::has_table_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQAskContinueGame::set_has_table_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQAskContinueGame::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQAskContinueGame::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 REQAskContinueGame::table_id() const {
  return table_id_;
}
inline void REQAskContinueGame::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// ACKAskContinueGame

// required bool is_agree_continue_game = 1;
inline bool ACKAskContinueGame::has_is_agree_continue_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKAskContinueGame::set_has_is_agree_continue_game() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKAskContinueGame::clear_has_is_agree_continue_game() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKAskContinueGame::clear_is_agree_continue_game() {
  is_agree_continue_game_ = false;
  clear_has_is_agree_continue_game();
}
inline bool ACKAskContinueGame::is_agree_continue_game() const {
  return is_agree_continue_game_;
}
inline void ACKAskContinueGame::set_is_agree_continue_game(bool value) {
  set_has_is_agree_continue_game();
  is_agree_continue_game_ = value;
}

// required int32 enemy_user_id = 2;
inline bool ACKAskContinueGame::has_enemy_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKAskContinueGame::set_has_enemy_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKAskContinueGame::clear_has_enemy_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKAskContinueGame::clear_enemy_user_id() {
  enemy_user_id_ = 0;
  clear_has_enemy_user_id();
}
inline ::google::protobuf::int32 ACKAskContinueGame::enemy_user_id() const {
  return enemy_user_id_;
}
inline void ACKAskContinueGame::set_enemy_user_id(::google::protobuf::int32 value) {
  set_has_enemy_user_id();
  enemy_user_id_ = value;
}

// required int32 user_id = 3;
inline bool ACKAskContinueGame::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKAskContinueGame::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKAskContinueGame::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKAskContinueGame::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 ACKAskContinueGame::user_id() const {
  return user_id_;
}
inline void ACKAskContinueGame::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 table_id = 4;
inline bool ACKAskContinueGame::has_table_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKAskContinueGame::set_has_table_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKAskContinueGame::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKAskContinueGame::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 ACKAskContinueGame::table_id() const {
  return table_id_;
}
inline void ACKAskContinueGame::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// -------------------------------------------------------------------

// ACKRefuseContinueGame

// required int32 code = 1;
inline bool ACKRefuseContinueGame::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKRefuseContinueGame::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKRefuseContinueGame::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKRefuseContinueGame::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKRefuseContinueGame::code() const {
  return code_;
}
inline void ACKRefuseContinueGame::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKRefuseContinueGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKRefuseContinueGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKRefuseContinueGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKRefuseContinueGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKRefuseContinueGame::result_msg() const {
  return *result_msg_;
}
inline void ACKRefuseContinueGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRefuseContinueGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRefuseContinueGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKRefuseContinueGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKRefuseContinueGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKRefuseContinueGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQInviteFriendGame

// optional .UserInfo userinfo = 1;
inline bool REQInviteFriendGame::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQInviteFriendGame::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQInviteFriendGame::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQInviteFriendGame::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& REQInviteFriendGame::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* REQInviteFriendGame::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* REQInviteFriendGame::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void REQInviteFriendGame::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// required int32 friend_id = 2;
inline bool REQInviteFriendGame::has_friend_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQInviteFriendGame::set_has_friend_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQInviteFriendGame::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQInviteFriendGame::clear_friend_id() {
  friend_id_ = 0;
  clear_has_friend_id();
}
inline ::google::protobuf::int32 REQInviteFriendGame::friend_id() const {
  return friend_id_;
}
inline void REQInviteFriendGame::set_friend_id(::google::protobuf::int32 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// -------------------------------------------------------------------

// ACKInviteFriendGame

// required int32 code = 1;
inline bool ACKInviteFriendGame::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKInviteFriendGame::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKInviteFriendGame::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKInviteFriendGame::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKInviteFriendGame::code() const {
  return code_;
}
inline void ACKInviteFriendGame::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKInviteFriendGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKInviteFriendGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKInviteFriendGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKInviteFriendGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKInviteFriendGame::result_msg() const {
  return *result_msg_;
}
inline void ACKInviteFriendGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKInviteFriendGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKInviteFriendGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKInviteFriendGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKInviteFriendGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKInviteFriendGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQAskInviteFriendGame

// optional .UserInfo friend_info = 1;
inline bool REQAskInviteFriendGame::has_friend_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQAskInviteFriendGame::set_has_friend_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQAskInviteFriendGame::clear_has_friend_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQAskInviteFriendGame::clear_friend_info() {
  if (friend_info_ != NULL) friend_info_->::UserInfo::Clear();
  clear_has_friend_info();
}
inline const ::UserInfo& REQAskInviteFriendGame::friend_info() const {
  return friend_info_ != NULL ? *friend_info_ : *default_instance_->friend_info_;
}
inline ::UserInfo* REQAskInviteFriendGame::mutable_friend_info() {
  set_has_friend_info();
  if (friend_info_ == NULL) friend_info_ = new ::UserInfo;
  return friend_info_;
}
inline ::UserInfo* REQAskInviteFriendGame::release_friend_info() {
  clear_has_friend_info();
  ::UserInfo* temp = friend_info_;
  friend_info_ = NULL;
  return temp;
}
inline void REQAskInviteFriendGame::set_allocated_friend_info(::UserInfo* friend_info) {
  delete friend_info_;
  friend_info_ = friend_info;
  if (friend_info) {
    set_has_friend_info();
  } else {
    clear_has_friend_info();
  }
}

// required int32 user_id = 2;
inline bool REQAskInviteFriendGame::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQAskInviteFriendGame::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQAskInviteFriendGame::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQAskInviteFriendGame::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQAskInviteFriendGame::user_id() const {
  return user_id_;
}
inline void REQAskInviteFriendGame::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// ACKAskInviteFriendGame

// required bool is_agree_invite_game = 1;
inline bool ACKAskInviteFriendGame::has_is_agree_invite_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKAskInviteFriendGame::set_has_is_agree_invite_game() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKAskInviteFriendGame::clear_has_is_agree_invite_game() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKAskInviteFriendGame::clear_is_agree_invite_game() {
  is_agree_invite_game_ = false;
  clear_has_is_agree_invite_game();
}
inline bool ACKAskInviteFriendGame::is_agree_invite_game() const {
  return is_agree_invite_game_;
}
inline void ACKAskInviteFriendGame::set_is_agree_invite_game(bool value) {
  set_has_is_agree_invite_game();
  is_agree_invite_game_ = value;
}

// optional .UserInfo userinfo = 2;
inline bool ACKAskInviteFriendGame::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKAskInviteFriendGame::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKAskInviteFriendGame::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKAskInviteFriendGame::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& ACKAskInviteFriendGame::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* ACKAskInviteFriendGame::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* ACKAskInviteFriendGame::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void ACKAskInviteFriendGame::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// required int32 friend_id = 3;
inline bool ACKAskInviteFriendGame::has_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKAskInviteFriendGame::set_has_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKAskInviteFriendGame::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKAskInviteFriendGame::clear_friend_id() {
  friend_id_ = 0;
  clear_has_friend_id();
}
inline ::google::protobuf::int32 ACKAskInviteFriendGame::friend_id() const {
  return friend_id_;
}
inline void ACKAskInviteFriendGame::set_friend_id(::google::protobuf::int32 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// optional bytes result_msg = 4;
inline bool ACKAskInviteFriendGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKAskInviteFriendGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKAskInviteFriendGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKAskInviteFriendGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKAskInviteFriendGame::result_msg() const {
  return *result_msg_;
}
inline void ACKAskInviteFriendGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAskInviteFriendGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAskInviteFriendGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKAskInviteFriendGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKAskInviteFriendGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKAskInviteFriendGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKRefuseInviteFriendGame

// required int32 code = 1;
inline bool ACKRefuseInviteFriendGame::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKRefuseInviteFriendGame::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKRefuseInviteFriendGame::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKRefuseInviteFriendGame::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKRefuseInviteFriendGame::code() const {
  return code_;
}
inline void ACKRefuseInviteFriendGame::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKRefuseInviteFriendGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKRefuseInviteFriendGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKRefuseInviteFriendGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKRefuseInviteFriendGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKRefuseInviteFriendGame::result_msg() const {
  return *result_msg_;
}
inline void ACKRefuseInviteFriendGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRefuseInviteFriendGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRefuseInviteFriendGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKRefuseInviteFriendGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKRefuseInviteFriendGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKRefuseInviteFriendGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQBuy

// required int32 user_id = 1;
inline bool REQBuy::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQBuy::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQBuy::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQBuy::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQBuy::user_id() const {
  return user_id_;
}
inline void REQBuy::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int32 item_id = 2;
inline bool REQBuy::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQBuy::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQBuy::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQBuy::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 REQBuy::item_id() const {
  return item_id_;
}
inline void REQBuy::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required int32 price = 3;
inline bool REQBuy::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQBuy::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQBuy::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQBuy::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 REQBuy::price() const {
  return price_;
}
inline void REQBuy::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// required int32 num = 4;
inline bool REQBuy::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void REQBuy::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void REQBuy::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void REQBuy::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 REQBuy::num() const {
  return num_;
}
inline void REQBuy::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// ACKBuy

// required int32 code = 1;
inline bool ACKBuy::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKBuy::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKBuy::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKBuy::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKBuy::code() const {
  return code_;
}
inline void ACKBuy::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKBuy::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKBuy::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKBuy::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKBuy::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKBuy::result_msg() const {
  return *result_msg_;
}
inline void ACKBuy::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKBuy::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKBuy::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKBuy::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKBuy::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKBuy::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 item_id = 3;
inline bool ACKBuy::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKBuy::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKBuy::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKBuy::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ACKBuy::item_id() const {
  return item_id_;
}
inline void ACKBuy::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 price = 4;
inline bool ACKBuy::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKBuy::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKBuy::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKBuy::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ACKBuy::price() const {
  return price_;
}
inline void ACKBuy::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 num = 5;
inline bool ACKBuy::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACKBuy::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACKBuy::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACKBuy::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ACKBuy::num() const {
  return num_;
}
inline void ACKBuy::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_paohuziProtocol_2eproto__INCLUDED
