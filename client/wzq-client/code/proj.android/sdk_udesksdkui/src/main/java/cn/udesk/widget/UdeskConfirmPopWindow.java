package cn.udesk.widget;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.res.Resources;import android.graphics.drawable.ColorDrawable;import android.text.Html;import android.text.Spannable;import android.text.SpannableStringBuilder;import android.text.SpannedString;import android.text.method.LinkMovementMethod;import android.text.method.ScrollingMovementMethod;import android.text.style.ClickableSpan;import android.text.style.URLSpan;import android.text.util.Linkify;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.PopupWindow;import android.widget.TextView;import cn.udesk.R;import cn.udesk.UdeskSDKManager;import cn.udesk.activity.MessageAdatper;import cn.udesk.activity.UdeskChatActivity;import cn.udesk.activity.UdeskWebViewUrlAcivity;import udesk.core.UdeskConst;import static android.util.Patterns.PHONE;import static android.util.Patterns.WEB_URL;public class UdeskConfirmPopWindow extends PopupWindow implements View.OnClickListener {    private Context context;    public UdeskConfirmPopWindow(Context context) {        super(context);        this.context = context;        try {            setFocusable(true);            setTouchable(true);            setOutsideTouchable(true);            setBackgroundDrawable(new ColorDrawable(context.getResources().getColor(android.R.color.transparent)));        } catch (Resources.NotFoundException e) {            e.printStackTrace();        }    }    public void show(Activity content, View locationView, String positiveLabel, String negativeLabel, String confirmContent, OnPopConfirmClick onPopMultiMenuClick) {        try {            LayoutInflater layoutInflater = LayoutInflater.from(content);            mOnPopConfirmClick = onPopMultiMenuClick;            ViewGroup rootView = (ViewGroup) layoutInflater.inflate(R.layout.udesk_confirm_pop_dialog, null);            ViewGroup popupView = (ViewGroup) rootView.findViewById(R.id.udesk_confirm_pop_panel);            TextView ngegativeTv = (TextView) popupView.findViewById(R.id.udesk_confirm_pop_negative);            ngegativeTv.setText(negativeLabel);            ngegativeTv.setOnClickListener(this);            TextView potitiveTv = (TextView) popupView.findViewById(R.id.udesk_confirm_pop_positive);            potitiveTv.setText(positiveLabel);            potitiveTv.setOnClickListener(this);            TextView popcontent = ((TextView) popupView.findViewById(R.id.udesk_confirm_pop_content));            dealhtml(confirmContent,popcontent);            // 把菜单都添加进去            setContentView(rootView);            setWindowLayoutMode(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);            setWidth(ViewGroup.LayoutParams.WRAP_CONTENT);            setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);            //显示出来            showAtLocation(locationView, Gravity.CENTER, 0, 0);        } catch (Exception e) {            e.printStackTrace();        }    }    public void cancle() {        try {            dismiss();        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void onClick(View childView) {        if (mOnPopConfirmClick != null) {            int id = childView.getId();            if (id == R.id.udesk_confirm_pop_positive) {                mOnPopConfirmClick.onPositiveClick();            } else if (id == R.id.udesk_confirm_pop_negative) {                mOnPopConfirmClick.onNegativeClick();            }        }        dismiss();    }    private OnPopConfirmClick mOnPopConfirmClick;    public interface OnPopConfirmClick {        void onPositiveClick();        void onNegativeClick();        void callTelPhone(String phone);        void toWebViewAcivity(String mUrl);    }    private void dealhtml(String confirmContent, TextView rich_tvmsg) {        try {            CharSequence charSequence = Html.fromHtml(confirmContent);            String msg = charSequence.toString();            if (msg.endsWith("\n\n")) {                charSequence = charSequence.subSequence(0, charSequence.length() - 2);                rich_tvmsg.setText(charSequence);            } else {                rich_tvmsg.setText(charSequence);            }            Linkify.addLinks(rich_tvmsg, WEB_URL, null);            Linkify.addLinks(rich_tvmsg, PHONE, null);            CharSequence text = rich_tvmsg.getText();            if (text instanceof Spannable) {                int end = text.length();                Spannable sp = (Spannable) rich_tvmsg.getText();                URLSpan[] urls = sp.getSpans(0, end, URLSpan.class);                SpannableStringBuilder style = new SpannableStringBuilder(text);                style.clearSpans();                for (URLSpan url : urls) {                    MyURLSpan myURLSpan = new MyURLSpan(url.getURL());                    style.setSpan(myURLSpan, sp.getSpanStart(url),                            sp.getSpanEnd(url),                            Spannable.SPAN_EXCLUSIVE_INCLUSIVE);                }                rich_tvmsg.setText(style);            } else if (text instanceof SpannedString) {                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(charSequence);                URLSpan[] urls = spannableStringBuilder.getSpans(0, charSequence.length(), URLSpan.class);                spannableStringBuilder.clearSpans();                SpannedString sp = (SpannedString) rich_tvmsg.getText();                for (URLSpan url : urls) {                    MyURLSpan myURLSpan = new MyURLSpan(url.getURL());                    int statr = sp.getSpanStart(url);                    int end = sp.getSpanEnd(url);                    spannableStringBuilder.setSpan(myURLSpan, statr,                            end,                            Spannable.SPAN_EXCLUSIVE_INCLUSIVE);                }                rich_tvmsg.setText(spannableStringBuilder);                rich_tvmsg.setMovementMethod(LinkMovementMethod.getInstance());            }        } catch (Exception e) {            e.printStackTrace();        } catch (OutOfMemoryError error) {            error.printStackTrace();        }    }    private class MyURLSpan extends ClickableSpan {        private final String mUrl;        MyURLSpan(String url) {            mUrl = url;        }        @Override        public void onClick(View widget) {            try {                if (WEB_URL.matcher(mUrl).find()) {                    if (mOnPopConfirmClick != null) {                        mOnPopConfirmClick.toWebViewAcivity(mUrl);                    }                } else if (PHONE.matcher(mUrl).find()) {                    String phone = mUrl.toLowerCase();                    if (!phone.startsWith("tel:")) {                        phone = "tel:" + mUrl;                    }                    if (mOnPopConfirmClick != null) {                        mOnPopConfirmClick.callTelPhone(phone);                    }                }            } catch (Exception e) {                e.printStackTrace();            } catch (OutOfMemoryError error) {                error.printStackTrace();            }        }    }}