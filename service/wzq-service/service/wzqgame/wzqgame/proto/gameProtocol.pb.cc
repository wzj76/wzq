// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* REQHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQCreatGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQCreatGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKCreatGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKCreatGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQGameOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQGameOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQExitGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQExitGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKExitGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKExitGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQForcExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQForcExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQAskUndoChess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQAskUndoChess_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKAskUndoChess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKAskUndoChess_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKChatText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKChatText_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQContinueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKContinueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQAskContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQAskContinueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKAskContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKAskContinueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRefuseContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRefuseContinueGame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameProtocol_2eproto() {
  protobuf_AddDesc_gameProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  REQHold_descriptor_ = file->message_type(0);
  static const int REQHold_offsets_[1] = {
  };
  REQHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQHold_descriptor_,
      REQHold::default_instance_,
      REQHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQHold));
  ACKHold_descriptor_ = file->message_type(1);
  static const int ACKHold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, result_id_),
  };
  ACKHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKHold_descriptor_,
      ACKHold::default_instance_,
      ACKHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKHold));
  MsgPackage_descriptor_ = file->message_type(2);
  static const int MsgPackage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, clientid_),
  };
  MsgPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPackage_descriptor_,
      MsgPackage::default_instance_,
      MsgPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPackage));
  UserInfo_descriptor_ = file->message_type(3);
  static const int UserInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, wintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, losetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, head_id_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  REQCreatGame_descriptor_ = file->message_type(4);
  static const int REQCreatGame_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, userinfo_player1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, player1_clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, userinfo_player2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, player2_clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, black_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, white_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, board_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, board_col_),
  };
  REQCreatGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQCreatGame_descriptor_,
      REQCreatGame::default_instance_,
      REQCreatGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQCreatGame));
  ACKCreatGame_descriptor_ = file->message_type(5);
  static const int ACKCreatGame_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, black_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, white_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, coins_),
  };
  ACKCreatGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKCreatGame_descriptor_,
      ACKCreatGame::default_instance_,
      ACKCreatGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKCreatGame));
  REQAction_descriptor_ = file->message_type(6);
  static const int REQAction_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, action_board_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, action_board_col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, remain_time_),
  };
  REQAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQAction_descriptor_,
      REQAction::default_instance_,
      REQAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQAction));
  ACKAction_descriptor_ = file->message_type(7);
  static const int ACKAction_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, action_board_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, action_board_col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, win_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, lose_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, win_msg_),
  };
  ACKAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKAction_descriptor_,
      ACKAction::default_instance_,
      ACKAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKAction));
  Position_descriptor_ = file->message_type(8);
  static const int Position_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, col_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  REQGameOver_descriptor_ = file->message_type(9);
  static const int REQGameOver_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, winner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, loser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, black_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, white_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, is_no_winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, is_force_exit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, black_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, white_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, conis_),
  };
  REQGameOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQGameOver_descriptor_,
      REQGameOver::default_instance_,
      REQGameOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQGameOver));
  REQExitGame_descriptor_ = file->message_type(10);
  static const int REQExitGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, exit_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, exit_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, enemy_user_id_),
  };
  REQExitGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQExitGame_descriptor_,
      REQExitGame::default_instance_,
      REQExitGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQExitGame));
  ACKExitGame_descriptor_ = file->message_type(11);
  static const int ACKExitGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, exit_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, exit_user_id_),
  };
  ACKExitGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKExitGame_descriptor_,
      ACKExitGame::default_instance_,
      ACKExitGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKExitGame));
  REQForcExit_descriptor_ = file->message_type(12);
  static const int REQForcExit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQForcExit, user_id_),
  };
  REQForcExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQForcExit_descriptor_,
      REQForcExit::default_instance_,
      REQForcExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQForcExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQForcExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQForcExit));
  REQAskUndoChess_descriptor_ = file->message_type(13);
  static const int REQAskUndoChess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskUndoChess, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskUndoChess, action_id_),
  };
  REQAskUndoChess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQAskUndoChess_descriptor_,
      REQAskUndoChess::default_instance_,
      REQAskUndoChess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskUndoChess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskUndoChess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQAskUndoChess));
  ACKAskUndoChess_descriptor_ = file->message_type(14);
  static const int ACKAskUndoChess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskUndoChess, is_agree_undo_chess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskUndoChess, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskUndoChess, action_id_),
  };
  ACKAskUndoChess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKAskUndoChess_descriptor_,
      ACKAskUndoChess::default_instance_,
      ACKAskUndoChess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskUndoChess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskUndoChess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKAskUndoChess));
  REQChat_descriptor_ = file->message_type(15);
  static const int REQChat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, opp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, text_),
  };
  REQChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQChat_descriptor_,
      REQChat::default_instance_,
      REQChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQChat));
  ACKChatText_descriptor_ = file->message_type(16);
  static const int ACKChatText_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChatText, is_sensitive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChatText, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChatText, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChatText, opp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChatText, text_),
  };
  ACKChatText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKChatText_descriptor_,
      ACKChatText::default_instance_,
      ACKChatText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChatText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKChatText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKChatText));
  REQContinueGame_descriptor_ = file->message_type(17);
  static const int REQContinueGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, enemy_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, table_id_),
  };
  REQContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQContinueGame_descriptor_,
      REQContinueGame::default_instance_,
      REQContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQContinueGame));
  ACKContinueGame_descriptor_ = file->message_type(18);
  static const int ACKContinueGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKContinueGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKContinueGame, result_msg_),
  };
  ACKContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKContinueGame_descriptor_,
      ACKContinueGame::default_instance_,
      ACKContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKContinueGame));
  REQAskContinueGame_descriptor_ = file->message_type(19);
  static const int REQAskContinueGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, enemy_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, table_id_),
  };
  REQAskContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQAskContinueGame_descriptor_,
      REQAskContinueGame::default_instance_,
      REQAskContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQAskContinueGame));
  ACKAskContinueGame_descriptor_ = file->message_type(20);
  static const int ACKAskContinueGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, is_agree_continue_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, enemy_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, table_id_),
  };
  ACKAskContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKAskContinueGame_descriptor_,
      ACKAskContinueGame::default_instance_,
      ACKAskContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKAskContinueGame));
  ACKRefuseContinueGame_descriptor_ = file->message_type(21);
  static const int ACKRefuseContinueGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseContinueGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseContinueGame, result_msg_),
  };
  ACKRefuseContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRefuseContinueGame_descriptor_,
      ACKRefuseContinueGame::default_instance_,
      ACKRefuseContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRefuseContinueGame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQHold_descriptor_, &REQHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKHold_descriptor_, &ACKHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPackage_descriptor_, &MsgPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQCreatGame_descriptor_, &REQCreatGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKCreatGame_descriptor_, &ACKCreatGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQAction_descriptor_, &REQAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKAction_descriptor_, &ACKAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQGameOver_descriptor_, &REQGameOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQExitGame_descriptor_, &REQExitGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKExitGame_descriptor_, &ACKExitGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQForcExit_descriptor_, &REQForcExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQAskUndoChess_descriptor_, &REQAskUndoChess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKAskUndoChess_descriptor_, &ACKAskUndoChess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQChat_descriptor_, &REQChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKChatText_descriptor_, &ACKChatText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQContinueGame_descriptor_, &REQContinueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKContinueGame_descriptor_, &ACKContinueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQAskContinueGame_descriptor_, &REQAskContinueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKAskContinueGame_descriptor_, &ACKAskContinueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRefuseContinueGame_descriptor_, &ACKRefuseContinueGame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameProtocol_2eproto() {
  delete REQHold::default_instance_;
  delete REQHold_reflection_;
  delete ACKHold::default_instance_;
  delete ACKHold_reflection_;
  delete MsgPackage::default_instance_;
  delete MsgPackage_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete REQCreatGame::default_instance_;
  delete REQCreatGame_reflection_;
  delete ACKCreatGame::default_instance_;
  delete ACKCreatGame_reflection_;
  delete REQAction::default_instance_;
  delete REQAction_reflection_;
  delete ACKAction::default_instance_;
  delete ACKAction_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete REQGameOver::default_instance_;
  delete REQGameOver_reflection_;
  delete REQExitGame::default_instance_;
  delete REQExitGame_reflection_;
  delete ACKExitGame::default_instance_;
  delete ACKExitGame_reflection_;
  delete REQForcExit::default_instance_;
  delete REQForcExit_reflection_;
  delete REQAskUndoChess::default_instance_;
  delete REQAskUndoChess_reflection_;
  delete ACKAskUndoChess::default_instance_;
  delete ACKAskUndoChess_reflection_;
  delete REQChat::default_instance_;
  delete REQChat_reflection_;
  delete ACKChatText::default_instance_;
  delete ACKChatText_reflection_;
  delete REQContinueGame::default_instance_;
  delete REQContinueGame_reflection_;
  delete ACKContinueGame::default_instance_;
  delete ACKContinueGame_reflection_;
  delete REQAskContinueGame::default_instance_;
  delete REQAskContinueGame_reflection_;
  delete ACKAskContinueGame::default_instance_;
  delete ACKAskContinueGame_reflection_;
  delete ACKRefuseContinueGame::default_instance_;
  delete ACKRefuseContinueGame_reflection_;
}

void protobuf_AddDesc_gameProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022gameProtocol.proto\"\t\n\007REQHold\"\034\n\007ACKHo"
    "ld\022\021\n\tresult_id\030\001 \001(\005\"i\n\nMsgPackage\022\016\n\006m"
    "sg_id\030\001 \001(\003\022\016\n\006seq_id\030\002 \001(\003\022\017\n\007user_id\030\003"
    " \001(\003\022\013\n\003msg\030\004 \001(\014\022\013\n\003src\030\005 \001(\014\022\020\n\010client"
    "id\030\006 \001(\003\"\210\001\n\010UserInfo\022\n\n\002id\030\001 \001(\005\022\020\n\010use"
    "rname\030\002 \001(\014\022\020\n\010wintimes\030\003 \001(\005\022\021\n\tlosetim"
    "es\030\004 \001(\005\022\r\n\005score\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\n"
    "\n\002xp\030\007 \001(\005\022\017\n\007head_id\030\010 \001(\005\"\347\001\n\014REQCreat"
    "Game\022\017\n\007req_msg\030\001 \002(\014\022#\n\020userinfo_player"
    "1\030\002 \001(\0132\t.UserInfo\022\030\n\020player1_clientid\030\003"
    " \001(\005\022#\n\020userinfo_player2\030\004 \001(\0132\t.UserInf"
    "o\022\030\n\020player2_clientid\030\005 \001(\005\022\020\n\010black_id\030"
    "\006 \001(\005\022\020\n\010white_id\030\007 \001(\005\022\021\n\tboard_row\030\010 \001"
    "(\005\022\021\n\tboard_col\030\t \001(\005\"\203\001\n\014ACKCreatGame\022\014"
    "\n\004code\030\001 \002(\005\022\022\n\nresult_msg\030\002 \002(\014\022\017\n\007room"
    "_id\030\003 \002(\005\022\020\n\010black_id\030\004 \002(\005\022\020\n\010white_id\030"
    "\005 \002(\005\022\r\n\005score\030\006 \002(\005\022\r\n\005coins\030\007 \002(\005\"\212\001\n\t"
    "REQAction\022\017\n\007req_msg\030\001 \002(\014\022\020\n\010table_id\030\002"
    " \002(\005\022\021\n\taction_id\030\003 \002(\005\022\030\n\020action_board_"
    "row\030\004 \001(\005\022\030\n\020action_board_col\030\005 \001(\005\022\023\n\013r"
    "emain_time\030\006 \001(\005\"\250\001\n\tACKAction\022\022\n\nresult"
    "_msg\030\001 \002(\014\022\021\n\taction_id\030\002 \002(\005\022\030\n\020action_"
    "board_row\030\003 \001(\005\022\030\n\020action_board_col\030\004 \001("
    "\005\022\016\n\006is_win\030\005 \001(\010\022\016\n\006win_id\030\006 \001(\005\022\017\n\007los"
    "e_id\030\007 \001(\005\022\017\n\007win_msg\030\010 \001(\014\"$\n\010Position\022"
    "\013\n\003row\030\001 \002(\005\022\013\n\003col\030\002 \002(\005\"\351\001\n\013REQGameOve"
    "r\022\021\n\twinner_id\030\001 \001(\005\022\020\n\010loser_id\030\002 \001(\005\022\r"
    "\n\005score\030\003 \001(\005\022\020\n\010black_id\030\004 \002(\005\022\020\n\010white"
    "_id\030\005 \002(\005\022\024\n\014is_no_winner\030\006 \002(\010\022\025\n\ris_fo"
    "rce_exit\030\007 \002(\010\022\"\n\017black_positions\030\010 \003(\0132"
    "\t.Position\022\"\n\017white_positions\030\t \003(\0132\t.Po"
    "sition\022\r\n\005conis\030\n \002(\005\"b\n\013REQExitGame\022\017\n\007"
    "req_msg\030\001 \002(\014\022\025\n\rexit_table_id\030\002 \001(\005\022\024\n\014"
    "exit_user_id\030\003 \002(\005\022\025\n\renemy_user_id\030\004 \002("
    "\005\"\\\n\013ACKExitGame\022\014\n\004code\030\001 \002(\005\022\022\n\nresult"
    "_msg\030\002 \002(\014\022\025\n\rexit_table_id\030\003 \001(\005\022\024\n\014exi"
    "t_user_id\030\004 \001(\005\"\036\n\013REQForcExit\022\017\n\007user_i"
    "d\030\001 \001(\005\"6\n\017REQAskUndoChess\022\020\n\010table_id\030\001"
    " \002(\005\022\021\n\taction_id\030\002 \002(\005\"S\n\017ACKAskUndoChe"
    "ss\022\033\n\023is_agree_undo_chess\030\001 \002(\010\022\020\n\010table"
    "_id\030\002 \002(\005\022\021\n\taction_id\030\003 \002(\005\"J\n\007REQChat\022"
    "\017\n\007user_id\030\001 \002(\005\022\020\n\010table_id\030\002 \002(\005\022\016\n\006op"
    "p_id\030\003 \002(\005\022\014\n\004text\030\004 \001(\014\"d\n\013ACKChatText\022"
    "\024\n\014is_sensitive\030\001 \002(\005\022\017\n\007user_id\030\002 \002(\005\022\020"
    "\n\010table_id\030\003 \002(\005\022\016\n\006opp_id\030\004 \002(\005\022\014\n\004text"
    "\030\005 \001(\014\"K\n\017REQContinueGame\022\017\n\007user_id\030\001 \002"
    "(\005\022\025\n\renemy_user_id\030\002 \002(\005\022\020\n\010table_id\030\003 "
    "\002(\005\"3\n\017ACKContinueGame\022\014\n\004code\030\001 \002(\005\022\022\n\n"
    "result_msg\030\002 \002(\014\"N\n\022REQAskContinueGame\022\025"
    "\n\renemy_user_id\030\001 \002(\005\022\017\n\007user_id\030\002 \002(\005\022\020"
    "\n\010table_id\030\003 \002(\005\"n\n\022ACKAskContinueGame\022\036"
    "\n\026is_agree_continue_game\030\001 \002(\010\022\025\n\renemy_"
    "user_id\030\002 \002(\005\022\017\n\007user_id\030\003 \002(\005\022\020\n\010table_"
    "id\030\004 \002(\005\"9\n\025ACKRefuseContinueGame\022\014\n\004cod"
    "e\030\001 \002(\005\022\022\n\nresult_msg\030\002 \002(\014", 2187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameProtocol.proto", &protobuf_RegisterTypes);
  REQHold::default_instance_ = new REQHold();
  ACKHold::default_instance_ = new ACKHold();
  MsgPackage::default_instance_ = new MsgPackage();
  UserInfo::default_instance_ = new UserInfo();
  REQCreatGame::default_instance_ = new REQCreatGame();
  ACKCreatGame::default_instance_ = new ACKCreatGame();
  REQAction::default_instance_ = new REQAction();
  ACKAction::default_instance_ = new ACKAction();
  Position::default_instance_ = new Position();
  REQGameOver::default_instance_ = new REQGameOver();
  REQExitGame::default_instance_ = new REQExitGame();
  ACKExitGame::default_instance_ = new ACKExitGame();
  REQForcExit::default_instance_ = new REQForcExit();
  REQAskUndoChess::default_instance_ = new REQAskUndoChess();
  ACKAskUndoChess::default_instance_ = new ACKAskUndoChess();
  REQChat::default_instance_ = new REQChat();
  ACKChatText::default_instance_ = new ACKChatText();
  REQContinueGame::default_instance_ = new REQContinueGame();
  ACKContinueGame::default_instance_ = new ACKContinueGame();
  REQAskContinueGame::default_instance_ = new REQAskContinueGame();
  ACKAskContinueGame::default_instance_ = new ACKAskContinueGame();
  ACKRefuseContinueGame::default_instance_ = new ACKRefuseContinueGame();
  REQHold::default_instance_->InitAsDefaultInstance();
  ACKHold::default_instance_->InitAsDefaultInstance();
  MsgPackage::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  REQCreatGame::default_instance_->InitAsDefaultInstance();
  ACKCreatGame::default_instance_->InitAsDefaultInstance();
  REQAction::default_instance_->InitAsDefaultInstance();
  ACKAction::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  REQGameOver::default_instance_->InitAsDefaultInstance();
  REQExitGame::default_instance_->InitAsDefaultInstance();
  ACKExitGame::default_instance_->InitAsDefaultInstance();
  REQForcExit::default_instance_->InitAsDefaultInstance();
  REQAskUndoChess::default_instance_->InitAsDefaultInstance();
  ACKAskUndoChess::default_instance_->InitAsDefaultInstance();
  REQChat::default_instance_->InitAsDefaultInstance();
  ACKChatText::default_instance_->InitAsDefaultInstance();
  REQContinueGame::default_instance_->InitAsDefaultInstance();
  ACKContinueGame::default_instance_->InitAsDefaultInstance();
  REQAskContinueGame::default_instance_->InitAsDefaultInstance();
  ACKAskContinueGame::default_instance_->InitAsDefaultInstance();
  ACKRefuseContinueGame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameProtocol_2eproto {
  StaticDescriptorInitializer_gameProtocol_2eproto() {
    protobuf_AddDesc_gameProtocol_2eproto();
  }
} static_descriptor_initializer_gameProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

REQHold::REQHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQHold::InitAsDefaultInstance() {
}

REQHold::REQHold(const REQHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQHold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQHold::~REQHold() {
  SharedDtor();
}

void REQHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQHold_descriptor_;
}

const REQHold& REQHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQHold* REQHold::default_instance_ = NULL;

REQHold* REQHold::New() const {
  return new REQHold;
}

void REQHold::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void REQHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQHold::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQHold::MergeFrom(const REQHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQHold::CopyFrom(const REQHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQHold::IsInitialized() const {

  return true;
}

void REQHold::Swap(REQHold* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQHold_descriptor_;
  metadata.reflection = REQHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKHold::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKHold::ACKHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKHold::InitAsDefaultInstance() {
}

ACKHold::ACKHold(const ACKHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKHold::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKHold::~ACKHold() {
  SharedDtor();
}

void ACKHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKHold_descriptor_;
}

const ACKHold& ACKHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

ACKHold* ACKHold::default_instance_ = NULL;

ACKHold* ACKHold::New() const {
  return new ACKHold;
}

void ACKHold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKHold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result_id = 1;
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKHold::MergeFrom(const ACKHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKHold::CopyFrom(const ACKHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKHold::IsInitialized() const {

  return true;
}

void ACKHold::Swap(ACKHold* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKHold_descriptor_;
  metadata.reflection = ACKHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPackage::kMsgIdFieldNumber;
const int MsgPackage::kSeqIdFieldNumber;
const int MsgPackage::kUserIdFieldNumber;
const int MsgPackage::kMsgFieldNumber;
const int MsgPackage::kSrcFieldNumber;
const int MsgPackage::kClientidFieldNumber;
#endif  // !_MSC_VER

MsgPackage::MsgPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPackage::InitAsDefaultInstance() {
}

MsgPackage::MsgPackage(const MsgPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPackage::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_LONGLONG(0);
  seq_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPackage::~MsgPackage() {
  SharedDtor();
}

void MsgPackage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void MsgPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPackage_descriptor_;
}

const MsgPackage& MsgPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

MsgPackage* MsgPackage::default_instance_ = NULL;

MsgPackage* MsgPackage::New() const {
  return new MsgPackage;
}

void MsgPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_LONGLONG(0);
    seq_id_ = GOOGLE_LONGLONG(0);
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    clientid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq_id;
        break;
      }

      // optional int64 seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_src;
        break;
      }

      // optional bytes src = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clientid;
        break;
      }

      // optional int64 clientid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_id(), output);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->seq_id(), output);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_id(), output);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  // optional bytes src = 5;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->src(), output);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msg_id(), target);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->seq_id(), target);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_id(), target);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  // optional bytes src = 5;
  if (has_src()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->src(), target);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_id());
    }

    // optional int64 seq_id = 2;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_id());
    }

    // optional int64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional bytes src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src());
    }

    // optional int64 clientid = 6;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPackage::MergeFrom(const MsgPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPackage::CopyFrom(const MsgPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPackage::IsInitialized() const {

  return true;
}

void MsgPackage::Swap(MsgPackage* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(msg_, other->msg_);
    std::swap(src_, other->src_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPackage_descriptor_;
  metadata.reflection = MsgPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kIdFieldNumber;
const int UserInfo::kUsernameFieldNumber;
const int UserInfo::kWintimesFieldNumber;
const int UserInfo::kLosetimesFieldNumber;
const int UserInfo::kScoreFieldNumber;
const int UserInfo::kLevelFieldNumber;
const int UserInfo::kXpFieldNumber;
const int UserInfo::kHeadIdFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wintimes_ = 0;
  losetimes_ = 0;
  score_ = 0;
  level_ = 0;
  xp_ = 0;
  head_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    wintimes_ = 0;
    losetimes_ = 0;
    score_ = 0;
    level_ = 0;
    xp_ = 0;
    head_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wintimes;
        break;
      }

      // optional int32 wintimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintimes_)));
          set_has_wintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_losetimes;
        break;
      }

      // optional int32 losetimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losetimes_)));
          set_has_losetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_xp;
        break;
      }

      // optional int32 xp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_)));
          set_has_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_head_id;
        break;
      }

      // optional int32 head_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // optional int32 wintimes = 3;
  if (has_wintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wintimes(), output);
  }

  // optional int32 losetimes = 4;
  if (has_losetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->losetimes(), output);
  }

  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 xp = 7;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->xp(), output);
  }

  // optional int32 head_id = 8;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->head_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // optional int32 wintimes = 3;
  if (has_wintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wintimes(), target);
  }

  // optional int32 losetimes = 4;
  if (has_losetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->losetimes(), target);
  }

  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 xp = 7;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->xp(), target);
  }

  // optional int32 head_id = 8;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->head_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional int32 wintimes = 3;
    if (has_wintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintimes());
    }

    // optional int32 losetimes = 4;
    if (has_losetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losetimes());
    }

    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 xp = 7;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp());
    }

    // optional int32 head_id = 8;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_wintimes()) {
      set_wintimes(from.wintimes());
    }
    if (from.has_losetimes()) {
      set_losetimes(from.losetimes());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(wintimes_, other->wintimes_);
    std::swap(losetimes_, other->losetimes_);
    std::swap(score_, other->score_);
    std::swap(level_, other->level_);
    std::swap(xp_, other->xp_);
    std::swap(head_id_, other->head_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQCreatGame::kReqMsgFieldNumber;
const int REQCreatGame::kUserinfoPlayer1FieldNumber;
const int REQCreatGame::kPlayer1ClientidFieldNumber;
const int REQCreatGame::kUserinfoPlayer2FieldNumber;
const int REQCreatGame::kPlayer2ClientidFieldNumber;
const int REQCreatGame::kBlackIdFieldNumber;
const int REQCreatGame::kWhiteIdFieldNumber;
const int REQCreatGame::kBoardRowFieldNumber;
const int REQCreatGame::kBoardColFieldNumber;
#endif  // !_MSC_VER

REQCreatGame::REQCreatGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQCreatGame::InitAsDefaultInstance() {
  userinfo_player1_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
  userinfo_player2_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

REQCreatGame::REQCreatGame(const REQCreatGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQCreatGame::SharedCtor() {
  _cached_size_ = 0;
  req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userinfo_player1_ = NULL;
  player1_clientid_ = 0;
  userinfo_player2_ = NULL;
  player2_clientid_ = 0;
  black_id_ = 0;
  white_id_ = 0;
  board_row_ = 0;
  board_col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQCreatGame::~REQCreatGame() {
  SharedDtor();
}

void REQCreatGame::SharedDtor() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (this != default_instance_) {
    delete userinfo_player1_;
    delete userinfo_player2_;
  }
}

void REQCreatGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQCreatGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQCreatGame_descriptor_;
}

const REQCreatGame& REQCreatGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQCreatGame* REQCreatGame::default_instance_ = NULL;

REQCreatGame* REQCreatGame::New() const {
  return new REQCreatGame;
}

void REQCreatGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_msg()) {
      if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
        req_msg_->clear();
      }
    }
    if (has_userinfo_player1()) {
      if (userinfo_player1_ != NULL) userinfo_player1_->::UserInfo::Clear();
    }
    player1_clientid_ = 0;
    if (has_userinfo_player2()) {
      if (userinfo_player2_ != NULL) userinfo_player2_->::UserInfo::Clear();
    }
    player2_clientid_ = 0;
    black_id_ = 0;
    white_id_ = 0;
    board_row_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    board_col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQCreatGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes req_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo_player1;
        break;
      }

      // optional .UserInfo userinfo_player1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo_player1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo_player1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player1_clientid;
        break;
      }

      // optional int32 player1_clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player1_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player1_clientid_)));
          set_has_player1_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userinfo_player2;
        break;
      }

      // optional .UserInfo userinfo_player2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo_player2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo_player2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player2_clientid;
        break;
      }

      // optional int32 player2_clientid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player2_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player2_clientid_)));
          set_has_player2_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_black_id;
        break;
      }

      // optional int32 black_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_id_)));
          set_has_black_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_white_id;
        break;
      }

      // optional int32 white_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_id_)));
          set_has_white_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_board_row;
        break;
      }

      // optional int32 board_row = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_board_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_row_)));
          set_has_board_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_board_col;
        break;
      }

      // optional int32 board_col = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_board_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_col_)));
          set_has_board_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQCreatGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->req_msg(), output);
  }

  // optional .UserInfo userinfo_player1 = 2;
  if (has_userinfo_player1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo_player1(), output);
  }

  // optional int32 player1_clientid = 3;
  if (has_player1_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player1_clientid(), output);
  }

  // optional .UserInfo userinfo_player2 = 4;
  if (has_userinfo_player2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo_player2(), output);
  }

  // optional int32 player2_clientid = 5;
  if (has_player2_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player2_clientid(), output);
  }

  // optional int32 black_id = 6;
  if (has_black_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->black_id(), output);
  }

  // optional int32 white_id = 7;
  if (has_white_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->white_id(), output);
  }

  // optional int32 board_row = 8;
  if (has_board_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->board_row(), output);
  }

  // optional int32 board_col = 9;
  if (has_board_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->board_col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQCreatGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->req_msg(), target);
  }

  // optional .UserInfo userinfo_player1 = 2;
  if (has_userinfo_player1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo_player1(), target);
  }

  // optional int32 player1_clientid = 3;
  if (has_player1_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player1_clientid(), target);
  }

  // optional .UserInfo userinfo_player2 = 4;
  if (has_userinfo_player2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo_player2(), target);
  }

  // optional int32 player2_clientid = 5;
  if (has_player2_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player2_clientid(), target);
  }

  // optional int32 black_id = 6;
  if (has_black_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->black_id(), target);
  }

  // optional int32 white_id = 7;
  if (has_white_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->white_id(), target);
  }

  // optional int32 board_row = 8;
  if (has_board_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->board_row(), target);
  }

  // optional int32 board_col = 9;
  if (has_board_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->board_col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQCreatGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes req_msg = 1;
    if (has_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_msg());
    }

    // optional .UserInfo userinfo_player1 = 2;
    if (has_userinfo_player1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo_player1());
    }

    // optional int32 player1_clientid = 3;
    if (has_player1_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player1_clientid());
    }

    // optional .UserInfo userinfo_player2 = 4;
    if (has_userinfo_player2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo_player2());
    }

    // optional int32 player2_clientid = 5;
    if (has_player2_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player2_clientid());
    }

    // optional int32 black_id = 6;
    if (has_black_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_id());
    }

    // optional int32 white_id = 7;
    if (has_white_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_id());
    }

    // optional int32 board_row = 8;
    if (has_board_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_row());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 board_col = 9;
    if (has_board_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQCreatGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQCreatGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQCreatGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQCreatGame::MergeFrom(const REQCreatGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_msg()) {
      set_req_msg(from.req_msg());
    }
    if (from.has_userinfo_player1()) {
      mutable_userinfo_player1()->::UserInfo::MergeFrom(from.userinfo_player1());
    }
    if (from.has_player1_clientid()) {
      set_player1_clientid(from.player1_clientid());
    }
    if (from.has_userinfo_player2()) {
      mutable_userinfo_player2()->::UserInfo::MergeFrom(from.userinfo_player2());
    }
    if (from.has_player2_clientid()) {
      set_player2_clientid(from.player2_clientid());
    }
    if (from.has_black_id()) {
      set_black_id(from.black_id());
    }
    if (from.has_white_id()) {
      set_white_id(from.white_id());
    }
    if (from.has_board_row()) {
      set_board_row(from.board_row());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_board_col()) {
      set_board_col(from.board_col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQCreatGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQCreatGame::CopyFrom(const REQCreatGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQCreatGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQCreatGame::Swap(REQCreatGame* other) {
  if (other != this) {
    std::swap(req_msg_, other->req_msg_);
    std::swap(userinfo_player1_, other->userinfo_player1_);
    std::swap(player1_clientid_, other->player1_clientid_);
    std::swap(userinfo_player2_, other->userinfo_player2_);
    std::swap(player2_clientid_, other->player2_clientid_);
    std::swap(black_id_, other->black_id_);
    std::swap(white_id_, other->white_id_);
    std::swap(board_row_, other->board_row_);
    std::swap(board_col_, other->board_col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQCreatGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQCreatGame_descriptor_;
  metadata.reflection = REQCreatGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKCreatGame::kCodeFieldNumber;
const int ACKCreatGame::kResultMsgFieldNumber;
const int ACKCreatGame::kRoomIdFieldNumber;
const int ACKCreatGame::kBlackIdFieldNumber;
const int ACKCreatGame::kWhiteIdFieldNumber;
const int ACKCreatGame::kScoreFieldNumber;
const int ACKCreatGame::kCoinsFieldNumber;
#endif  // !_MSC_VER

ACKCreatGame::ACKCreatGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKCreatGame::InitAsDefaultInstance() {
}

ACKCreatGame::ACKCreatGame(const ACKCreatGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKCreatGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_id_ = 0;
  black_id_ = 0;
  white_id_ = 0;
  score_ = 0;
  coins_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKCreatGame::~ACKCreatGame() {
  SharedDtor();
}

void ACKCreatGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKCreatGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKCreatGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKCreatGame_descriptor_;
}

const ACKCreatGame& ACKCreatGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

ACKCreatGame* ACKCreatGame::default_instance_ = NULL;

ACKCreatGame* ACKCreatGame::New() const {
  return new ACKCreatGame;
}

void ACKCreatGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    room_id_ = 0;
    black_id_ = 0;
    white_id_ = 0;
    score_ = 0;
    coins_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKCreatGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_black_id;
        break;
      }

      // required int32 black_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_id_)));
          set_has_black_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_white_id;
        break;
      }

      // required int32 white_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_id_)));
          set_has_white_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // required int32 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_coins;
        break;
      }

      // required int32 coins = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKCreatGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->black_id(), output);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->white_id(), output);
  }

  // required int32 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // required int32 coins = 7;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->coins(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKCreatGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->black_id(), target);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->white_id(), target);
  }

  // required int32 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // required int32 coins = 7;
  if (has_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->coins(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKCreatGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // required int32 black_id = 4;
    if (has_black_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_id());
    }

    // required int32 white_id = 5;
    if (has_white_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_id());
    }

    // required int32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 coins = 7;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKCreatGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKCreatGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKCreatGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKCreatGame::MergeFrom(const ACKCreatGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_black_id()) {
      set_black_id(from.black_id());
    }
    if (from.has_white_id()) {
      set_white_id(from.white_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKCreatGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKCreatGame::CopyFrom(const ACKCreatGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKCreatGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ACKCreatGame::Swap(ACKCreatGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(room_id_, other->room_id_);
    std::swap(black_id_, other->black_id_);
    std::swap(white_id_, other->white_id_);
    std::swap(score_, other->score_);
    std::swap(coins_, other->coins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKCreatGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKCreatGame_descriptor_;
  metadata.reflection = ACKCreatGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQAction::kReqMsgFieldNumber;
const int REQAction::kTableIdFieldNumber;
const int REQAction::kActionIdFieldNumber;
const int REQAction::kActionBoardRowFieldNumber;
const int REQAction::kActionBoardColFieldNumber;
const int REQAction::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

REQAction::REQAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQAction::InitAsDefaultInstance() {
}

REQAction::REQAction(const REQAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQAction::SharedCtor() {
  _cached_size_ = 0;
  req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_id_ = 0;
  action_id_ = 0;
  action_board_row_ = 0;
  action_board_col_ = 0;
  remain_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQAction::~REQAction() {
  SharedDtor();
}

void REQAction::SharedDtor() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (this != default_instance_) {
  }
}

void REQAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQAction_descriptor_;
}

const REQAction& REQAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQAction* REQAction::default_instance_ = NULL;

REQAction* REQAction::New() const {
  return new REQAction;
}

void REQAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_msg()) {
      if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
        req_msg_->clear();
      }
    }
    table_id_ = 0;
    action_id_ = 0;
    action_board_row_ = 0;
    action_board_col_ = 0;
    remain_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes req_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_id;
        break;
      }

      // required int32 action_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_board_row;
        break;
      }

      // optional int32 action_board_row = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_board_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_board_row_)));
          set_has_action_board_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_action_board_col;
        break;
      }

      // optional int32 action_board_col = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_board_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_board_col_)));
          set_has_action_board_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->req_msg(), output);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  // required int32 action_id = 3;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_id(), output);
  }

  // optional int32 action_board_row = 4;
  if (has_action_board_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action_board_row(), output);
  }

  // optional int32 action_board_col = 5;
  if (has_action_board_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action_board_col(), output);
  }

  // optional int32 remain_time = 6;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->req_msg(), target);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  // required int32 action_id = 3;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_id(), target);
  }

  // optional int32 action_board_row = 4;
  if (has_action_board_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action_board_row(), target);
  }

  // optional int32 action_board_col = 5;
  if (has_action_board_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action_board_col(), target);
  }

  // optional int32 remain_time = 6;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes req_msg = 1;
    if (has_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_msg());
    }

    // required int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required int32 action_id = 3;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_id());
    }

    // optional int32 action_board_row = 4;
    if (has_action_board_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_board_row());
    }

    // optional int32 action_board_col = 5;
    if (has_action_board_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_board_col());
    }

    // optional int32 remain_time = 6;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQAction::MergeFrom(const REQAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_msg()) {
      set_req_msg(from.req_msg());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_action_board_row()) {
      set_action_board_row(from.action_board_row());
    }
    if (from.has_action_board_col()) {
      set_action_board_col(from.action_board_col());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQAction::CopyFrom(const REQAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQAction::Swap(REQAction* other) {
  if (other != this) {
    std::swap(req_msg_, other->req_msg_);
    std::swap(table_id_, other->table_id_);
    std::swap(action_id_, other->action_id_);
    std::swap(action_board_row_, other->action_board_row_);
    std::swap(action_board_col_, other->action_board_col_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQAction_descriptor_;
  metadata.reflection = REQAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKAction::kResultMsgFieldNumber;
const int ACKAction::kActionIdFieldNumber;
const int ACKAction::kActionBoardRowFieldNumber;
const int ACKAction::kActionBoardColFieldNumber;
const int ACKAction::kIsWinFieldNumber;
const int ACKAction::kWinIdFieldNumber;
const int ACKAction::kLoseIdFieldNumber;
const int ACKAction::kWinMsgFieldNumber;
#endif  // !_MSC_VER

ACKAction::ACKAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKAction::InitAsDefaultInstance() {
}

ACKAction::ACKAction(const ACKAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKAction::SharedCtor() {
  _cached_size_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_id_ = 0;
  action_board_row_ = 0;
  action_board_col_ = 0;
  is_win_ = false;
  win_id_ = 0;
  lose_id_ = 0;
  win_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKAction::~ACKAction() {
  SharedDtor();
}

void ACKAction::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (win_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete win_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKAction_descriptor_;
}

const ACKAction& ACKAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

ACKAction* ACKAction::default_instance_ = NULL;

ACKAction* ACKAction::New() const {
  return new ACKAction;
}

void ACKAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    action_id_ = 0;
    action_board_row_ = 0;
    action_board_col_ = 0;
    is_win_ = false;
    win_id_ = 0;
    lose_id_ = 0;
    if (has_win_msg()) {
      if (win_msg_ != &::google::protobuf::internal::kEmptyString) {
        win_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes result_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_id;
        break;
      }

      // required int32 action_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_board_row;
        break;
      }

      // optional int32 action_board_row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_board_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_board_row_)));
          set_has_action_board_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_board_col;
        break;
      }

      // optional int32 action_board_col = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_board_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_board_col_)));
          set_has_action_board_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_win;
        break;
      }

      // optional bool is_win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_id;
        break;
      }

      // optional int32 win_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_id_)));
          set_has_win_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lose_id;
        break;
      }

      // optional int32 lose_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_id_)));
          set_has_lose_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_win_msg;
        break;
      }

      // optional bytes win_msg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_win_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes result_msg = 1;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->result_msg(), output);
  }

  // required int32 action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_id(), output);
  }

  // optional int32 action_board_row = 3;
  if (has_action_board_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_board_row(), output);
  }

  // optional int32 action_board_col = 4;
  if (has_action_board_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action_board_col(), output);
  }

  // optional bool is_win = 5;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_win(), output);
  }

  // optional int32 win_id = 6;
  if (has_win_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win_id(), output);
  }

  // optional int32 lose_id = 7;
  if (has_lose_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lose_id(), output);
  }

  // optional bytes win_msg = 8;
  if (has_win_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->win_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result_msg = 1;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->result_msg(), target);
  }

  // required int32 action_id = 2;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_id(), target);
  }

  // optional int32 action_board_row = 3;
  if (has_action_board_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_board_row(), target);
  }

  // optional int32 action_board_col = 4;
  if (has_action_board_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action_board_col(), target);
  }

  // optional bool is_win = 5;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_win(), target);
  }

  // optional int32 win_id = 6;
  if (has_win_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win_id(), target);
  }

  // optional int32 lose_id = 7;
  if (has_lose_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lose_id(), target);
  }

  // optional bytes win_msg = 8;
  if (has_win_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->win_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result_msg = 1;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // required int32 action_id = 2;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_id());
    }

    // optional int32 action_board_row = 3;
    if (has_action_board_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_board_row());
    }

    // optional int32 action_board_col = 4;
    if (has_action_board_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_board_col());
    }

    // optional bool is_win = 5;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional int32 win_id = 6;
    if (has_win_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_id());
    }

    // optional int32 lose_id = 7;
    if (has_lose_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_id());
    }

    // optional bytes win_msg = 8;
    if (has_win_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->win_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKAction::MergeFrom(const ACKAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_action_board_row()) {
      set_action_board_row(from.action_board_row());
    }
    if (from.has_action_board_col()) {
      set_action_board_col(from.action_board_col());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_win_id()) {
      set_win_id(from.win_id());
    }
    if (from.has_lose_id()) {
      set_lose_id(from.lose_id());
    }
    if (from.has_win_msg()) {
      set_win_msg(from.win_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKAction::CopyFrom(const ACKAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKAction::Swap(ACKAction* other) {
  if (other != this) {
    std::swap(result_msg_, other->result_msg_);
    std::swap(action_id_, other->action_id_);
    std::swap(action_board_row_, other->action_board_row_);
    std::swap(action_board_col_, other->action_board_col_);
    std::swap(is_win_, other->is_win_);
    std::swap(win_id_, other->win_id_);
    std::swap(lose_id_, other->lose_id_);
    std::swap(win_msg_, other->win_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKAction_descriptor_;
  metadata.reflection = ACKAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kRowFieldNumber;
const int Position::kColFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 2;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQGameOver::kWinnerIdFieldNumber;
const int REQGameOver::kLoserIdFieldNumber;
const int REQGameOver::kScoreFieldNumber;
const int REQGameOver::kBlackIdFieldNumber;
const int REQGameOver::kWhiteIdFieldNumber;
const int REQGameOver::kIsNoWinnerFieldNumber;
const int REQGameOver::kIsForceExitFieldNumber;
const int REQGameOver::kBlackPositionsFieldNumber;
const int REQGameOver::kWhitePositionsFieldNumber;
const int REQGameOver::kConisFieldNumber;
#endif  // !_MSC_VER

REQGameOver::REQGameOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQGameOver::InitAsDefaultInstance() {
}

REQGameOver::REQGameOver(const REQGameOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQGameOver::SharedCtor() {
  _cached_size_ = 0;
  winner_id_ = 0;
  loser_id_ = 0;
  score_ = 0;
  black_id_ = 0;
  white_id_ = 0;
  is_no_winner_ = false;
  is_force_exit_ = false;
  conis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQGameOver::~REQGameOver() {
  SharedDtor();
}

void REQGameOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQGameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQGameOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQGameOver_descriptor_;
}

const REQGameOver& REQGameOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQGameOver* REQGameOver::default_instance_ = NULL;

REQGameOver* REQGameOver::New() const {
  return new REQGameOver;
}

void REQGameOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winner_id_ = 0;
    loser_id_ = 0;
    score_ = 0;
    black_id_ = 0;
    white_id_ = 0;
    is_no_winner_ = false;
    is_force_exit_ = false;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    conis_ = 0;
  }
  black_positions_.Clear();
  white_positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQGameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 winner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_id_)));
          set_has_winner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loser_id;
        break;
      }

      // optional int32 loser_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loser_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loser_id_)));
          set_has_loser_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_black_id;
        break;
      }

      // required int32 black_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_id_)));
          set_has_black_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_white_id;
        break;
      }

      // required int32 white_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_id_)));
          set_has_white_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_no_winner;
        break;
      }

      // required bool is_no_winner = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_no_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_no_winner_)));
          set_has_is_no_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_force_exit;
        break;
      }

      // required bool is_force_exit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_force_exit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_force_exit_)));
          set_has_is_force_exit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_black_positions;
        break;
      }

      // repeated .Position black_positions = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_black_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_black_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_black_positions;
        if (input->ExpectTag(74)) goto parse_white_positions;
        break;
      }

      // repeated .Position white_positions = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_white_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_white_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_white_positions;
        if (input->ExpectTag(80)) goto parse_conis;
        break;
      }

      // required int32 conis = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conis_)));
          set_has_conis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQGameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 winner_id = 1;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winner_id(), output);
  }

  // optional int32 loser_id = 2;
  if (has_loser_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->loser_id(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->black_id(), output);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->white_id(), output);
  }

  // required bool is_no_winner = 6;
  if (has_is_no_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_no_winner(), output);
  }

  // required bool is_force_exit = 7;
  if (has_is_force_exit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_force_exit(), output);
  }

  // repeated .Position black_positions = 8;
  for (int i = 0; i < this->black_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->black_positions(i), output);
  }

  // repeated .Position white_positions = 9;
  for (int i = 0; i < this->white_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->white_positions(i), output);
  }

  // required int32 conis = 10;
  if (has_conis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->conis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQGameOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 winner_id = 1;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winner_id(), target);
  }

  // optional int32 loser_id = 2;
  if (has_loser_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->loser_id(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->black_id(), target);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->white_id(), target);
  }

  // required bool is_no_winner = 6;
  if (has_is_no_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_no_winner(), target);
  }

  // required bool is_force_exit = 7;
  if (has_is_force_exit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_force_exit(), target);
  }

  // repeated .Position black_positions = 8;
  for (int i = 0; i < this->black_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->black_positions(i), target);
  }

  // repeated .Position white_positions = 9;
  for (int i = 0; i < this->white_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->white_positions(i), target);
  }

  // required int32 conis = 10;
  if (has_conis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->conis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQGameOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 winner_id = 1;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_id());
    }

    // optional int32 loser_id = 2;
    if (has_loser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loser_id());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 black_id = 4;
    if (has_black_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_id());
    }

    // required int32 white_id = 5;
    if (has_white_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_id());
    }

    // required bool is_no_winner = 6;
    if (has_is_no_winner()) {
      total_size += 1 + 1;
    }

    // required bool is_force_exit = 7;
    if (has_is_force_exit()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 conis = 10;
    if (has_conis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conis());
    }

  }
  // repeated .Position black_positions = 8;
  total_size += 1 * this->black_positions_size();
  for (int i = 0; i < this->black_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->black_positions(i));
  }

  // repeated .Position white_positions = 9;
  total_size += 1 * this->white_positions_size();
  for (int i = 0; i < this->white_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->white_positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQGameOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQGameOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQGameOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQGameOver::MergeFrom(const REQGameOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  black_positions_.MergeFrom(from.black_positions_);
  white_positions_.MergeFrom(from.white_positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner_id()) {
      set_winner_id(from.winner_id());
    }
    if (from.has_loser_id()) {
      set_loser_id(from.loser_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_black_id()) {
      set_black_id(from.black_id());
    }
    if (from.has_white_id()) {
      set_white_id(from.white_id());
    }
    if (from.has_is_no_winner()) {
      set_is_no_winner(from.is_no_winner());
    }
    if (from.has_is_force_exit()) {
      set_is_force_exit(from.is_force_exit());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_conis()) {
      set_conis(from.conis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQGameOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQGameOver::CopyFrom(const REQGameOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQGameOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000278) != 0x00000278) return false;

  for (int i = 0; i < black_positions_size(); i++) {
    if (!this->black_positions(i).IsInitialized()) return false;
  }
  for (int i = 0; i < white_positions_size(); i++) {
    if (!this->white_positions(i).IsInitialized()) return false;
  }
  return true;
}

void REQGameOver::Swap(REQGameOver* other) {
  if (other != this) {
    std::swap(winner_id_, other->winner_id_);
    std::swap(loser_id_, other->loser_id_);
    std::swap(score_, other->score_);
    std::swap(black_id_, other->black_id_);
    std::swap(white_id_, other->white_id_);
    std::swap(is_no_winner_, other->is_no_winner_);
    std::swap(is_force_exit_, other->is_force_exit_);
    black_positions_.Swap(&other->black_positions_);
    white_positions_.Swap(&other->white_positions_);
    std::swap(conis_, other->conis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQGameOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQGameOver_descriptor_;
  metadata.reflection = REQGameOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQExitGame::kReqMsgFieldNumber;
const int REQExitGame::kExitTableIdFieldNumber;
const int REQExitGame::kExitUserIdFieldNumber;
const int REQExitGame::kEnemyUserIdFieldNumber;
#endif  // !_MSC_VER

REQExitGame::REQExitGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQExitGame::InitAsDefaultInstance() {
}

REQExitGame::REQExitGame(const REQExitGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQExitGame::SharedCtor() {
  _cached_size_ = 0;
  req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exit_table_id_ = 0;
  exit_user_id_ = 0;
  enemy_user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQExitGame::~REQExitGame() {
  SharedDtor();
}

void REQExitGame::SharedDtor() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (this != default_instance_) {
  }
}

void REQExitGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQExitGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQExitGame_descriptor_;
}

const REQExitGame& REQExitGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQExitGame* REQExitGame::default_instance_ = NULL;

REQExitGame* REQExitGame::New() const {
  return new REQExitGame;
}

void REQExitGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_msg()) {
      if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
        req_msg_->clear();
      }
    }
    exit_table_id_ = 0;
    exit_user_id_ = 0;
    enemy_user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQExitGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes req_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exit_table_id;
        break;
      }

      // optional int32 exit_table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_table_id_)));
          set_has_exit_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exit_user_id;
        break;
      }

      // required int32 exit_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_user_id_)));
          set_has_exit_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enemy_user_id;
        break;
      }

      // required int32 enemy_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_user_id_)));
          set_has_enemy_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQExitGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->req_msg(), output);
  }

  // optional int32 exit_table_id = 2;
  if (has_exit_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exit_table_id(), output);
  }

  // required int32 exit_user_id = 3;
  if (has_exit_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exit_user_id(), output);
  }

  // required int32 enemy_user_id = 4;
  if (has_enemy_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enemy_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQExitGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->req_msg(), target);
  }

  // optional int32 exit_table_id = 2;
  if (has_exit_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exit_table_id(), target);
  }

  // required int32 exit_user_id = 3;
  if (has_exit_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exit_user_id(), target);
  }

  // required int32 enemy_user_id = 4;
  if (has_enemy_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enemy_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQExitGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes req_msg = 1;
    if (has_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_msg());
    }

    // optional int32 exit_table_id = 2;
    if (has_exit_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_table_id());
    }

    // required int32 exit_user_id = 3;
    if (has_exit_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_user_id());
    }

    // required int32 enemy_user_id = 4;
    if (has_enemy_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQExitGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQExitGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQExitGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQExitGame::MergeFrom(const REQExitGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_msg()) {
      set_req_msg(from.req_msg());
    }
    if (from.has_exit_table_id()) {
      set_exit_table_id(from.exit_table_id());
    }
    if (from.has_exit_user_id()) {
      set_exit_user_id(from.exit_user_id());
    }
    if (from.has_enemy_user_id()) {
      set_enemy_user_id(from.enemy_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQExitGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQExitGame::CopyFrom(const REQExitGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQExitGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void REQExitGame::Swap(REQExitGame* other) {
  if (other != this) {
    std::swap(req_msg_, other->req_msg_);
    std::swap(exit_table_id_, other->exit_table_id_);
    std::swap(exit_user_id_, other->exit_user_id_);
    std::swap(enemy_user_id_, other->enemy_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQExitGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQExitGame_descriptor_;
  metadata.reflection = REQExitGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKExitGame::kCodeFieldNumber;
const int ACKExitGame::kResultMsgFieldNumber;
const int ACKExitGame::kExitTableIdFieldNumber;
const int ACKExitGame::kExitUserIdFieldNumber;
#endif  // !_MSC_VER

ACKExitGame::ACKExitGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKExitGame::InitAsDefaultInstance() {
}

ACKExitGame::ACKExitGame(const ACKExitGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKExitGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exit_table_id_ = 0;
  exit_user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKExitGame::~ACKExitGame() {
  SharedDtor();
}

void ACKExitGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKExitGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKExitGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKExitGame_descriptor_;
}

const ACKExitGame& ACKExitGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

ACKExitGame* ACKExitGame::default_instance_ = NULL;

ACKExitGame* ACKExitGame::New() const {
  return new ACKExitGame;
}

void ACKExitGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    exit_table_id_ = 0;
    exit_user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKExitGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exit_table_id;
        break;
      }

      // optional int32 exit_table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_table_id_)));
          set_has_exit_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exit_user_id;
        break;
      }

      // optional int32 exit_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_user_id_)));
          set_has_exit_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKExitGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  // optional int32 exit_table_id = 3;
  if (has_exit_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exit_table_id(), output);
  }

  // optional int32 exit_user_id = 4;
  if (has_exit_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exit_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKExitGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  // optional int32 exit_table_id = 3;
  if (has_exit_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exit_table_id(), target);
  }

  // optional int32 exit_user_id = 4;
  if (has_exit_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exit_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKExitGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // optional int32 exit_table_id = 3;
    if (has_exit_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_table_id());
    }

    // optional int32 exit_user_id = 4;
    if (has_exit_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKExitGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKExitGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKExitGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKExitGame::MergeFrom(const ACKExitGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_exit_table_id()) {
      set_exit_table_id(from.exit_table_id());
    }
    if (from.has_exit_user_id()) {
      set_exit_user_id(from.exit_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKExitGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKExitGame::CopyFrom(const ACKExitGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKExitGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKExitGame::Swap(ACKExitGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(exit_table_id_, other->exit_table_id_);
    std::swap(exit_user_id_, other->exit_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKExitGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKExitGame_descriptor_;
  metadata.reflection = ACKExitGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQForcExit::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQForcExit::REQForcExit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQForcExit::InitAsDefaultInstance() {
}

REQForcExit::REQForcExit(const REQForcExit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQForcExit::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQForcExit::~REQForcExit() {
  SharedDtor();
}

void REQForcExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQForcExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQForcExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQForcExit_descriptor_;
}

const REQForcExit& REQForcExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQForcExit* REQForcExit::default_instance_ = NULL;

REQForcExit* REQForcExit::New() const {
  return new REQForcExit;
}

void REQForcExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQForcExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQForcExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQForcExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQForcExit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQForcExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQForcExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQForcExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQForcExit::MergeFrom(const REQForcExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQForcExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQForcExit::CopyFrom(const REQForcExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQForcExit::IsInitialized() const {

  return true;
}

void REQForcExit::Swap(REQForcExit* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQForcExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQForcExit_descriptor_;
  metadata.reflection = REQForcExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQAskUndoChess::kTableIdFieldNumber;
const int REQAskUndoChess::kActionIdFieldNumber;
#endif  // !_MSC_VER

REQAskUndoChess::REQAskUndoChess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQAskUndoChess::InitAsDefaultInstance() {
}

REQAskUndoChess::REQAskUndoChess(const REQAskUndoChess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQAskUndoChess::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0;
  action_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQAskUndoChess::~REQAskUndoChess() {
  SharedDtor();
}

void REQAskUndoChess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQAskUndoChess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQAskUndoChess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQAskUndoChess_descriptor_;
}

const REQAskUndoChess& REQAskUndoChess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQAskUndoChess* REQAskUndoChess::default_instance_ = NULL;

REQAskUndoChess* REQAskUndoChess::New() const {
  return new REQAskUndoChess;
}

void REQAskUndoChess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0;
    action_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQAskUndoChess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_id;
        break;
      }

      // required int32 action_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQAskUndoChess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_id(), output);
  }

  // required int32 action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQAskUndoChess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_id(), target);
  }

  // required int32 action_id = 2;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQAskUndoChess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required int32 action_id = 2;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQAskUndoChess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQAskUndoChess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQAskUndoChess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQAskUndoChess::MergeFrom(const REQAskUndoChess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQAskUndoChess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQAskUndoChess::CopyFrom(const REQAskUndoChess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQAskUndoChess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQAskUndoChess::Swap(REQAskUndoChess* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(action_id_, other->action_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQAskUndoChess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQAskUndoChess_descriptor_;
  metadata.reflection = REQAskUndoChess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKAskUndoChess::kIsAgreeUndoChessFieldNumber;
const int ACKAskUndoChess::kTableIdFieldNumber;
const int ACKAskUndoChess::kActionIdFieldNumber;
#endif  // !_MSC_VER

ACKAskUndoChess::ACKAskUndoChess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKAskUndoChess::InitAsDefaultInstance() {
}

ACKAskUndoChess::ACKAskUndoChess(const ACKAskUndoChess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKAskUndoChess::SharedCtor() {
  _cached_size_ = 0;
  is_agree_undo_chess_ = false;
  table_id_ = 0;
  action_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKAskUndoChess::~ACKAskUndoChess() {
  SharedDtor();
}

void ACKAskUndoChess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKAskUndoChess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKAskUndoChess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKAskUndoChess_descriptor_;
}

const ACKAskUndoChess& ACKAskUndoChess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

ACKAskUndoChess* ACKAskUndoChess::default_instance_ = NULL;

ACKAskUndoChess* ACKAskUndoChess::New() const {
  return new ACKAskUndoChess;
}

void ACKAskUndoChess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_agree_undo_chess_ = false;
    table_id_ = 0;
    action_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKAskUndoChess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_agree_undo_chess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_undo_chess_)));
          set_has_is_agree_undo_chess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_id;
        break;
      }

      // required int32 action_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKAskUndoChess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_agree_undo_chess = 1;
  if (has_is_agree_undo_chess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_agree_undo_chess(), output);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  // required int32 action_id = 3;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKAskUndoChess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_agree_undo_chess = 1;
  if (has_is_agree_undo_chess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_agree_undo_chess(), target);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  // required int32 action_id = 3;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKAskUndoChess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_agree_undo_chess = 1;
    if (has_is_agree_undo_chess()) {
      total_size += 1 + 1;
    }

    // required int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required int32 action_id = 3;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKAskUndoChess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKAskUndoChess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKAskUndoChess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKAskUndoChess::MergeFrom(const ACKAskUndoChess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_agree_undo_chess()) {
      set_is_agree_undo_chess(from.is_agree_undo_chess());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKAskUndoChess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKAskUndoChess::CopyFrom(const ACKAskUndoChess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKAskUndoChess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ACKAskUndoChess::Swap(ACKAskUndoChess* other) {
  if (other != this) {
    std::swap(is_agree_undo_chess_, other->is_agree_undo_chess_);
    std::swap(table_id_, other->table_id_);
    std::swap(action_id_, other->action_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKAskUndoChess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKAskUndoChess_descriptor_;
  metadata.reflection = ACKAskUndoChess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQChat::kUserIdFieldNumber;
const int REQChat::kTableIdFieldNumber;
const int REQChat::kOppIdFieldNumber;
const int REQChat::kTextFieldNumber;
#endif  // !_MSC_VER

REQChat::REQChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQChat::InitAsDefaultInstance() {
}

REQChat::REQChat(const REQChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQChat::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  table_id_ = 0;
  opp_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQChat::~REQChat() {
  SharedDtor();
}

void REQChat::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void REQChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQChat_descriptor_;
}

const REQChat& REQChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQChat* REQChat::default_instance_ = NULL;

REQChat* REQChat::New() const {
  return new REQChat;
}

void REQChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    table_id_ = 0;
    opp_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opp_id;
        break;
      }

      // required int32 opp_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opp_id_)));
          set_has_opp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional bytes text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  // required int32 opp_id = 3;
  if (has_opp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opp_id(), output);
  }

  // optional bytes text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  // required int32 opp_id = 3;
  if (has_opp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opp_id(), target);
  }

  // optional bytes text = 4;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required int32 opp_id = 3;
    if (has_opp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opp_id());
    }

    // optional bytes text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQChat::MergeFrom(const REQChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_opp_id()) {
      set_opp_id(from.opp_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQChat::CopyFrom(const REQChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQChat::Swap(REQChat* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(opp_id_, other->opp_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQChat_descriptor_;
  metadata.reflection = REQChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKChatText::kIsSensitiveFieldNumber;
const int ACKChatText::kUserIdFieldNumber;
const int ACKChatText::kTableIdFieldNumber;
const int ACKChatText::kOppIdFieldNumber;
const int ACKChatText::kTextFieldNumber;
#endif  // !_MSC_VER

ACKChatText::ACKChatText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKChatText::InitAsDefaultInstance() {
}

ACKChatText::ACKChatText(const ACKChatText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKChatText::SharedCtor() {
  _cached_size_ = 0;
  is_sensitive_ = 0;
  user_id_ = 0;
  table_id_ = 0;
  opp_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKChatText::~ACKChatText() {
  SharedDtor();
}

void ACKChatText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ACKChatText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKChatText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKChatText_descriptor_;
}

const ACKChatText& ACKChatText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

ACKChatText* ACKChatText::default_instance_ = NULL;

ACKChatText* ACKChatText::New() const {
  return new ACKChatText;
}

void ACKChatText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_sensitive_ = 0;
    user_id_ = 0;
    table_id_ = 0;
    opp_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKChatText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 is_sensitive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_sensitive_)));
          set_has_is_sensitive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opp_id;
        break;
      }

      // required int32 opp_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opp_id_)));
          set_has_opp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKChatText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 is_sensitive = 1;
  if (has_is_sensitive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_sensitive(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->table_id(), output);
  }

  // required int32 opp_id = 4;
  if (has_opp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opp_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKChatText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 is_sensitive = 1;
  if (has_is_sensitive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_sensitive(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->table_id(), target);
  }

  // required int32 opp_id = 4;
  if (has_opp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opp_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKChatText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 is_sensitive = 1;
    if (has_is_sensitive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_sensitive());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required int32 opp_id = 4;
    if (has_opp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opp_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKChatText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKChatText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKChatText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKChatText::MergeFrom(const ACKChatText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_sensitive()) {
      set_is_sensitive(from.is_sensitive());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_opp_id()) {
      set_opp_id(from.opp_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKChatText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKChatText::CopyFrom(const ACKChatText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKChatText::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ACKChatText::Swap(ACKChatText* other) {
  if (other != this) {
    std::swap(is_sensitive_, other->is_sensitive_);
    std::swap(user_id_, other->user_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(opp_id_, other->opp_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKChatText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKChatText_descriptor_;
  metadata.reflection = ACKChatText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQContinueGame::kUserIdFieldNumber;
const int REQContinueGame::kEnemyUserIdFieldNumber;
const int REQContinueGame::kTableIdFieldNumber;
#endif  // !_MSC_VER

REQContinueGame::REQContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQContinueGame::InitAsDefaultInstance() {
}

REQContinueGame::REQContinueGame(const REQContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQContinueGame::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  enemy_user_id_ = 0;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQContinueGame::~REQContinueGame() {
  SharedDtor();
}

void REQContinueGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQContinueGame_descriptor_;
}

const REQContinueGame& REQContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQContinueGame* REQContinueGame::default_instance_ = NULL;

REQContinueGame* REQContinueGame::New() const {
  return new REQContinueGame;
}

void REQContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    enemy_user_id_ = 0;
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enemy_user_id;
        break;
      }

      // required int32 enemy_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_user_id_)));
          set_has_enemy_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 enemy_user_id = 2;
  if (has_enemy_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enemy_user_id(), output);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // required int32 enemy_user_id = 2;
  if (has_enemy_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enemy_user_id(), target);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 enemy_user_id = 2;
    if (has_enemy_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_user_id());
    }

    // required int32 table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQContinueGame::MergeFrom(const REQContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_enemy_user_id()) {
      set_enemy_user_id(from.enemy_user_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQContinueGame::CopyFrom(const REQContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQContinueGame::Swap(REQContinueGame* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(enemy_user_id_, other->enemy_user_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQContinueGame_descriptor_;
  metadata.reflection = REQContinueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKContinueGame::kCodeFieldNumber;
const int ACKContinueGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKContinueGame::ACKContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKContinueGame::InitAsDefaultInstance() {
}

ACKContinueGame::ACKContinueGame(const ACKContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKContinueGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKContinueGame::~ACKContinueGame() {
  SharedDtor();
}

void ACKContinueGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKContinueGame_descriptor_;
}

const ACKContinueGame& ACKContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

ACKContinueGame* ACKContinueGame::default_instance_ = NULL;

ACKContinueGame* ACKContinueGame::New() const {
  return new ACKContinueGame;
}

void ACKContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKContinueGame::MergeFrom(const ACKContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKContinueGame::CopyFrom(const ACKContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKContinueGame::Swap(ACKContinueGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKContinueGame_descriptor_;
  metadata.reflection = ACKContinueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQAskContinueGame::kEnemyUserIdFieldNumber;
const int REQAskContinueGame::kUserIdFieldNumber;
const int REQAskContinueGame::kTableIdFieldNumber;
#endif  // !_MSC_VER

REQAskContinueGame::REQAskContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQAskContinueGame::InitAsDefaultInstance() {
}

REQAskContinueGame::REQAskContinueGame(const REQAskContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQAskContinueGame::SharedCtor() {
  _cached_size_ = 0;
  enemy_user_id_ = 0;
  user_id_ = 0;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQAskContinueGame::~REQAskContinueGame() {
  SharedDtor();
}

void REQAskContinueGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQAskContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQAskContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQAskContinueGame_descriptor_;
}

const REQAskContinueGame& REQAskContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

REQAskContinueGame* REQAskContinueGame::default_instance_ = NULL;

REQAskContinueGame* REQAskContinueGame::New() const {
  return new REQAskContinueGame;
}

void REQAskContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enemy_user_id_ = 0;
    user_id_ = 0;
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQAskContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 enemy_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_user_id_)));
          set_has_enemy_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQAskContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 enemy_user_id = 1;
  if (has_enemy_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enemy_user_id(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQAskContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 enemy_user_id = 1;
  if (has_enemy_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enemy_user_id(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQAskContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 enemy_user_id = 1;
    if (has_enemy_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_user_id());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQAskContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQAskContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQAskContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQAskContinueGame::MergeFrom(const REQAskContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemy_user_id()) {
      set_enemy_user_id(from.enemy_user_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQAskContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQAskContinueGame::CopyFrom(const REQAskContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQAskContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQAskContinueGame::Swap(REQAskContinueGame* other) {
  if (other != this) {
    std::swap(enemy_user_id_, other->enemy_user_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQAskContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQAskContinueGame_descriptor_;
  metadata.reflection = REQAskContinueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKAskContinueGame::kIsAgreeContinueGameFieldNumber;
const int ACKAskContinueGame::kEnemyUserIdFieldNumber;
const int ACKAskContinueGame::kUserIdFieldNumber;
const int ACKAskContinueGame::kTableIdFieldNumber;
#endif  // !_MSC_VER

ACKAskContinueGame::ACKAskContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKAskContinueGame::InitAsDefaultInstance() {
}

ACKAskContinueGame::ACKAskContinueGame(const ACKAskContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKAskContinueGame::SharedCtor() {
  _cached_size_ = 0;
  is_agree_continue_game_ = false;
  enemy_user_id_ = 0;
  user_id_ = 0;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKAskContinueGame::~ACKAskContinueGame() {
  SharedDtor();
}

void ACKAskContinueGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKAskContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKAskContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKAskContinueGame_descriptor_;
}

const ACKAskContinueGame& ACKAskContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

ACKAskContinueGame* ACKAskContinueGame::default_instance_ = NULL;

ACKAskContinueGame* ACKAskContinueGame::New() const {
  return new ACKAskContinueGame;
}

void ACKAskContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_agree_continue_game_ = false;
    enemy_user_id_ = 0;
    user_id_ = 0;
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKAskContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_agree_continue_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_continue_game_)));
          set_has_is_agree_continue_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enemy_user_id;
        break;
      }

      // required int32 enemy_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_user_id_)));
          set_has_enemy_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKAskContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_agree_continue_game = 1;
  if (has_is_agree_continue_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_agree_continue_game(), output);
  }

  // required int32 enemy_user_id = 2;
  if (has_enemy_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enemy_user_id(), output);
  }

  // required int32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKAskContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_agree_continue_game = 1;
  if (has_is_agree_continue_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_agree_continue_game(), target);
  }

  // required int32 enemy_user_id = 2;
  if (has_enemy_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enemy_user_id(), target);
  }

  // required int32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKAskContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_agree_continue_game = 1;
    if (has_is_agree_continue_game()) {
      total_size += 1 + 1;
    }

    // required int32 enemy_user_id = 2;
    if (has_enemy_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_user_id());
    }

    // required int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 table_id = 4;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKAskContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKAskContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKAskContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKAskContinueGame::MergeFrom(const ACKAskContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_agree_continue_game()) {
      set_is_agree_continue_game(from.is_agree_continue_game());
    }
    if (from.has_enemy_user_id()) {
      set_enemy_user_id(from.enemy_user_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKAskContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKAskContinueGame::CopyFrom(const ACKAskContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKAskContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ACKAskContinueGame::Swap(ACKAskContinueGame* other) {
  if (other != this) {
    std::swap(is_agree_continue_game_, other->is_agree_continue_game_);
    std::swap(enemy_user_id_, other->enemy_user_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKAskContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKAskContinueGame_descriptor_;
  metadata.reflection = ACKAskContinueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRefuseContinueGame::kCodeFieldNumber;
const int ACKRefuseContinueGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKRefuseContinueGame::ACKRefuseContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRefuseContinueGame::InitAsDefaultInstance() {
}

ACKRefuseContinueGame::ACKRefuseContinueGame(const ACKRefuseContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRefuseContinueGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRefuseContinueGame::~ACKRefuseContinueGame() {
  SharedDtor();
}

void ACKRefuseContinueGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKRefuseContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRefuseContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRefuseContinueGame_descriptor_;
}

const ACKRefuseContinueGame& ACKRefuseContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameProtocol_2eproto();
  return *default_instance_;
}

ACKRefuseContinueGame* ACKRefuseContinueGame::default_instance_ = NULL;

ACKRefuseContinueGame* ACKRefuseContinueGame::New() const {
  return new ACKRefuseContinueGame;
}

void ACKRefuseContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRefuseContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRefuseContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRefuseContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRefuseContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRefuseContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRefuseContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRefuseContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRefuseContinueGame::MergeFrom(const ACKRefuseContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRefuseContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRefuseContinueGame::CopyFrom(const ACKRefuseContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRefuseContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKRefuseContinueGame::Swap(ACKRefuseContinueGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRefuseContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRefuseContinueGame_descriptor_;
  metadata.reflection = ACKRefuseContinueGame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
