// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wzqProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wzqProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* REQHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_Prop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_Prop_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQEditHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQEditHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKEditHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKEditHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQForcExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQForcExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQExitAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQExitAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQRequestFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQRequestFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKUpdateFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKUpdateFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQContinueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKContinueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQAskContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQAskContinueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKAskContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKAskContinueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRefuseContinueGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRefuseContinueGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQExitGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQExitGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKExitGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKExitGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQInviteFriendGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKInviteFriendGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQAskInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQAskInviteFriendGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKAskInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKAskInviteFriendGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRefuseInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRefuseInviteFriendGame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wzqProtocol_2eproto() {
  protobuf_AddDesc_wzqProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wzqProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  REQHold_descriptor_ = file->message_type(0);
  static const int REQHold_offsets_[1] = {
  };
  REQHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQHold_descriptor_,
      REQHold::default_instance_,
      REQHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQHold));
  ACKHold_descriptor_ = file->message_type(1);
  static const int ACKHold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, result_id_),
  };
  ACKHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKHold_descriptor_,
      ACKHold::default_instance_,
      ACKHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKHold));
  MsgPackage_descriptor_ = file->message_type(2);
  static const int MsgPackage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, clientid_),
  };
  MsgPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPackage_descriptor_,
      MsgPackage::default_instance_,
      MsgPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPackage));
  REQRegister_descriptor_ = file->message_type(3);
  static const int REQRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, passwd_),
  };
  REQRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQRegister_descriptor_,
      REQRegister::default_instance_,
      REQRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQRegister));
  ACKRegister_descriptor_ = file->message_type(4);
  static const int ACKRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, result_),
  };
  ACKRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRegister_descriptor_,
      ACKRegister::default_instance_,
      ACKRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRegister));
  REQLogin_descriptor_ = file->message_type(5);
  static const int REQLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLogin, passwd_),
  };
  REQLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQLogin_descriptor_,
      REQLogin::default_instance_,
      REQLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQLogin));
  ACKLogin_descriptor_ = file->message_type(6);
  static const int ACKLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLogin, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLogin, userinfo_),
  };
  ACKLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKLogin_descriptor_,
      ACKLogin::default_instance_,
      ACKLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKLogin));
  UserInfo_descriptor_ = file->message_type(7);
  static const int UserInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, wintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, losetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, props_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  UserInfo_Prop_descriptor_ = UserInfo_descriptor_->nested_type(0);
  static const int UserInfo_Prop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Prop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Prop, quantity_),
  };
  UserInfo_Prop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_Prop_descriptor_,
      UserInfo_Prop::default_instance_,
      UserInfo_Prop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Prop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Prop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo_Prop));
  REQRoom_descriptor_ = file->message_type(8);
  static const int REQRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRoom, req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRoom, userinfo_),
  };
  REQRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQRoom_descriptor_,
      REQRoom::default_instance_,
      REQRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQRoom));
  ACKRoom_descriptor_ = file->message_type(9);
  static const int ACKRoom_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, black_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, white_id_),
  };
  ACKRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRoom_descriptor_,
      ACKRoom::default_instance_,
      ACKRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRoom));
  REQEditHead_descriptor_ = file->message_type(10);
  static const int REQEditHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditHead, head_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditHead, user_name_),
  };
  REQEditHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQEditHead_descriptor_,
      REQEditHead::default_instance_,
      REQEditHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQEditHead));
  ACKEditHead_descriptor_ = file->message_type(11);
  static const int ACKEditHead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditHead, code_),
  };
  ACKEditHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKEditHead_descriptor_,
      ACKEditHead::default_instance_,
      ACKEditHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKEditHead));
  REQForcExit_descriptor_ = file->message_type(12);
  static const int REQForcExit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQForcExit, user_id_),
  };
  REQForcExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQForcExit_descriptor_,
      REQForcExit::default_instance_,
      REQForcExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQForcExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQForcExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQForcExit));
  REQExitAccount_descriptor_ = file->message_type(13);
  static const int REQExitAccount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitAccount, user_id_),
  };
  REQExitAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQExitAccount_descriptor_,
      REQExitAccount::default_instance_,
      REQExitAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQExitAccount));
  REQRequestFriend_descriptor_ = file->message_type(14);
  static const int REQRequestFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRequestFriend, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRequestFriend, user_id_),
  };
  REQRequestFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQRequestFriend_descriptor_,
      REQRequestFriend::default_instance_,
      REQRequestFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRequestFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRequestFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQRequestFriend));
  ACKUpdateFriend_descriptor_ = file->message_type(15);
  static const int ACKUpdateFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUpdateFriend, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUpdateFriend, firendinfo_),
  };
  ACKUpdateFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKUpdateFriend_descriptor_,
      ACKUpdateFriend::default_instance_,
      ACKUpdateFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUpdateFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUpdateFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKUpdateFriend));
  REQContinueGame_descriptor_ = file->message_type(16);
  static const int REQContinueGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, enemy_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, table_id_),
  };
  REQContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQContinueGame_descriptor_,
      REQContinueGame::default_instance_,
      REQContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQContinueGame));
  ACKContinueGame_descriptor_ = file->message_type(17);
  static const int ACKContinueGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKContinueGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKContinueGame, result_msg_),
  };
  ACKContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKContinueGame_descriptor_,
      ACKContinueGame::default_instance_,
      ACKContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKContinueGame));
  REQAskContinueGame_descriptor_ = file->message_type(18);
  static const int REQAskContinueGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, enemy_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, table_id_),
  };
  REQAskContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQAskContinueGame_descriptor_,
      REQAskContinueGame::default_instance_,
      REQAskContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQAskContinueGame));
  ACKAskContinueGame_descriptor_ = file->message_type(19);
  static const int ACKAskContinueGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, is_agree_continue_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, enemy_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, table_id_),
  };
  ACKAskContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKAskContinueGame_descriptor_,
      ACKAskContinueGame::default_instance_,
      ACKAskContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKAskContinueGame));
  ACKRefuseContinueGame_descriptor_ = file->message_type(20);
  static const int ACKRefuseContinueGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseContinueGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseContinueGame, result_msg_),
  };
  ACKRefuseContinueGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRefuseContinueGame_descriptor_,
      ACKRefuseContinueGame::default_instance_,
      ACKRefuseContinueGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseContinueGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseContinueGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRefuseContinueGame));
  ACKFriendsList_descriptor_ = file->message_type(21);
  static const int ACKFriendsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKFriendsList, firendinfo_),
  };
  ACKFriendsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKFriendsList_descriptor_,
      ACKFriendsList::default_instance_,
      ACKFriendsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKFriendsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKFriendsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKFriendsList));
  REQExitGame_descriptor_ = file->message_type(22);
  static const int REQExitGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, exit_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, exit_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, enemy_user_id_),
  };
  REQExitGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQExitGame_descriptor_,
      REQExitGame::default_instance_,
      REQExitGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQExitGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQExitGame));
  ACKExitGame_descriptor_ = file->message_type(23);
  static const int ACKExitGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, exit_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, exit_user_id_),
  };
  ACKExitGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKExitGame_descriptor_,
      ACKExitGame::default_instance_,
      ACKExitGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKExitGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKExitGame));
  REQInviteFriendGame_descriptor_ = file->message_type(24);
  static const int REQInviteFriendGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQInviteFriendGame, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQInviteFriendGame, friend_id_),
  };
  REQInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQInviteFriendGame_descriptor_,
      REQInviteFriendGame::default_instance_,
      REQInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQInviteFriendGame));
  ACKInviteFriendGame_descriptor_ = file->message_type(25);
  static const int ACKInviteFriendGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKInviteFriendGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKInviteFriendGame, result_msg_),
  };
  ACKInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKInviteFriendGame_descriptor_,
      ACKInviteFriendGame::default_instance_,
      ACKInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKInviteFriendGame));
  REQAskInviteFriendGame_descriptor_ = file->message_type(26);
  static const int REQAskInviteFriendGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskInviteFriendGame, friend_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskInviteFriendGame, user_id_),
  };
  REQAskInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQAskInviteFriendGame_descriptor_,
      REQAskInviteFriendGame::default_instance_,
      REQAskInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQAskInviteFriendGame));
  ACKAskInviteFriendGame_descriptor_ = file->message_type(27);
  static const int ACKAskInviteFriendGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, is_agree_invite_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, result_msg_),
  };
  ACKAskInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKAskInviteFriendGame_descriptor_,
      ACKAskInviteFriendGame::default_instance_,
      ACKAskInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKAskInviteFriendGame));
  ACKRefuseInviteFriendGame_descriptor_ = file->message_type(28);
  static const int ACKRefuseInviteFriendGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseInviteFriendGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseInviteFriendGame, result_msg_),
  };
  ACKRefuseInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRefuseInviteFriendGame_descriptor_,
      ACKRefuseInviteFriendGame::default_instance_,
      ACKRefuseInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRefuseInviteFriendGame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wzqProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQHold_descriptor_, &REQHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKHold_descriptor_, &ACKHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPackage_descriptor_, &MsgPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQRegister_descriptor_, &REQRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRegister_descriptor_, &ACKRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQLogin_descriptor_, &REQLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKLogin_descriptor_, &ACKLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_Prop_descriptor_, &UserInfo_Prop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQRoom_descriptor_, &REQRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRoom_descriptor_, &ACKRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQEditHead_descriptor_, &REQEditHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKEditHead_descriptor_, &ACKEditHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQForcExit_descriptor_, &REQForcExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQExitAccount_descriptor_, &REQExitAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQRequestFriend_descriptor_, &REQRequestFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKUpdateFriend_descriptor_, &ACKUpdateFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQContinueGame_descriptor_, &REQContinueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKContinueGame_descriptor_, &ACKContinueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQAskContinueGame_descriptor_, &REQAskContinueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKAskContinueGame_descriptor_, &ACKAskContinueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRefuseContinueGame_descriptor_, &ACKRefuseContinueGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKFriendsList_descriptor_, &ACKFriendsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQExitGame_descriptor_, &REQExitGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKExitGame_descriptor_, &ACKExitGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQInviteFriendGame_descriptor_, &REQInviteFriendGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKInviteFriendGame_descriptor_, &ACKInviteFriendGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQAskInviteFriendGame_descriptor_, &REQAskInviteFriendGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKAskInviteFriendGame_descriptor_, &ACKAskInviteFriendGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRefuseInviteFriendGame_descriptor_, &ACKRefuseInviteFriendGame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wzqProtocol_2eproto() {
  delete REQHold::default_instance_;
  delete REQHold_reflection_;
  delete ACKHold::default_instance_;
  delete ACKHold_reflection_;
  delete MsgPackage::default_instance_;
  delete MsgPackage_reflection_;
  delete REQRegister::default_instance_;
  delete REQRegister_reflection_;
  delete ACKRegister::default_instance_;
  delete ACKRegister_reflection_;
  delete REQLogin::default_instance_;
  delete REQLogin_reflection_;
  delete ACKLogin::default_instance_;
  delete ACKLogin_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete UserInfo_Prop::default_instance_;
  delete UserInfo_Prop_reflection_;
  delete REQRoom::default_instance_;
  delete REQRoom_reflection_;
  delete ACKRoom::default_instance_;
  delete ACKRoom_reflection_;
  delete REQEditHead::default_instance_;
  delete REQEditHead_reflection_;
  delete ACKEditHead::default_instance_;
  delete ACKEditHead_reflection_;
  delete REQForcExit::default_instance_;
  delete REQForcExit_reflection_;
  delete REQExitAccount::default_instance_;
  delete REQExitAccount_reflection_;
  delete REQRequestFriend::default_instance_;
  delete REQRequestFriend_reflection_;
  delete ACKUpdateFriend::default_instance_;
  delete ACKUpdateFriend_reflection_;
  delete REQContinueGame::default_instance_;
  delete REQContinueGame_reflection_;
  delete ACKContinueGame::default_instance_;
  delete ACKContinueGame_reflection_;
  delete REQAskContinueGame::default_instance_;
  delete REQAskContinueGame_reflection_;
  delete ACKAskContinueGame::default_instance_;
  delete ACKAskContinueGame_reflection_;
  delete ACKRefuseContinueGame::default_instance_;
  delete ACKRefuseContinueGame_reflection_;
  delete ACKFriendsList::default_instance_;
  delete ACKFriendsList_reflection_;
  delete REQExitGame::default_instance_;
  delete REQExitGame_reflection_;
  delete ACKExitGame::default_instance_;
  delete ACKExitGame_reflection_;
  delete REQInviteFriendGame::default_instance_;
  delete REQInviteFriendGame_reflection_;
  delete ACKInviteFriendGame::default_instance_;
  delete ACKInviteFriendGame_reflection_;
  delete REQAskInviteFriendGame::default_instance_;
  delete REQAskInviteFriendGame_reflection_;
  delete ACKAskInviteFriendGame::default_instance_;
  delete ACKAskInviteFriendGame_reflection_;
  delete ACKRefuseInviteFriendGame::default_instance_;
  delete ACKRefuseInviteFriendGame_reflection_;
}

void protobuf_AddDesc_wzqProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021wzqProtocol.proto\"\t\n\007REQHold\"\034\n\007ACKHol"
    "d\022\021\n\tresult_id\030\001 \001(\005\"i\n\nMsgPackage\022\016\n\006ms"
    "g_id\030\001 \001(\003\022\016\n\006seq_id\030\002 \001(\003\022\017\n\007user_id\030\003 "
    "\001(\003\022\013\n\003msg\030\004 \001(\014\022\013\n\003src\030\005 \001(\014\022\020\n\010clienti"
    "d\030\006 \001(\003\".\n\013REQRegister\022\017\n\007account\030\001 \001(\014\022"
    "\016\n\006passwd\030\002 \001(\014\"+\n\013ACKRegister\022\014\n\004code\030\001"
    " \001(\005\022\016\n\006result\030\002 \001(\014\"+\n\010REQLogin\022\017\n\007acco"
    "unt\030\001 \001(\014\022\016\n\006passwd\030\002 \001(\014\"5\n\010ACKLogin\022\014\n"
    "\004code\030\001 \001(\005\022\033\n\010userinfo\030\002 \001(\0132\t.UserInfo"
    "\"\357\001\n\010UserInfo\022\n\n\002id\030\001 \001(\005\022\020\n\010username\030\002 "
    "\001(\014\022\020\n\010wintimes\030\003 \001(\005\022\021\n\tlosetimes\030\004 \001(\005"
    "\022\r\n\005score\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\n\n\002xp\030\007 \001"
    "(\005\022\017\n\007head_id\030\010 \001(\005\022\021\n\tis_online\030\t \001(\010\022\r"
    "\n\005coins\030\n \001(\005\022\035\n\005props\030\013 \003(\0132\016.UserInfo."
    "Prop\032$\n\004Prop\022\n\n\002id\030\001 \001(\005\022\020\n\010quantity\030\002 \001"
    "(\005\"7\n\007REQRoom\022\017\n\007req_msg\030\001 \001(\014\022\033\n\010userin"
    "fo\030\002 \002(\0132\t.UserInfo\"l\n\007ACKRoom\022\014\n\004code\030\001"
    " \001(\005\022\022\n\nresult_msg\030\002 \001(\014\022\033\n\010userinfo\030\003 \002"
    "(\0132\t.UserInfo\022\020\n\010black_id\030\004 \002(\005\022\020\n\010white"
    "_id\030\005 \002(\005\"2\n\013REQEditHead\022\020\n\010head_num\030\001 \001"
    "(\005\022\021\n\tuser_name\030\002 \001(\014\"\033\n\013ACKEditHead\022\014\n\004"
    "code\030\001 \001(\005\"\036\n\013REQForcExit\022\017\n\007user_id\030\001 \001"
    "(\005\"!\n\016REQExitAccount\022\017\n\007user_id\030\001 \002(\005\"0\n"
    "\020REQRequestFriend\022\013\n\003num\030\001 \002(\005\022\017\n\007user_i"
    "d\030\002 \002(\005\"A\n\017ACKUpdateFriend\022\017\n\007user_id\030\001 "
    "\002(\005\022\035\n\nfirendinfo\030\002 \002(\0132\t.UserInfo\"K\n\017RE"
    "QContinueGame\022\017\n\007user_id\030\001 \002(\005\022\025\n\renemy_"
    "user_id\030\002 \002(\005\022\020\n\010table_id\030\003 \002(\005\"3\n\017ACKCo"
    "ntinueGame\022\014\n\004code\030\001 \002(\005\022\022\n\nresult_msg\030\002"
    " \002(\014\"N\n\022REQAskContinueGame\022\025\n\renemy_user"
    "_id\030\001 \002(\005\022\017\n\007user_id\030\002 \002(\005\022\020\n\010table_id\030\003"
    " \002(\005\"n\n\022ACKAskContinueGame\022\036\n\026is_agree_c"
    "ontinue_game\030\001 \002(\010\022\025\n\renemy_user_id\030\002 \002("
    "\005\022\017\n\007user_id\030\003 \002(\005\022\020\n\010table_id\030\004 \002(\005\"9\n\025"
    "ACKRefuseContinueGame\022\014\n\004code\030\001 \002(\005\022\022\n\nr"
    "esult_msg\030\002 \002(\014\"/\n\016ACKFriendsList\022\035\n\nfir"
    "endinfo\030\001 \003(\0132\t.UserInfo\"b\n\013REQExitGame\022"
    "\017\n\007req_msg\030\001 \002(\014\022\025\n\rexit_table_id\030\002 \001(\005\022"
    "\024\n\014exit_user_id\030\003 \002(\005\022\025\n\renemy_user_id\030\004"
    " \002(\005\"\\\n\013ACKExitGame\022\014\n\004code\030\001 \002(\005\022\022\n\nres"
    "ult_msg\030\002 \002(\014\022\025\n\rexit_table_id\030\003 \001(\005\022\024\n\014"
    "exit_user_id\030\004 \001(\005\"E\n\023REQInviteFriendGam"
    "e\022\033\n\010userinfo\030\001 \001(\0132\t.UserInfo\022\021\n\tfriend"
    "_id\030\002 \002(\005\"7\n\023ACKInviteFriendGame\022\014\n\004code"
    "\030\001 \002(\005\022\022\n\nresult_msg\030\002 \002(\014\"I\n\026REQAskInvi"
    "teFriendGame\022\036\n\013friend_info\030\001 \001(\0132\t.User"
    "Info\022\017\n\007user_id\030\002 \002(\005\"z\n\026ACKAskInviteFri"
    "endGame\022\034\n\024is_agree_invite_game\030\001 \002(\010\022\033\n"
    "\010userinfo\030\002 \001(\0132\t.UserInfo\022\021\n\tfriend_id\030"
    "\003 \002(\005\022\022\n\nresult_msg\030\004 \001(\014\"=\n\031ACKRefuseIn"
    "viteFriendGame\022\014\n\004code\030\001 \002(\005\022\022\n\nresult_m"
    "sg\030\002 \002(\014", 2048);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wzqProtocol.proto", &protobuf_RegisterTypes);
  REQHold::default_instance_ = new REQHold();
  ACKHold::default_instance_ = new ACKHold();
  MsgPackage::default_instance_ = new MsgPackage();
  REQRegister::default_instance_ = new REQRegister();
  ACKRegister::default_instance_ = new ACKRegister();
  REQLogin::default_instance_ = new REQLogin();
  ACKLogin::default_instance_ = new ACKLogin();
  UserInfo::default_instance_ = new UserInfo();
  UserInfo_Prop::default_instance_ = new UserInfo_Prop();
  REQRoom::default_instance_ = new REQRoom();
  ACKRoom::default_instance_ = new ACKRoom();
  REQEditHead::default_instance_ = new REQEditHead();
  ACKEditHead::default_instance_ = new ACKEditHead();
  REQForcExit::default_instance_ = new REQForcExit();
  REQExitAccount::default_instance_ = new REQExitAccount();
  REQRequestFriend::default_instance_ = new REQRequestFriend();
  ACKUpdateFriend::default_instance_ = new ACKUpdateFriend();
  REQContinueGame::default_instance_ = new REQContinueGame();
  ACKContinueGame::default_instance_ = new ACKContinueGame();
  REQAskContinueGame::default_instance_ = new REQAskContinueGame();
  ACKAskContinueGame::default_instance_ = new ACKAskContinueGame();
  ACKRefuseContinueGame::default_instance_ = new ACKRefuseContinueGame();
  ACKFriendsList::default_instance_ = new ACKFriendsList();
  REQExitGame::default_instance_ = new REQExitGame();
  ACKExitGame::default_instance_ = new ACKExitGame();
  REQInviteFriendGame::default_instance_ = new REQInviteFriendGame();
  ACKInviteFriendGame::default_instance_ = new ACKInviteFriendGame();
  REQAskInviteFriendGame::default_instance_ = new REQAskInviteFriendGame();
  ACKAskInviteFriendGame::default_instance_ = new ACKAskInviteFriendGame();
  ACKRefuseInviteFriendGame::default_instance_ = new ACKRefuseInviteFriendGame();
  REQHold::default_instance_->InitAsDefaultInstance();
  ACKHold::default_instance_->InitAsDefaultInstance();
  MsgPackage::default_instance_->InitAsDefaultInstance();
  REQRegister::default_instance_->InitAsDefaultInstance();
  ACKRegister::default_instance_->InitAsDefaultInstance();
  REQLogin::default_instance_->InitAsDefaultInstance();
  ACKLogin::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserInfo_Prop::default_instance_->InitAsDefaultInstance();
  REQRoom::default_instance_->InitAsDefaultInstance();
  ACKRoom::default_instance_->InitAsDefaultInstance();
  REQEditHead::default_instance_->InitAsDefaultInstance();
  ACKEditHead::default_instance_->InitAsDefaultInstance();
  REQForcExit::default_instance_->InitAsDefaultInstance();
  REQExitAccount::default_instance_->InitAsDefaultInstance();
  REQRequestFriend::default_instance_->InitAsDefaultInstance();
  ACKUpdateFriend::default_instance_->InitAsDefaultInstance();
  REQContinueGame::default_instance_->InitAsDefaultInstance();
  ACKContinueGame::default_instance_->InitAsDefaultInstance();
  REQAskContinueGame::default_instance_->InitAsDefaultInstance();
  ACKAskContinueGame::default_instance_->InitAsDefaultInstance();
  ACKRefuseContinueGame::default_instance_->InitAsDefaultInstance();
  ACKFriendsList::default_instance_->InitAsDefaultInstance();
  REQExitGame::default_instance_->InitAsDefaultInstance();
  ACKExitGame::default_instance_->InitAsDefaultInstance();
  REQInviteFriendGame::default_instance_->InitAsDefaultInstance();
  ACKInviteFriendGame::default_instance_->InitAsDefaultInstance();
  REQAskInviteFriendGame::default_instance_->InitAsDefaultInstance();
  ACKAskInviteFriendGame::default_instance_->InitAsDefaultInstance();
  ACKRefuseInviteFriendGame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wzqProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wzqProtocol_2eproto {
  StaticDescriptorInitializer_wzqProtocol_2eproto() {
    protobuf_AddDesc_wzqProtocol_2eproto();
  }
} static_descriptor_initializer_wzqProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

REQHold::REQHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQHold::InitAsDefaultInstance() {
}

REQHold::REQHold(const REQHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQHold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQHold::~REQHold() {
  SharedDtor();
}

void REQHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQHold_descriptor_;
}

const REQHold& REQHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQHold* REQHold::default_instance_ = NULL;

REQHold* REQHold::New() const {
  return new REQHold;
}

void REQHold::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void REQHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQHold::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQHold::MergeFrom(const REQHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQHold::CopyFrom(const REQHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQHold::IsInitialized() const {

  return true;
}

void REQHold::Swap(REQHold* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQHold_descriptor_;
  metadata.reflection = REQHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKHold::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKHold::ACKHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKHold::InitAsDefaultInstance() {
}

ACKHold::ACKHold(const ACKHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKHold::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKHold::~ACKHold() {
  SharedDtor();
}

void ACKHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKHold_descriptor_;
}

const ACKHold& ACKHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKHold* ACKHold::default_instance_ = NULL;

ACKHold* ACKHold::New() const {
  return new ACKHold;
}

void ACKHold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKHold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result_id = 1;
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKHold::MergeFrom(const ACKHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKHold::CopyFrom(const ACKHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKHold::IsInitialized() const {

  return true;
}

void ACKHold::Swap(ACKHold* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKHold_descriptor_;
  metadata.reflection = ACKHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPackage::kMsgIdFieldNumber;
const int MsgPackage::kSeqIdFieldNumber;
const int MsgPackage::kUserIdFieldNumber;
const int MsgPackage::kMsgFieldNumber;
const int MsgPackage::kSrcFieldNumber;
const int MsgPackage::kClientidFieldNumber;
#endif  // !_MSC_VER

MsgPackage::MsgPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPackage::InitAsDefaultInstance() {
}

MsgPackage::MsgPackage(const MsgPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPackage::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_LONGLONG(0);
  seq_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPackage::~MsgPackage() {
  SharedDtor();
}

void MsgPackage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void MsgPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPackage_descriptor_;
}

const MsgPackage& MsgPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

MsgPackage* MsgPackage::default_instance_ = NULL;

MsgPackage* MsgPackage::New() const {
  return new MsgPackage;
}

void MsgPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_LONGLONG(0);
    seq_id_ = GOOGLE_LONGLONG(0);
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    clientid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq_id;
        break;
      }

      // optional int64 seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_src;
        break;
      }

      // optional bytes src = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clientid;
        break;
      }

      // optional int64 clientid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_id(), output);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->seq_id(), output);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_id(), output);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  // optional bytes src = 5;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->src(), output);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msg_id(), target);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->seq_id(), target);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_id(), target);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  // optional bytes src = 5;
  if (has_src()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->src(), target);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_id());
    }

    // optional int64 seq_id = 2;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_id());
    }

    // optional int64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional bytes src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src());
    }

    // optional int64 clientid = 6;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPackage::MergeFrom(const MsgPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPackage::CopyFrom(const MsgPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPackage::IsInitialized() const {

  return true;
}

void MsgPackage::Swap(MsgPackage* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(msg_, other->msg_);
    std::swap(src_, other->src_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPackage_descriptor_;
  metadata.reflection = MsgPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQRegister::kAccountFieldNumber;
const int REQRegister::kPasswdFieldNumber;
#endif  // !_MSC_VER

REQRegister::REQRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQRegister::InitAsDefaultInstance() {
}

REQRegister::REQRegister(const REQRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQRegister::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQRegister::~REQRegister() {
  SharedDtor();
}

void REQRegister::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void REQRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQRegister_descriptor_;
}

const REQRegister& REQRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQRegister* REQRegister::default_instance_ = NULL;

REQRegister* REQRegister::New() const {
  return new REQRegister;
}

void REQRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional bytes passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQRegister::MergeFrom(const REQRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQRegister::CopyFrom(const REQRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQRegister::IsInitialized() const {

  return true;
}

void REQRegister::Swap(REQRegister* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQRegister_descriptor_;
  metadata.reflection = REQRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRegister::kCodeFieldNumber;
const int ACKRegister::kResultFieldNumber;
#endif  // !_MSC_VER

ACKRegister::ACKRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRegister::InitAsDefaultInstance() {
}

ACKRegister::ACKRegister(const ACKRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRegister::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRegister::~ACKRegister() {
  SharedDtor();
}

void ACKRegister::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void ACKRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRegister_descriptor_;
}

const ACKRegister& ACKRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKRegister* ACKRegister::default_instance_ = NULL;

ACKRegister* ACKRegister::New() const {
  return new ACKRegister;
}

void ACKRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional bytes result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional bytes result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional bytes result = 2;
  if (has_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional bytes result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRegister::MergeFrom(const ACKRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRegister::CopyFrom(const ACKRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRegister::IsInitialized() const {

  return true;
}

void ACKRegister::Swap(ACKRegister* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRegister_descriptor_;
  metadata.reflection = ACKRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQLogin::kAccountFieldNumber;
const int REQLogin::kPasswdFieldNumber;
#endif  // !_MSC_VER

REQLogin::REQLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQLogin::InitAsDefaultInstance() {
}

REQLogin::REQLogin(const REQLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQLogin::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQLogin::~REQLogin() {
  SharedDtor();
}

void REQLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void REQLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQLogin_descriptor_;
}

const REQLogin& REQLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQLogin* REQLogin::default_instance_ = NULL;

REQLogin* REQLogin::New() const {
  return new REQLogin;
}

void REQLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional bytes passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQLogin::MergeFrom(const REQLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQLogin::CopyFrom(const REQLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQLogin::IsInitialized() const {

  return true;
}

void REQLogin::Swap(REQLogin* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQLogin_descriptor_;
  metadata.reflection = REQLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKLogin::kCodeFieldNumber;
const int ACKLogin::kUserinfoFieldNumber;
#endif  // !_MSC_VER

ACKLogin::ACKLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKLogin::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKLogin::ACKLogin(const ACKLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKLogin::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKLogin::~ACKLogin() {
  SharedDtor();
}

void ACKLogin::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void ACKLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKLogin_descriptor_;
}

const ACKLogin& ACKLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKLogin* ACKLogin::default_instance_ = NULL;

ACKLogin* ACKLogin::New() const {
  return new ACKLogin;
}

void ACKLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // optional .UserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional .UserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKLogin::MergeFrom(const ACKLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKLogin::CopyFrom(const ACKLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKLogin::IsInitialized() const {

  return true;
}

void ACKLogin::Swap(ACKLogin* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKLogin_descriptor_;
  metadata.reflection = ACKLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo_Prop::kIdFieldNumber;
const int UserInfo_Prop::kQuantityFieldNumber;
#endif  // !_MSC_VER

UserInfo_Prop::UserInfo_Prop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo_Prop::InitAsDefaultInstance() {
}

UserInfo_Prop::UserInfo_Prop(const UserInfo_Prop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo_Prop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo_Prop::~UserInfo_Prop() {
  SharedDtor();
}

void UserInfo_Prop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserInfo_Prop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo_Prop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_Prop_descriptor_;
}

const UserInfo_Prop& UserInfo_Prop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

UserInfo_Prop* UserInfo_Prop::default_instance_ = NULL;

UserInfo_Prop* UserInfo_Prop::New() const {
  return new UserInfo_Prop;
}

void UserInfo_Prop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo_Prop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }

      // optional int32 quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo_Prop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo_Prop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo_Prop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo_Prop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo_Prop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo_Prop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo_Prop::MergeFrom(const UserInfo_Prop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo_Prop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo_Prop::CopyFrom(const UserInfo_Prop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo_Prop::IsInitialized() const {

  return true;
}

void UserInfo_Prop::Swap(UserInfo_Prop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo_Prop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_Prop_descriptor_;
  metadata.reflection = UserInfo_Prop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserInfo::kIdFieldNumber;
const int UserInfo::kUsernameFieldNumber;
const int UserInfo::kWintimesFieldNumber;
const int UserInfo::kLosetimesFieldNumber;
const int UserInfo::kScoreFieldNumber;
const int UserInfo::kLevelFieldNumber;
const int UserInfo::kXpFieldNumber;
const int UserInfo::kHeadIdFieldNumber;
const int UserInfo::kIsOnlineFieldNumber;
const int UserInfo::kCoinsFieldNumber;
const int UserInfo::kPropsFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wintimes_ = 0;
  losetimes_ = 0;
  score_ = 0;
  level_ = 0;
  xp_ = 0;
  head_id_ = 0;
  is_online_ = false;
  coins_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    wintimes_ = 0;
    losetimes_ = 0;
    score_ = 0;
    level_ = 0;
    xp_ = 0;
    head_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_online_ = false;
    coins_ = 0;
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wintimes;
        break;
      }

      // optional int32 wintimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintimes_)));
          set_has_wintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_losetimes;
        break;
      }

      // optional int32 losetimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losetimes_)));
          set_has_losetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_xp;
        break;
      }

      // optional int32 xp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_)));
          set_has_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_head_id;
        break;
      }

      // optional int32 head_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coins;
        break;
      }

      // optional int32 coins = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_props;
        break;
      }

      // repeated .UserInfo.Prop props = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_props;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // optional int32 wintimes = 3;
  if (has_wintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wintimes(), output);
  }

  // optional int32 losetimes = 4;
  if (has_losetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->losetimes(), output);
  }

  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 xp = 7;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->xp(), output);
  }

  // optional int32 head_id = 8;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->head_id(), output);
  }

  // optional bool is_online = 9;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_online(), output);
  }

  // optional int32 coins = 10;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->coins(), output);
  }

  // repeated .UserInfo.Prop props = 11;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->props(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // optional int32 wintimes = 3;
  if (has_wintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wintimes(), target);
  }

  // optional int32 losetimes = 4;
  if (has_losetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->losetimes(), target);
  }

  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 xp = 7;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->xp(), target);
  }

  // optional int32 head_id = 8;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->head_id(), target);
  }

  // optional bool is_online = 9;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_online(), target);
  }

  // optional int32 coins = 10;
  if (has_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->coins(), target);
  }

  // repeated .UserInfo.Prop props = 11;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->props(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional int32 wintimes = 3;
    if (has_wintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintimes());
    }

    // optional int32 losetimes = 4;
    if (has_losetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losetimes());
    }

    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 xp = 7;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp());
    }

    // optional int32 head_id = 8;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_online = 9;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

    // optional int32 coins = 10;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

  }
  // repeated .UserInfo.Prop props = 11;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_wintimes()) {
      set_wintimes(from.wintimes());
    }
    if (from.has_losetimes()) {
      set_losetimes(from.losetimes());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(wintimes_, other->wintimes_);
    std::swap(losetimes_, other->losetimes_);
    std::swap(score_, other->score_);
    std::swap(level_, other->level_);
    std::swap(xp_, other->xp_);
    std::swap(head_id_, other->head_id_);
    std::swap(is_online_, other->is_online_);
    std::swap(coins_, other->coins_);
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQRoom::kReqMsgFieldNumber;
const int REQRoom::kUserinfoFieldNumber;
#endif  // !_MSC_VER

REQRoom::REQRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQRoom::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

REQRoom::REQRoom(const REQRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQRoom::SharedCtor() {
  _cached_size_ = 0;
  req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQRoom::~REQRoom() {
  SharedDtor();
}

void REQRoom::SharedDtor() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void REQRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQRoom_descriptor_;
}

const REQRoom& REQRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQRoom* REQRoom::default_instance_ = NULL;

REQRoom* REQRoom::New() const {
  return new REQRoom;
}

void REQRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_msg()) {
      if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
        req_msg_->clear();
      }
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes req_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // required .UserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes req_msg = 1;
  if (has_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->req_msg(), output);
  }

  // required .UserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes req_msg = 1;
  if (has_req_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->req_msg(), target);
  }

  // required .UserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes req_msg = 1;
    if (has_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_msg());
    }

    // required .UserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQRoom::MergeFrom(const REQRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_msg()) {
      set_req_msg(from.req_msg());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQRoom::CopyFrom(const REQRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void REQRoom::Swap(REQRoom* other) {
  if (other != this) {
    std::swap(req_msg_, other->req_msg_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQRoom_descriptor_;
  metadata.reflection = REQRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRoom::kCodeFieldNumber;
const int ACKRoom::kResultMsgFieldNumber;
const int ACKRoom::kUserinfoFieldNumber;
const int ACKRoom::kBlackIdFieldNumber;
const int ACKRoom::kWhiteIdFieldNumber;
#endif  // !_MSC_VER

ACKRoom::ACKRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRoom::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKRoom::ACKRoom(const ACKRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRoom::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userinfo_ = NULL;
  black_id_ = 0;
  white_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRoom::~ACKRoom() {
  SharedDtor();
}

void ACKRoom::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void ACKRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRoom_descriptor_;
}

const ACKRoom& ACKRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKRoom* ACKRoom::default_instance_ = NULL;

ACKRoom* ACKRoom::New() const {
  return new ACKRoom;
}

void ACKRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
    black_id_ = 0;
    white_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // optional bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userinfo;
        break;
      }

      // required .UserInfo userinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_black_id;
        break;
      }

      // required int32 black_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_id_)));
          set_has_black_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_white_id;
        break;
      }

      // required int32 white_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_id_)));
          set_has_white_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  // required .UserInfo userinfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->black_id(), output);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->white_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  // required .UserInfo userinfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->black_id(), target);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->white_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // required .UserInfo userinfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // required int32 black_id = 4;
    if (has_black_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_id());
    }

    // required int32 white_id = 5;
    if (has_white_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRoom::MergeFrom(const ACKRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_black_id()) {
      set_black_id(from.black_id());
    }
    if (from.has_white_id()) {
      set_white_id(from.white_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRoom::CopyFrom(const ACKRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void ACKRoom::Swap(ACKRoom* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(black_id_, other->black_id_);
    std::swap(white_id_, other->white_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRoom_descriptor_;
  metadata.reflection = ACKRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQEditHead::kHeadNumFieldNumber;
const int REQEditHead::kUserNameFieldNumber;
#endif  // !_MSC_VER

REQEditHead::REQEditHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQEditHead::InitAsDefaultInstance() {
}

REQEditHead::REQEditHead(const REQEditHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQEditHead::SharedCtor() {
  _cached_size_ = 0;
  head_num_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQEditHead::~REQEditHead() {
  SharedDtor();
}

void REQEditHead::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void REQEditHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQEditHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQEditHead_descriptor_;
}

const REQEditHead& REQEditHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQEditHead* REQEditHead::default_instance_ = NULL;

REQEditHead* REQEditHead::New() const {
  return new REQEditHead;
}

void REQEditHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    head_num_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQEditHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 head_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_num_)));
          set_has_head_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional bytes user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQEditHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 head_num = 1;
  if (has_head_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->head_num(), output);
  }

  // optional bytes user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQEditHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 head_num = 1;
  if (has_head_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->head_num(), target);
  }

  // optional bytes user_name = 2;
  if (has_user_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQEditHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 head_num = 1;
    if (has_head_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_num());
    }

    // optional bytes user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQEditHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQEditHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQEditHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQEditHead::MergeFrom(const REQEditHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head_num()) {
      set_head_num(from.head_num());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQEditHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQEditHead::CopyFrom(const REQEditHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQEditHead::IsInitialized() const {

  return true;
}

void REQEditHead::Swap(REQEditHead* other) {
  if (other != this) {
    std::swap(head_num_, other->head_num_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQEditHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQEditHead_descriptor_;
  metadata.reflection = REQEditHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKEditHead::kCodeFieldNumber;
#endif  // !_MSC_VER

ACKEditHead::ACKEditHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKEditHead::InitAsDefaultInstance() {
}

ACKEditHead::ACKEditHead(const ACKEditHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKEditHead::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKEditHead::~ACKEditHead() {
  SharedDtor();
}

void ACKEditHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKEditHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKEditHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKEditHead_descriptor_;
}

const ACKEditHead& ACKEditHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKEditHead* ACKEditHead::default_instance_ = NULL;

ACKEditHead* ACKEditHead::New() const {
  return new ACKEditHead;
}

void ACKEditHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKEditHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKEditHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKEditHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKEditHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKEditHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKEditHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKEditHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKEditHead::MergeFrom(const ACKEditHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKEditHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKEditHead::CopyFrom(const ACKEditHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKEditHead::IsInitialized() const {

  return true;
}

void ACKEditHead::Swap(ACKEditHead* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKEditHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKEditHead_descriptor_;
  metadata.reflection = ACKEditHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQForcExit::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQForcExit::REQForcExit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQForcExit::InitAsDefaultInstance() {
}

REQForcExit::REQForcExit(const REQForcExit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQForcExit::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQForcExit::~REQForcExit() {
  SharedDtor();
}

void REQForcExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQForcExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQForcExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQForcExit_descriptor_;
}

const REQForcExit& REQForcExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQForcExit* REQForcExit::default_instance_ = NULL;

REQForcExit* REQForcExit::New() const {
  return new REQForcExit;
}

void REQForcExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQForcExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQForcExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQForcExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQForcExit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQForcExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQForcExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQForcExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQForcExit::MergeFrom(const REQForcExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQForcExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQForcExit::CopyFrom(const REQForcExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQForcExit::IsInitialized() const {

  return true;
}

void REQForcExit::Swap(REQForcExit* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQForcExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQForcExit_descriptor_;
  metadata.reflection = REQForcExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQExitAccount::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQExitAccount::REQExitAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQExitAccount::InitAsDefaultInstance() {
}

REQExitAccount::REQExitAccount(const REQExitAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQExitAccount::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQExitAccount::~REQExitAccount() {
  SharedDtor();
}

void REQExitAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQExitAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQExitAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQExitAccount_descriptor_;
}

const REQExitAccount& REQExitAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQExitAccount* REQExitAccount::default_instance_ = NULL;

REQExitAccount* REQExitAccount::New() const {
  return new REQExitAccount;
}

void REQExitAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQExitAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQExitAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQExitAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQExitAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQExitAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQExitAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQExitAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQExitAccount::MergeFrom(const REQExitAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQExitAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQExitAccount::CopyFrom(const REQExitAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQExitAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQExitAccount::Swap(REQExitAccount* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQExitAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQExitAccount_descriptor_;
  metadata.reflection = REQExitAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQRequestFriend::kNumFieldNumber;
const int REQRequestFriend::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQRequestFriend::REQRequestFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQRequestFriend::InitAsDefaultInstance() {
}

REQRequestFriend::REQRequestFriend(const REQRequestFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQRequestFriend::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQRequestFriend::~REQRequestFriend() {
  SharedDtor();
}

void REQRequestFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQRequestFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQRequestFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQRequestFriend_descriptor_;
}

const REQRequestFriend& REQRequestFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQRequestFriend* REQRequestFriend::default_instance_ = NULL;

REQRequestFriend* REQRequestFriend::New() const {
  return new REQRequestFriend;
}

void REQRequestFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQRequestFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQRequestFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQRequestFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQRequestFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQRequestFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQRequestFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQRequestFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQRequestFriend::MergeFrom(const REQRequestFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQRequestFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQRequestFriend::CopyFrom(const REQRequestFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQRequestFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQRequestFriend::Swap(REQRequestFriend* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQRequestFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQRequestFriend_descriptor_;
  metadata.reflection = REQRequestFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKUpdateFriend::kUserIdFieldNumber;
const int ACKUpdateFriend::kFirendinfoFieldNumber;
#endif  // !_MSC_VER

ACKUpdateFriend::ACKUpdateFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKUpdateFriend::InitAsDefaultInstance() {
  firendinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKUpdateFriend::ACKUpdateFriend(const ACKUpdateFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKUpdateFriend::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  firendinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKUpdateFriend::~ACKUpdateFriend() {
  SharedDtor();
}

void ACKUpdateFriend::SharedDtor() {
  if (this != default_instance_) {
    delete firendinfo_;
  }
}

void ACKUpdateFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKUpdateFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKUpdateFriend_descriptor_;
}

const ACKUpdateFriend& ACKUpdateFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKUpdateFriend* ACKUpdateFriend::default_instance_ = NULL;

ACKUpdateFriend* ACKUpdateFriend::New() const {
  return new ACKUpdateFriend;
}

void ACKUpdateFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    if (has_firendinfo()) {
      if (firendinfo_ != NULL) firendinfo_->::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKUpdateFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_firendinfo;
        break;
      }

      // required .UserInfo firendinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firendinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKUpdateFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required .UserInfo firendinfo = 2;
  if (has_firendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->firendinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKUpdateFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // required .UserInfo firendinfo = 2;
  if (has_firendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->firendinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKUpdateFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required .UserInfo firendinfo = 2;
    if (has_firendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firendinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKUpdateFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKUpdateFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKUpdateFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKUpdateFriend::MergeFrom(const ACKUpdateFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_firendinfo()) {
      mutable_firendinfo()->::UserInfo::MergeFrom(from.firendinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKUpdateFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKUpdateFriend::CopyFrom(const ACKUpdateFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKUpdateFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKUpdateFriend::Swap(ACKUpdateFriend* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(firendinfo_, other->firendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKUpdateFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKUpdateFriend_descriptor_;
  metadata.reflection = ACKUpdateFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQContinueGame::kUserIdFieldNumber;
const int REQContinueGame::kEnemyUserIdFieldNumber;
const int REQContinueGame::kTableIdFieldNumber;
#endif  // !_MSC_VER

REQContinueGame::REQContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQContinueGame::InitAsDefaultInstance() {
}

REQContinueGame::REQContinueGame(const REQContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQContinueGame::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  enemy_user_id_ = 0;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQContinueGame::~REQContinueGame() {
  SharedDtor();
}

void REQContinueGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQContinueGame_descriptor_;
}

const REQContinueGame& REQContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQContinueGame* REQContinueGame::default_instance_ = NULL;

REQContinueGame* REQContinueGame::New() const {
  return new REQContinueGame;
}

void REQContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    enemy_user_id_ = 0;
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enemy_user_id;
        break;
      }

      // required int32 enemy_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_user_id_)));
          set_has_enemy_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 enemy_user_id = 2;
  if (has_enemy_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enemy_user_id(), output);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // required int32 enemy_user_id = 2;
  if (has_enemy_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enemy_user_id(), target);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 enemy_user_id = 2;
    if (has_enemy_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_user_id());
    }

    // required int32 table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQContinueGame::MergeFrom(const REQContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_enemy_user_id()) {
      set_enemy_user_id(from.enemy_user_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQContinueGame::CopyFrom(const REQContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQContinueGame::Swap(REQContinueGame* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(enemy_user_id_, other->enemy_user_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQContinueGame_descriptor_;
  metadata.reflection = REQContinueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKContinueGame::kCodeFieldNumber;
const int ACKContinueGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKContinueGame::ACKContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKContinueGame::InitAsDefaultInstance() {
}

ACKContinueGame::ACKContinueGame(const ACKContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKContinueGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKContinueGame::~ACKContinueGame() {
  SharedDtor();
}

void ACKContinueGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKContinueGame_descriptor_;
}

const ACKContinueGame& ACKContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKContinueGame* ACKContinueGame::default_instance_ = NULL;

ACKContinueGame* ACKContinueGame::New() const {
  return new ACKContinueGame;
}

void ACKContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKContinueGame::MergeFrom(const ACKContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKContinueGame::CopyFrom(const ACKContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKContinueGame::Swap(ACKContinueGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKContinueGame_descriptor_;
  metadata.reflection = ACKContinueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQAskContinueGame::kEnemyUserIdFieldNumber;
const int REQAskContinueGame::kUserIdFieldNumber;
const int REQAskContinueGame::kTableIdFieldNumber;
#endif  // !_MSC_VER

REQAskContinueGame::REQAskContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQAskContinueGame::InitAsDefaultInstance() {
}

REQAskContinueGame::REQAskContinueGame(const REQAskContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQAskContinueGame::SharedCtor() {
  _cached_size_ = 0;
  enemy_user_id_ = 0;
  user_id_ = 0;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQAskContinueGame::~REQAskContinueGame() {
  SharedDtor();
}

void REQAskContinueGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQAskContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQAskContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQAskContinueGame_descriptor_;
}

const REQAskContinueGame& REQAskContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQAskContinueGame* REQAskContinueGame::default_instance_ = NULL;

REQAskContinueGame* REQAskContinueGame::New() const {
  return new REQAskContinueGame;
}

void REQAskContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enemy_user_id_ = 0;
    user_id_ = 0;
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQAskContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 enemy_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_user_id_)));
          set_has_enemy_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQAskContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 enemy_user_id = 1;
  if (has_enemy_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enemy_user_id(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQAskContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 enemy_user_id = 1;
  if (has_enemy_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enemy_user_id(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // required int32 table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQAskContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 enemy_user_id = 1;
    if (has_enemy_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_user_id());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQAskContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQAskContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQAskContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQAskContinueGame::MergeFrom(const REQAskContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemy_user_id()) {
      set_enemy_user_id(from.enemy_user_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQAskContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQAskContinueGame::CopyFrom(const REQAskContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQAskContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQAskContinueGame::Swap(REQAskContinueGame* other) {
  if (other != this) {
    std::swap(enemy_user_id_, other->enemy_user_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQAskContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQAskContinueGame_descriptor_;
  metadata.reflection = REQAskContinueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKAskContinueGame::kIsAgreeContinueGameFieldNumber;
const int ACKAskContinueGame::kEnemyUserIdFieldNumber;
const int ACKAskContinueGame::kUserIdFieldNumber;
const int ACKAskContinueGame::kTableIdFieldNumber;
#endif  // !_MSC_VER

ACKAskContinueGame::ACKAskContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKAskContinueGame::InitAsDefaultInstance() {
}

ACKAskContinueGame::ACKAskContinueGame(const ACKAskContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKAskContinueGame::SharedCtor() {
  _cached_size_ = 0;
  is_agree_continue_game_ = false;
  enemy_user_id_ = 0;
  user_id_ = 0;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKAskContinueGame::~ACKAskContinueGame() {
  SharedDtor();
}

void ACKAskContinueGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKAskContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKAskContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKAskContinueGame_descriptor_;
}

const ACKAskContinueGame& ACKAskContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKAskContinueGame* ACKAskContinueGame::default_instance_ = NULL;

ACKAskContinueGame* ACKAskContinueGame::New() const {
  return new ACKAskContinueGame;
}

void ACKAskContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_agree_continue_game_ = false;
    enemy_user_id_ = 0;
    user_id_ = 0;
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKAskContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_agree_continue_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_continue_game_)));
          set_has_is_agree_continue_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enemy_user_id;
        break;
      }

      // required int32 enemy_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_user_id_)));
          set_has_enemy_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKAskContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_agree_continue_game = 1;
  if (has_is_agree_continue_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_agree_continue_game(), output);
  }

  // required int32 enemy_user_id = 2;
  if (has_enemy_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enemy_user_id(), output);
  }

  // required int32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKAskContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_agree_continue_game = 1;
  if (has_is_agree_continue_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_agree_continue_game(), target);
  }

  // required int32 enemy_user_id = 2;
  if (has_enemy_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enemy_user_id(), target);
  }

  // required int32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKAskContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_agree_continue_game = 1;
    if (has_is_agree_continue_game()) {
      total_size += 1 + 1;
    }

    // required int32 enemy_user_id = 2;
    if (has_enemy_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_user_id());
    }

    // required int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 table_id = 4;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKAskContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKAskContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKAskContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKAskContinueGame::MergeFrom(const ACKAskContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_agree_continue_game()) {
      set_is_agree_continue_game(from.is_agree_continue_game());
    }
    if (from.has_enemy_user_id()) {
      set_enemy_user_id(from.enemy_user_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKAskContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKAskContinueGame::CopyFrom(const ACKAskContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKAskContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ACKAskContinueGame::Swap(ACKAskContinueGame* other) {
  if (other != this) {
    std::swap(is_agree_continue_game_, other->is_agree_continue_game_);
    std::swap(enemy_user_id_, other->enemy_user_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKAskContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKAskContinueGame_descriptor_;
  metadata.reflection = ACKAskContinueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRefuseContinueGame::kCodeFieldNumber;
const int ACKRefuseContinueGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKRefuseContinueGame::ACKRefuseContinueGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRefuseContinueGame::InitAsDefaultInstance() {
}

ACKRefuseContinueGame::ACKRefuseContinueGame(const ACKRefuseContinueGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRefuseContinueGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRefuseContinueGame::~ACKRefuseContinueGame() {
  SharedDtor();
}

void ACKRefuseContinueGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKRefuseContinueGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRefuseContinueGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRefuseContinueGame_descriptor_;
}

const ACKRefuseContinueGame& ACKRefuseContinueGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKRefuseContinueGame* ACKRefuseContinueGame::default_instance_ = NULL;

ACKRefuseContinueGame* ACKRefuseContinueGame::New() const {
  return new ACKRefuseContinueGame;
}

void ACKRefuseContinueGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRefuseContinueGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRefuseContinueGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRefuseContinueGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRefuseContinueGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRefuseContinueGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRefuseContinueGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRefuseContinueGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRefuseContinueGame::MergeFrom(const ACKRefuseContinueGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRefuseContinueGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRefuseContinueGame::CopyFrom(const ACKRefuseContinueGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRefuseContinueGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKRefuseContinueGame::Swap(ACKRefuseContinueGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRefuseContinueGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRefuseContinueGame_descriptor_;
  metadata.reflection = ACKRefuseContinueGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKFriendsList::kFirendinfoFieldNumber;
#endif  // !_MSC_VER

ACKFriendsList::ACKFriendsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKFriendsList::InitAsDefaultInstance() {
}

ACKFriendsList::ACKFriendsList(const ACKFriendsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKFriendsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKFriendsList::~ACKFriendsList() {
  SharedDtor();
}

void ACKFriendsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKFriendsList_descriptor_;
}

const ACKFriendsList& ACKFriendsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKFriendsList* ACKFriendsList::default_instance_ = NULL;

ACKFriendsList* ACKFriendsList::New() const {
  return new ACKFriendsList;
}

void ACKFriendsList::Clear() {
  firendinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserInfo firendinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firendinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_firendinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .UserInfo firendinfo = 1;
  for (int i = 0; i < this->firendinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->firendinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKFriendsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .UserInfo firendinfo = 1;
  for (int i = 0; i < this->firendinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->firendinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKFriendsList::ByteSize() const {
  int total_size = 0;

  // repeated .UserInfo firendinfo = 1;
  total_size += 1 * this->firendinfo_size();
  for (int i = 0; i < this->firendinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firendinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKFriendsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKFriendsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKFriendsList::MergeFrom(const ACKFriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  firendinfo_.MergeFrom(from.firendinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKFriendsList::CopyFrom(const ACKFriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKFriendsList::IsInitialized() const {

  return true;
}

void ACKFriendsList::Swap(ACKFriendsList* other) {
  if (other != this) {
    firendinfo_.Swap(&other->firendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKFriendsList_descriptor_;
  metadata.reflection = ACKFriendsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQExitGame::kReqMsgFieldNumber;
const int REQExitGame::kExitTableIdFieldNumber;
const int REQExitGame::kExitUserIdFieldNumber;
const int REQExitGame::kEnemyUserIdFieldNumber;
#endif  // !_MSC_VER

REQExitGame::REQExitGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQExitGame::InitAsDefaultInstance() {
}

REQExitGame::REQExitGame(const REQExitGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQExitGame::SharedCtor() {
  _cached_size_ = 0;
  req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exit_table_id_ = 0;
  exit_user_id_ = 0;
  enemy_user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQExitGame::~REQExitGame() {
  SharedDtor();
}

void REQExitGame::SharedDtor() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (this != default_instance_) {
  }
}

void REQExitGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQExitGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQExitGame_descriptor_;
}

const REQExitGame& REQExitGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQExitGame* REQExitGame::default_instance_ = NULL;

REQExitGame* REQExitGame::New() const {
  return new REQExitGame;
}

void REQExitGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_msg()) {
      if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
        req_msg_->clear();
      }
    }
    exit_table_id_ = 0;
    exit_user_id_ = 0;
    enemy_user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQExitGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes req_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exit_table_id;
        break;
      }

      // optional int32 exit_table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_table_id_)));
          set_has_exit_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exit_user_id;
        break;
      }

      // required int32 exit_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_user_id_)));
          set_has_exit_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enemy_user_id;
        break;
      }

      // required int32 enemy_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_user_id_)));
          set_has_enemy_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQExitGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->req_msg(), output);
  }

  // optional int32 exit_table_id = 2;
  if (has_exit_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exit_table_id(), output);
  }

  // required int32 exit_user_id = 3;
  if (has_exit_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exit_user_id(), output);
  }

  // required int32 enemy_user_id = 4;
  if (has_enemy_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enemy_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQExitGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->req_msg(), target);
  }

  // optional int32 exit_table_id = 2;
  if (has_exit_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exit_table_id(), target);
  }

  // required int32 exit_user_id = 3;
  if (has_exit_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exit_user_id(), target);
  }

  // required int32 enemy_user_id = 4;
  if (has_enemy_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enemy_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQExitGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes req_msg = 1;
    if (has_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_msg());
    }

    // optional int32 exit_table_id = 2;
    if (has_exit_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_table_id());
    }

    // required int32 exit_user_id = 3;
    if (has_exit_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_user_id());
    }

    // required int32 enemy_user_id = 4;
    if (has_enemy_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQExitGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQExitGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQExitGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQExitGame::MergeFrom(const REQExitGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_msg()) {
      set_req_msg(from.req_msg());
    }
    if (from.has_exit_table_id()) {
      set_exit_table_id(from.exit_table_id());
    }
    if (from.has_exit_user_id()) {
      set_exit_user_id(from.exit_user_id());
    }
    if (from.has_enemy_user_id()) {
      set_enemy_user_id(from.enemy_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQExitGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQExitGame::CopyFrom(const REQExitGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQExitGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void REQExitGame::Swap(REQExitGame* other) {
  if (other != this) {
    std::swap(req_msg_, other->req_msg_);
    std::swap(exit_table_id_, other->exit_table_id_);
    std::swap(exit_user_id_, other->exit_user_id_);
    std::swap(enemy_user_id_, other->enemy_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQExitGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQExitGame_descriptor_;
  metadata.reflection = REQExitGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKExitGame::kCodeFieldNumber;
const int ACKExitGame::kResultMsgFieldNumber;
const int ACKExitGame::kExitTableIdFieldNumber;
const int ACKExitGame::kExitUserIdFieldNumber;
#endif  // !_MSC_VER

ACKExitGame::ACKExitGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKExitGame::InitAsDefaultInstance() {
}

ACKExitGame::ACKExitGame(const ACKExitGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKExitGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exit_table_id_ = 0;
  exit_user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKExitGame::~ACKExitGame() {
  SharedDtor();
}

void ACKExitGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKExitGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKExitGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKExitGame_descriptor_;
}

const ACKExitGame& ACKExitGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKExitGame* ACKExitGame::default_instance_ = NULL;

ACKExitGame* ACKExitGame::New() const {
  return new ACKExitGame;
}

void ACKExitGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    exit_table_id_ = 0;
    exit_user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKExitGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exit_table_id;
        break;
      }

      // optional int32 exit_table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_table_id_)));
          set_has_exit_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exit_user_id;
        break;
      }

      // optional int32 exit_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_user_id_)));
          set_has_exit_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKExitGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  // optional int32 exit_table_id = 3;
  if (has_exit_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exit_table_id(), output);
  }

  // optional int32 exit_user_id = 4;
  if (has_exit_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exit_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKExitGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  // optional int32 exit_table_id = 3;
  if (has_exit_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exit_table_id(), target);
  }

  // optional int32 exit_user_id = 4;
  if (has_exit_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exit_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKExitGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // optional int32 exit_table_id = 3;
    if (has_exit_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_table_id());
    }

    // optional int32 exit_user_id = 4;
    if (has_exit_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKExitGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKExitGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKExitGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKExitGame::MergeFrom(const ACKExitGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_exit_table_id()) {
      set_exit_table_id(from.exit_table_id());
    }
    if (from.has_exit_user_id()) {
      set_exit_user_id(from.exit_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKExitGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKExitGame::CopyFrom(const ACKExitGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKExitGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKExitGame::Swap(ACKExitGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(exit_table_id_, other->exit_table_id_);
    std::swap(exit_user_id_, other->exit_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKExitGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKExitGame_descriptor_;
  metadata.reflection = ACKExitGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQInviteFriendGame::kUserinfoFieldNumber;
const int REQInviteFriendGame::kFriendIdFieldNumber;
#endif  // !_MSC_VER

REQInviteFriendGame::REQInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQInviteFriendGame::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

REQInviteFriendGame::REQInviteFriendGame(const REQInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  friend_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQInviteFriendGame::~REQInviteFriendGame() {
  SharedDtor();
}

void REQInviteFriendGame::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void REQInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQInviteFriendGame_descriptor_;
}

const REQInviteFriendGame& REQInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQInviteFriendGame* REQInviteFriendGame::default_instance_ = NULL;

REQInviteFriendGame* REQInviteFriendGame::New() const {
  return new REQInviteFriendGame;
}

void REQInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
    friend_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserInfo userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required int32 friend_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .UserInfo userinfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // required int32 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .UserInfo userinfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // required int32 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UserInfo userinfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // required int32 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQInviteFriendGame::MergeFrom(const REQInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQInviteFriendGame::CopyFrom(const REQInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void REQInviteFriendGame::Swap(REQInviteFriendGame* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQInviteFriendGame_descriptor_;
  metadata.reflection = REQInviteFriendGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKInviteFriendGame::kCodeFieldNumber;
const int ACKInviteFriendGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKInviteFriendGame::ACKInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKInviteFriendGame::InitAsDefaultInstance() {
}

ACKInviteFriendGame::ACKInviteFriendGame(const ACKInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKInviteFriendGame::~ACKInviteFriendGame() {
  SharedDtor();
}

void ACKInviteFriendGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKInviteFriendGame_descriptor_;
}

const ACKInviteFriendGame& ACKInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKInviteFriendGame* ACKInviteFriendGame::default_instance_ = NULL;

ACKInviteFriendGame* ACKInviteFriendGame::New() const {
  return new ACKInviteFriendGame;
}

void ACKInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKInviteFriendGame::MergeFrom(const ACKInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKInviteFriendGame::CopyFrom(const ACKInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKInviteFriendGame::Swap(ACKInviteFriendGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKInviteFriendGame_descriptor_;
  metadata.reflection = ACKInviteFriendGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQAskInviteFriendGame::kFriendInfoFieldNumber;
const int REQAskInviteFriendGame::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQAskInviteFriendGame::REQAskInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQAskInviteFriendGame::InitAsDefaultInstance() {
  friend_info_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

REQAskInviteFriendGame::REQAskInviteFriendGame(const REQAskInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQAskInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  friend_info_ = NULL;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQAskInviteFriendGame::~REQAskInviteFriendGame() {
  SharedDtor();
}

void REQAskInviteFriendGame::SharedDtor() {
  if (this != default_instance_) {
    delete friend_info_;
  }
}

void REQAskInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQAskInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQAskInviteFriendGame_descriptor_;
}

const REQAskInviteFriendGame& REQAskInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQAskInviteFriendGame* REQAskInviteFriendGame::default_instance_ = NULL;

REQAskInviteFriendGame* REQAskInviteFriendGame::New() const {
  return new REQAskInviteFriendGame;
}

void REQAskInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friend_info()) {
      if (friend_info_ != NULL) friend_info_->::UserInfo::Clear();
    }
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQAskInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserInfo friend_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQAskInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .UserInfo friend_info = 1;
  if (has_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_info(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQAskInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .UserInfo friend_info = 1;
  if (has_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_info(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQAskInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UserInfo friend_info = 1;
    if (has_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_info());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQAskInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQAskInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQAskInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQAskInviteFriendGame::MergeFrom(const REQAskInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_info()) {
      mutable_friend_info()->::UserInfo::MergeFrom(from.friend_info());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQAskInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQAskInviteFriendGame::CopyFrom(const REQAskInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQAskInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void REQAskInviteFriendGame::Swap(REQAskInviteFriendGame* other) {
  if (other != this) {
    std::swap(friend_info_, other->friend_info_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQAskInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQAskInviteFriendGame_descriptor_;
  metadata.reflection = REQAskInviteFriendGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKAskInviteFriendGame::kIsAgreeInviteGameFieldNumber;
const int ACKAskInviteFriendGame::kUserinfoFieldNumber;
const int ACKAskInviteFriendGame::kFriendIdFieldNumber;
const int ACKAskInviteFriendGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKAskInviteFriendGame::ACKAskInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKAskInviteFriendGame::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKAskInviteFriendGame::ACKAskInviteFriendGame(const ACKAskInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKAskInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  is_agree_invite_game_ = false;
  userinfo_ = NULL;
  friend_id_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKAskInviteFriendGame::~ACKAskInviteFriendGame() {
  SharedDtor();
}

void ACKAskInviteFriendGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void ACKAskInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKAskInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKAskInviteFriendGame_descriptor_;
}

const ACKAskInviteFriendGame& ACKAskInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKAskInviteFriendGame* ACKAskInviteFriendGame::default_instance_ = NULL;

ACKAskInviteFriendGame* ACKAskInviteFriendGame::New() const {
  return new ACKAskInviteFriendGame;
}

void ACKAskInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_agree_invite_game_ = false;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
    friend_id_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKAskInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_agree_invite_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_invite_game_)));
          set_has_is_agree_invite_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // optional .UserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friend_id;
        break;
      }

      // required int32 friend_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_msg;
        break;
      }

      // optional bytes result_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKAskInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_agree_invite_game = 1;
  if (has_is_agree_invite_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_agree_invite_game(), output);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  // required int32 friend_id = 3;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->friend_id(), output);
  }

  // optional bytes result_msg = 4;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKAskInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_agree_invite_game = 1;
  if (has_is_agree_invite_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_agree_invite_game(), target);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  // required int32 friend_id = 3;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->friend_id(), target);
  }

  // optional bytes result_msg = 4;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKAskInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_agree_invite_game = 1;
    if (has_is_agree_invite_game()) {
      total_size += 1 + 1;
    }

    // optional .UserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // required int32 friend_id = 3;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_id());
    }

    // optional bytes result_msg = 4;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKAskInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKAskInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKAskInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKAskInviteFriendGame::MergeFrom(const ACKAskInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_agree_invite_game()) {
      set_is_agree_invite_game(from.is_agree_invite_game());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKAskInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKAskInviteFriendGame::CopyFrom(const ACKAskInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKAskInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void ACKAskInviteFriendGame::Swap(ACKAskInviteFriendGame* other) {
  if (other != this) {
    std::swap(is_agree_invite_game_, other->is_agree_invite_game_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKAskInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKAskInviteFriendGame_descriptor_;
  metadata.reflection = ACKAskInviteFriendGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRefuseInviteFriendGame::kCodeFieldNumber;
const int ACKRefuseInviteFriendGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKRefuseInviteFriendGame::ACKRefuseInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRefuseInviteFriendGame::InitAsDefaultInstance() {
}

ACKRefuseInviteFriendGame::ACKRefuseInviteFriendGame(const ACKRefuseInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRefuseInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRefuseInviteFriendGame::~ACKRefuseInviteFriendGame() {
  SharedDtor();
}

void ACKRefuseInviteFriendGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKRefuseInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRefuseInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRefuseInviteFriendGame_descriptor_;
}

const ACKRefuseInviteFriendGame& ACKRefuseInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKRefuseInviteFriendGame* ACKRefuseInviteFriendGame::default_instance_ = NULL;

ACKRefuseInviteFriendGame* ACKRefuseInviteFriendGame::New() const {
  return new ACKRefuseInviteFriendGame;
}

void ACKRefuseInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRefuseInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRefuseInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRefuseInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRefuseInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRefuseInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRefuseInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRefuseInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRefuseInviteFriendGame::MergeFrom(const ACKRefuseInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRefuseInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRefuseInviteFriendGame::CopyFrom(const ACKRefuseInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRefuseInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKRefuseInviteFriendGame::Swap(ACKRefuseInviteFriendGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRefuseInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRefuseInviteFriendGame_descriptor_;
  metadata.reflection = ACKRefuseInviteFriendGame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
