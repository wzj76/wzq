// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wzqProtocol.proto

#ifndef PROTOBUF_wzqProtocol_2eproto__INCLUDED
#define PROTOBUF_wzqProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wzqProtocol_2eproto();
void protobuf_AssignDesc_wzqProtocol_2eproto();
void protobuf_ShutdownFile_wzqProtocol_2eproto();

class MsgPackage;
class UserInfo;
class REQRoom;
class ACKRoom;
class REQCreatGame;
class ACKCreatGame;
class REQAction;
class ACKAction;
class REQForcExit;
class REQInviteFriendGame;
class ACKInviteFriendGame;
class REQAskInviteFriendGame;
class ACKAskInviteFriendGame;
class ACKRefuseInviteFriendGame;

// ===================================================================

class MsgPackage : public ::google::protobuf::Message {
 public:
  MsgPackage();
  virtual ~MsgPackage();

  MsgPackage(const MsgPackage& from);

  inline MsgPackage& operator=(const MsgPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPackage& default_instance();

  void Swap(MsgPackage* other);

  // implements Message ----------------------------------------------

  MsgPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPackage& from);
  void MergeFrom(const MsgPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 msg_id = 1;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline ::google::protobuf::int64 msg_id() const;
  inline void set_msg_id(::google::protobuf::int64 value);

  // optional int64 seq_id = 2;
  inline bool has_seq_id() const;
  inline void clear_seq_id();
  static const int kSeqIdFieldNumber = 2;
  inline ::google::protobuf::int64 seq_id() const;
  inline void set_seq_id(::google::protobuf::int64 value);

  // optional int64 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int64 user_id() const;
  inline void set_user_id(::google::protobuf::int64 value);

  // optional bytes msg = 4;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional bytes src = 5;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 5;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const void* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // optional int64 clientid = 6;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 6;
  inline ::google::protobuf::int64 clientid() const;
  inline void set_clientid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgPackage)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_seq_id();
  inline void clear_has_seq_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 msg_id_;
  ::google::protobuf::int64 seq_id_;
  ::google::protobuf::int64 user_id_;
  ::std::string* msg_;
  ::std::string* src_;
  ::google::protobuf::int64 clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static MsgPackage* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional int32 wintimes = 3;
  inline bool has_wintimes() const;
  inline void clear_wintimes();
  static const int kWintimesFieldNumber = 3;
  inline ::google::protobuf::int32 wintimes() const;
  inline void set_wintimes(::google::protobuf::int32 value);

  // optional int32 losetimes = 4;
  inline bool has_losetimes() const;
  inline void clear_losetimes();
  static const int kLosetimesFieldNumber = 4;
  inline ::google::protobuf::int32 losetimes() const;
  inline void set_losetimes(::google::protobuf::int32 value);

  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 xp = 7;
  inline bool has_xp() const;
  inline void clear_xp();
  static const int kXpFieldNumber = 7;
  inline ::google::protobuf::int32 xp() const;
  inline void set_xp(::google::protobuf::int32 value);

  // optional int32 head_id = 8;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 8;
  inline ::google::protobuf::int32 head_id() const;
  inline void set_head_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_wintimes();
  inline void clear_has_wintimes();
  inline void set_has_losetimes();
  inline void clear_has_losetimes();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_xp();
  inline void clear_has_xp();
  inline void set_has_head_id();
  inline void clear_has_head_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 wintimes_;
  ::google::protobuf::int32 losetimes_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 xp_;
  ::google::protobuf::int32 head_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class REQRoom : public ::google::protobuf::Message {
 public:
  REQRoom();
  virtual ~REQRoom();

  REQRoom(const REQRoom& from);

  inline REQRoom& operator=(const REQRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQRoom& default_instance();

  void Swap(REQRoom* other);

  // implements Message ----------------------------------------------

  REQRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQRoom& from);
  void MergeFrom(const REQRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes req_msg = 1;
  inline bool has_req_msg() const;
  inline void clear_req_msg();
  static const int kReqMsgFieldNumber = 1;
  inline const ::std::string& req_msg() const;
  inline void set_req_msg(const ::std::string& value);
  inline void set_req_msg(const char* value);
  inline void set_req_msg(const void* value, size_t size);
  inline ::std::string* mutable_req_msg();
  inline ::std::string* release_req_msg();
  inline void set_allocated_req_msg(::std::string* req_msg);

  // optional .UserInfo userinfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 2;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:REQRoom)
 private:
  inline void set_has_req_msg();
  inline void clear_has_req_msg();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_msg_;
  ::UserInfo* userinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQRoom* default_instance_;
};
// -------------------------------------------------------------------

class ACKRoom : public ::google::protobuf::Message {
 public:
  ACKRoom();
  virtual ~ACKRoom();

  ACKRoom(const ACKRoom& from);

  inline ACKRoom& operator=(const ACKRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKRoom& default_instance();

  void Swap(ACKRoom* other);

  // implements Message ----------------------------------------------

  ACKRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKRoom& from);
  void MergeFrom(const ACKRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // optional .UserInfo userinfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 3;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // optional int32 black_id = 4;
  inline bool has_black_id() const;
  inline void clear_black_id();
  static const int kBlackIdFieldNumber = 4;
  inline ::google::protobuf::int32 black_id() const;
  inline void set_black_id(::google::protobuf::int32 value);

  // optional int32 white_id = 5;
  inline bool has_white_id() const;
  inline void clear_white_id();
  static const int kWhiteIdFieldNumber = 5;
  inline ::google::protobuf::int32 white_id() const;
  inline void set_white_id(::google::protobuf::int32 value);

  // optional int32 board_row = 6;
  inline bool has_board_row() const;
  inline void clear_board_row();
  static const int kBoardRowFieldNumber = 6;
  inline ::google::protobuf::int32 board_row() const;
  inline void set_board_row(::google::protobuf::int32 value);

  // optional int32 board_col = 7;
  inline bool has_board_col() const;
  inline void clear_board_col();
  static const int kBoardColFieldNumber = 7;
  inline ::google::protobuf::int32 board_col() const;
  inline void set_board_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKRoom)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_black_id();
  inline void clear_has_black_id();
  inline void set_has_white_id();
  inline void clear_has_white_id();
  inline void set_has_board_row();
  inline void clear_has_board_row();
  inline void set_has_board_col();
  inline void clear_has_board_col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 black_id_;
  ::UserInfo* userinfo_;
  ::google::protobuf::int32 white_id_;
  ::google::protobuf::int32 board_row_;
  ::google::protobuf::int32 board_col_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKRoom* default_instance_;
};
// -------------------------------------------------------------------

class REQCreatGame : public ::google::protobuf::Message {
 public:
  REQCreatGame();
  virtual ~REQCreatGame();

  REQCreatGame(const REQCreatGame& from);

  inline REQCreatGame& operator=(const REQCreatGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQCreatGame& default_instance();

  void Swap(REQCreatGame* other);

  // implements Message ----------------------------------------------

  REQCreatGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQCreatGame& from);
  void MergeFrom(const REQCreatGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes req_msg = 1;
  inline bool has_req_msg() const;
  inline void clear_req_msg();
  static const int kReqMsgFieldNumber = 1;
  inline const ::std::string& req_msg() const;
  inline void set_req_msg(const ::std::string& value);
  inline void set_req_msg(const char* value);
  inline void set_req_msg(const void* value, size_t size);
  inline ::std::string* mutable_req_msg();
  inline ::std::string* release_req_msg();
  inline void set_allocated_req_msg(::std::string* req_msg);

  // optional .UserInfo userinfo_player1 = 2;
  inline bool has_userinfo_player1() const;
  inline void clear_userinfo_player1();
  static const int kUserinfoPlayer1FieldNumber = 2;
  inline const ::UserInfo& userinfo_player1() const;
  inline ::UserInfo* mutable_userinfo_player1();
  inline ::UserInfo* release_userinfo_player1();
  inline void set_allocated_userinfo_player1(::UserInfo* userinfo_player1);

  // optional int32 player1_clientid = 3;
  inline bool has_player1_clientid() const;
  inline void clear_player1_clientid();
  static const int kPlayer1ClientidFieldNumber = 3;
  inline ::google::protobuf::int32 player1_clientid() const;
  inline void set_player1_clientid(::google::protobuf::int32 value);

  // optional .UserInfo userinfo_player2 = 4;
  inline bool has_userinfo_player2() const;
  inline void clear_userinfo_player2();
  static const int kUserinfoPlayer2FieldNumber = 4;
  inline const ::UserInfo& userinfo_player2() const;
  inline ::UserInfo* mutable_userinfo_player2();
  inline ::UserInfo* release_userinfo_player2();
  inline void set_allocated_userinfo_player2(::UserInfo* userinfo_player2);

  // optional int32 player2_clientid = 5;
  inline bool has_player2_clientid() const;
  inline void clear_player2_clientid();
  static const int kPlayer2ClientidFieldNumber = 5;
  inline ::google::protobuf::int32 player2_clientid() const;
  inline void set_player2_clientid(::google::protobuf::int32 value);

  // optional int32 black_id = 6;
  inline bool has_black_id() const;
  inline void clear_black_id();
  static const int kBlackIdFieldNumber = 6;
  inline ::google::protobuf::int32 black_id() const;
  inline void set_black_id(::google::protobuf::int32 value);

  // optional int32 white_id = 7;
  inline bool has_white_id() const;
  inline void clear_white_id();
  static const int kWhiteIdFieldNumber = 7;
  inline ::google::protobuf::int32 white_id() const;
  inline void set_white_id(::google::protobuf::int32 value);

  // optional int32 board_row = 8;
  inline bool has_board_row() const;
  inline void clear_board_row();
  static const int kBoardRowFieldNumber = 8;
  inline ::google::protobuf::int32 board_row() const;
  inline void set_board_row(::google::protobuf::int32 value);

  // optional int32 board_col = 9;
  inline bool has_board_col() const;
  inline void clear_board_col();
  static const int kBoardColFieldNumber = 9;
  inline ::google::protobuf::int32 board_col() const;
  inline void set_board_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQCreatGame)
 private:
  inline void set_has_req_msg();
  inline void clear_has_req_msg();
  inline void set_has_userinfo_player1();
  inline void clear_has_userinfo_player1();
  inline void set_has_player1_clientid();
  inline void clear_has_player1_clientid();
  inline void set_has_userinfo_player2();
  inline void clear_has_userinfo_player2();
  inline void set_has_player2_clientid();
  inline void clear_has_player2_clientid();
  inline void set_has_black_id();
  inline void clear_has_black_id();
  inline void set_has_white_id();
  inline void clear_has_white_id();
  inline void set_has_board_row();
  inline void clear_has_board_row();
  inline void set_has_board_col();
  inline void clear_has_board_col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_msg_;
  ::UserInfo* userinfo_player1_;
  ::UserInfo* userinfo_player2_;
  ::google::protobuf::int32 player1_clientid_;
  ::google::protobuf::int32 player2_clientid_;
  ::google::protobuf::int32 black_id_;
  ::google::protobuf::int32 white_id_;
  ::google::protobuf::int32 board_row_;
  ::google::protobuf::int32 board_col_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQCreatGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKCreatGame : public ::google::protobuf::Message {
 public:
  ACKCreatGame();
  virtual ~ACKCreatGame();

  ACKCreatGame(const ACKCreatGame& from);

  inline ACKCreatGame& operator=(const ACKCreatGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKCreatGame& default_instance();

  void Swap(ACKCreatGame* other);

  // implements Message ----------------------------------------------

  ACKCreatGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKCreatGame& from);
  void MergeFrom(const ACKCreatGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // required int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // required int32 black_id = 4;
  inline bool has_black_id() const;
  inline void clear_black_id();
  static const int kBlackIdFieldNumber = 4;
  inline ::google::protobuf::int32 black_id() const;
  inline void set_black_id(::google::protobuf::int32 value);

  // required int32 white_id = 5;
  inline bool has_white_id() const;
  inline void clear_white_id();
  static const int kWhiteIdFieldNumber = 5;
  inline ::google::protobuf::int32 white_id() const;
  inline void set_white_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKCreatGame)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_black_id();
  inline void clear_has_black_id();
  inline void set_has_white_id();
  inline void clear_has_white_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 black_id_;
  ::google::protobuf::int32 white_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKCreatGame* default_instance_;
};
// -------------------------------------------------------------------

class REQAction : public ::google::protobuf::Message {
 public:
  REQAction();
  virtual ~REQAction();

  REQAction(const REQAction& from);

  inline REQAction& operator=(const REQAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQAction& default_instance();

  void Swap(REQAction* other);

  // implements Message ----------------------------------------------

  REQAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQAction& from);
  void MergeFrom(const REQAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes req_msg = 1;
  inline bool has_req_msg() const;
  inline void clear_req_msg();
  static const int kReqMsgFieldNumber = 1;
  inline const ::std::string& req_msg() const;
  inline void set_req_msg(const ::std::string& value);
  inline void set_req_msg(const char* value);
  inline void set_req_msg(const void* value, size_t size);
  inline ::std::string* mutable_req_msg();
  inline ::std::string* release_req_msg();
  inline void set_allocated_req_msg(::std::string* req_msg);

  // required int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // required int32 action_id = 3;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 3;
  inline ::google::protobuf::int32 action_id() const;
  inline void set_action_id(::google::protobuf::int32 value);

  // optional int32 action_board_row = 4;
  inline bool has_action_board_row() const;
  inline void clear_action_board_row();
  static const int kActionBoardRowFieldNumber = 4;
  inline ::google::protobuf::int32 action_board_row() const;
  inline void set_action_board_row(::google::protobuf::int32 value);

  // optional int32 action_board_col = 5;
  inline bool has_action_board_col() const;
  inline void clear_action_board_col();
  static const int kActionBoardColFieldNumber = 5;
  inline ::google::protobuf::int32 action_board_col() const;
  inline void set_action_board_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQAction)
 private:
  inline void set_has_req_msg();
  inline void clear_has_req_msg();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_action_board_row();
  inline void clear_has_action_board_row();
  inline void set_has_action_board_col();
  inline void clear_has_action_board_col();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_msg_;
  ::google::protobuf::int32 table_id_;
  ::google::protobuf::int32 action_id_;
  ::google::protobuf::int32 action_board_row_;
  ::google::protobuf::int32 action_board_col_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQAction* default_instance_;
};
// -------------------------------------------------------------------

class ACKAction : public ::google::protobuf::Message {
 public:
  ACKAction();
  virtual ~ACKAction();

  ACKAction(const ACKAction& from);

  inline ACKAction& operator=(const ACKAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKAction& default_instance();

  void Swap(ACKAction* other);

  // implements Message ----------------------------------------------

  ACKAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKAction& from);
  void MergeFrom(const ACKAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes result_msg = 1;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 1;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // required int32 action_id = 2;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 2;
  inline ::google::protobuf::int32 action_id() const;
  inline void set_action_id(::google::protobuf::int32 value);

  // optional int32 action_board_row = 3;
  inline bool has_action_board_row() const;
  inline void clear_action_board_row();
  static const int kActionBoardRowFieldNumber = 3;
  inline ::google::protobuf::int32 action_board_row() const;
  inline void set_action_board_row(::google::protobuf::int32 value);

  // optional int32 action_board_col = 4;
  inline bool has_action_board_col() const;
  inline void clear_action_board_col();
  static const int kActionBoardColFieldNumber = 4;
  inline ::google::protobuf::int32 action_board_col() const;
  inline void set_action_board_col(::google::protobuf::int32 value);

  // optional bool is_win = 5;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 5;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // optional int32 win_id = 6;
  inline bool has_win_id() const;
  inline void clear_win_id();
  static const int kWinIdFieldNumber = 6;
  inline ::google::protobuf::int32 win_id() const;
  inline void set_win_id(::google::protobuf::int32 value);

  // optional int32 lose_id = 7;
  inline bool has_lose_id() const;
  inline void clear_lose_id();
  static const int kLoseIdFieldNumber = 7;
  inline ::google::protobuf::int32 lose_id() const;
  inline void set_lose_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACKAction)
 private:
  inline void set_has_result_msg();
  inline void clear_has_result_msg();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_action_board_row();
  inline void clear_has_action_board_row();
  inline void set_has_action_board_col();
  inline void clear_has_action_board_col();
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_win_id();
  inline void clear_has_win_id();
  inline void set_has_lose_id();
  inline void clear_has_lose_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 action_id_;
  ::google::protobuf::int32 action_board_row_;
  ::google::protobuf::int32 action_board_col_;
  bool is_win_;
  ::google::protobuf::int32 win_id_;
  ::google::protobuf::int32 lose_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKAction* default_instance_;
};
// -------------------------------------------------------------------

class REQForcExit : public ::google::protobuf::Message {
 public:
  REQForcExit();
  virtual ~REQForcExit();

  REQForcExit(const REQForcExit& from);

  inline REQForcExit& operator=(const REQForcExit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQForcExit& default_instance();

  void Swap(REQForcExit* other);

  // implements Message ----------------------------------------------

  REQForcExit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQForcExit& from);
  void MergeFrom(const REQForcExit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQForcExit)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQForcExit* default_instance_;
};
// -------------------------------------------------------------------

class REQInviteFriendGame : public ::google::protobuf::Message {
 public:
  REQInviteFriendGame();
  virtual ~REQInviteFriendGame();

  REQInviteFriendGame(const REQInviteFriendGame& from);

  inline REQInviteFriendGame& operator=(const REQInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQInviteFriendGame& default_instance();

  void Swap(REQInviteFriendGame* other);

  // implements Message ----------------------------------------------

  REQInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQInviteFriendGame& from);
  void MergeFrom(const REQInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UserInfo userinfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // required int32 friend_id = 2;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::int32 friend_id() const;
  inline void set_friend_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQInviteFriendGame)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* userinfo_;
  ::google::protobuf::int32 friend_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQInviteFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKInviteFriendGame : public ::google::protobuf::Message {
 public:
  ACKInviteFriendGame();
  virtual ~ACKInviteFriendGame();

  ACKInviteFriendGame(const ACKInviteFriendGame& from);

  inline ACKInviteFriendGame& operator=(const ACKInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKInviteFriendGame& default_instance();

  void Swap(ACKInviteFriendGame* other);

  // implements Message ----------------------------------------------

  ACKInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKInviteFriendGame& from);
  void MergeFrom(const ACKInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKInviteFriendGame)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKInviteFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class REQAskInviteFriendGame : public ::google::protobuf::Message {
 public:
  REQAskInviteFriendGame();
  virtual ~REQAskInviteFriendGame();

  REQAskInviteFriendGame(const REQAskInviteFriendGame& from);

  inline REQAskInviteFriendGame& operator=(const REQAskInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REQAskInviteFriendGame& default_instance();

  void Swap(REQAskInviteFriendGame* other);

  // implements Message ----------------------------------------------

  REQAskInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REQAskInviteFriendGame& from);
  void MergeFrom(const REQAskInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UserInfo friend_info = 1;
  inline bool has_friend_info() const;
  inline void clear_friend_info();
  static const int kFriendInfoFieldNumber = 1;
  inline const ::UserInfo& friend_info() const;
  inline ::UserInfo* mutable_friend_info();
  inline ::UserInfo* release_friend_info();
  inline void set_allocated_friend_info(::UserInfo* friend_info);

  // required int32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REQAskInviteFriendGame)
 private:
  inline void set_has_friend_info();
  inline void clear_has_friend_info();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* friend_info_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static REQAskInviteFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKAskInviteFriendGame : public ::google::protobuf::Message {
 public:
  ACKAskInviteFriendGame();
  virtual ~ACKAskInviteFriendGame();

  ACKAskInviteFriendGame(const ACKAskInviteFriendGame& from);

  inline ACKAskInviteFriendGame& operator=(const ACKAskInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKAskInviteFriendGame& default_instance();

  void Swap(ACKAskInviteFriendGame* other);

  // implements Message ----------------------------------------------

  ACKAskInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKAskInviteFriendGame& from);
  void MergeFrom(const ACKAskInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_agree_invite_game = 1;
  inline bool has_is_agree_invite_game() const;
  inline void clear_is_agree_invite_game();
  static const int kIsAgreeInviteGameFieldNumber = 1;
  inline bool is_agree_invite_game() const;
  inline void set_is_agree_invite_game(bool value);

  // optional .UserInfo userinfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 2;
  inline const ::UserInfo& userinfo() const;
  inline ::UserInfo* mutable_userinfo();
  inline ::UserInfo* release_userinfo();
  inline void set_allocated_userinfo(::UserInfo* userinfo);

  // required int32 friend_id = 3;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 3;
  inline ::google::protobuf::int32 friend_id() const;
  inline void set_friend_id(::google::protobuf::int32 value);

  // optional bytes result_msg = 4;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 4;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKAskInviteFriendGame)
 private:
  inline void set_has_is_agree_invite_game();
  inline void clear_has_is_agree_invite_game();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserInfo* userinfo_;
  bool is_agree_invite_game_;
  ::google::protobuf::int32 friend_id_;
  ::std::string* result_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKAskInviteFriendGame* default_instance_;
};
// -------------------------------------------------------------------

class ACKRefuseInviteFriendGame : public ::google::protobuf::Message {
 public:
  ACKRefuseInviteFriendGame();
  virtual ~ACKRefuseInviteFriendGame();

  ACKRefuseInviteFriendGame(const ACKRefuseInviteFriendGame& from);

  inline ACKRefuseInviteFriendGame& operator=(const ACKRefuseInviteFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACKRefuseInviteFriendGame& default_instance();

  void Swap(ACKRefuseInviteFriendGame* other);

  // implements Message ----------------------------------------------

  ACKRefuseInviteFriendGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACKRefuseInviteFriendGame& from);
  void MergeFrom(const ACKRefuseInviteFriendGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required bytes result_msg = 2;
  inline bool has_result_msg() const;
  inline void clear_result_msg();
  static const int kResultMsgFieldNumber = 2;
  inline const ::std::string& result_msg() const;
  inline void set_result_msg(const ::std::string& value);
  inline void set_result_msg(const char* value);
  inline void set_result_msg(const void* value, size_t size);
  inline ::std::string* mutable_result_msg();
  inline ::std::string* release_result_msg();
  inline void set_allocated_result_msg(::std::string* result_msg);

  // @@protoc_insertion_point(class_scope:ACKRefuseInviteFriendGame)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_result_msg();
  inline void clear_has_result_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_msg_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wzqProtocol_2eproto();
  friend void protobuf_AssignDesc_wzqProtocol_2eproto();
  friend void protobuf_ShutdownFile_wzqProtocol_2eproto();

  void InitAsDefaultInstance();
  static ACKRefuseInviteFriendGame* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgPackage

// optional int64 msg_id = 1;
inline bool MsgPackage::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgPackage::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgPackage::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgPackage::clear_msg_id() {
  msg_id_ = GOOGLE_LONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::int64 MsgPackage::msg_id() const {
  return msg_id_;
}
inline void MsgPackage::set_msg_id(::google::protobuf::int64 value) {
  set_has_msg_id();
  msg_id_ = value;
}

// optional int64 seq_id = 2;
inline bool MsgPackage::has_seq_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgPackage::set_has_seq_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgPackage::clear_has_seq_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgPackage::clear_seq_id() {
  seq_id_ = GOOGLE_LONGLONG(0);
  clear_has_seq_id();
}
inline ::google::protobuf::int64 MsgPackage::seq_id() const {
  return seq_id_;
}
inline void MsgPackage::set_seq_id(::google::protobuf::int64 value) {
  set_has_seq_id();
  seq_id_ = value;
}

// optional int64 user_id = 3;
inline bool MsgPackage::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgPackage::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgPackage::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgPackage::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 MsgPackage::user_id() const {
  return user_id_;
}
inline void MsgPackage::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bytes msg = 4;
inline bool MsgPackage::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgPackage::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgPackage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgPackage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MsgPackage::msg() const {
  return *msg_;
}
inline void MsgPackage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MsgPackage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MsgPackage::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPackage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* MsgPackage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPackage::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes src = 5;
inline bool MsgPackage::has_src() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgPackage::set_has_src() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgPackage::clear_has_src() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgPackage::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& MsgPackage::src() const {
  return *src_;
}
inline void MsgPackage::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void MsgPackage::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void MsgPackage::set_src(const void* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPackage::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* MsgPackage::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgPackage::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 clientid = 6;
inline bool MsgPackage::has_clientid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgPackage::set_has_clientid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgPackage::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgPackage::clear_clientid() {
  clientid_ = GOOGLE_LONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::int64 MsgPackage::clientid() const {
  return clientid_;
}
inline void MsgPackage::set_clientid(::google::protobuf::int64 value) {
  set_has_clientid();
  clientid_ = value;
}

// -------------------------------------------------------------------

// UserInfo

// optional int32 id = 1;
inline bool UserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserInfo::id() const {
  return id_;
}
inline void UserInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes username = 2;
inline bool UserInfo::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& UserInfo::username() const {
  return *username_;
}
inline void UserInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserInfo::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* UserInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInfo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 wintimes = 3;
inline bool UserInfo::has_wintimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_wintimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_wintimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_wintimes() {
  wintimes_ = 0;
  clear_has_wintimes();
}
inline ::google::protobuf::int32 UserInfo::wintimes() const {
  return wintimes_;
}
inline void UserInfo::set_wintimes(::google::protobuf::int32 value) {
  set_has_wintimes();
  wintimes_ = value;
}

// optional int32 losetimes = 4;
inline bool UserInfo::has_losetimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_losetimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_losetimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_losetimes() {
  losetimes_ = 0;
  clear_has_losetimes();
}
inline ::google::protobuf::int32 UserInfo::losetimes() const {
  return losetimes_;
}
inline void UserInfo::set_losetimes(::google::protobuf::int32 value) {
  set_has_losetimes();
  losetimes_ = value;
}

// optional int32 score = 5;
inline bool UserInfo::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 UserInfo::score() const {
  return score_;
}
inline void UserInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 level = 6;
inline bool UserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserInfo::level() const {
  return level_;
}
inline void UserInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 xp = 7;
inline bool UserInfo::has_xp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::set_has_xp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo::clear_has_xp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo::clear_xp() {
  xp_ = 0;
  clear_has_xp();
}
inline ::google::protobuf::int32 UserInfo::xp() const {
  return xp_;
}
inline void UserInfo::set_xp(::google::protobuf::int32 value) {
  set_has_xp();
  xp_ = value;
}

// optional int32 head_id = 8;
inline bool UserInfo::has_head_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::set_has_head_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo::clear_head_id() {
  head_id_ = 0;
  clear_has_head_id();
}
inline ::google::protobuf::int32 UserInfo::head_id() const {
  return head_id_;
}
inline void UserInfo::set_head_id(::google::protobuf::int32 value) {
  set_has_head_id();
  head_id_ = value;
}

// -------------------------------------------------------------------

// REQRoom

// required bytes req_msg = 1;
inline bool REQRoom::has_req_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQRoom::set_has_req_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQRoom::clear_has_req_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQRoom::clear_req_msg() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    req_msg_->clear();
  }
  clear_has_req_msg();
}
inline const ::std::string& REQRoom::req_msg() const {
  return *req_msg_;
}
inline void REQRoom::set_req_msg(const ::std::string& value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQRoom::set_req_msg(const char* value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQRoom::set_req_msg(const void* value, size_t size) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQRoom::mutable_req_msg() {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  return req_msg_;
}
inline ::std::string* REQRoom::release_req_msg() {
  clear_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_msg_;
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQRoom::set_allocated_req_msg(::std::string* req_msg) {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (req_msg) {
    set_has_req_msg();
    req_msg_ = req_msg;
  } else {
    clear_has_req_msg();
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .UserInfo userinfo = 2;
inline bool REQRoom::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQRoom::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQRoom::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQRoom::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& REQRoom::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* REQRoom::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* REQRoom::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void REQRoom::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// -------------------------------------------------------------------

// ACKRoom

// required int32 code = 1;
inline bool ACKRoom::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKRoom::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKRoom::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKRoom::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKRoom::code() const {
  return code_;
}
inline void ACKRoom::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKRoom::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKRoom::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKRoom::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKRoom::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKRoom::result_msg() const {
  return *result_msg_;
}
inline void ACKRoom::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRoom::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRoom::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKRoom::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKRoom::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKRoom::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .UserInfo userinfo = 3;
inline bool ACKRoom::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKRoom::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKRoom::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKRoom::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& ACKRoom::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* ACKRoom::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* ACKRoom::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void ACKRoom::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// optional int32 black_id = 4;
inline bool ACKRoom::has_black_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKRoom::set_has_black_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKRoom::clear_has_black_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKRoom::clear_black_id() {
  black_id_ = 0;
  clear_has_black_id();
}
inline ::google::protobuf::int32 ACKRoom::black_id() const {
  return black_id_;
}
inline void ACKRoom::set_black_id(::google::protobuf::int32 value) {
  set_has_black_id();
  black_id_ = value;
}

// optional int32 white_id = 5;
inline bool ACKRoom::has_white_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACKRoom::set_has_white_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACKRoom::clear_has_white_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACKRoom::clear_white_id() {
  white_id_ = 0;
  clear_has_white_id();
}
inline ::google::protobuf::int32 ACKRoom::white_id() const {
  return white_id_;
}
inline void ACKRoom::set_white_id(::google::protobuf::int32 value) {
  set_has_white_id();
  white_id_ = value;
}

// optional int32 board_row = 6;
inline bool ACKRoom::has_board_row() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ACKRoom::set_has_board_row() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ACKRoom::clear_has_board_row() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ACKRoom::clear_board_row() {
  board_row_ = 0;
  clear_has_board_row();
}
inline ::google::protobuf::int32 ACKRoom::board_row() const {
  return board_row_;
}
inline void ACKRoom::set_board_row(::google::protobuf::int32 value) {
  set_has_board_row();
  board_row_ = value;
}

// optional int32 board_col = 7;
inline bool ACKRoom::has_board_col() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ACKRoom::set_has_board_col() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ACKRoom::clear_has_board_col() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ACKRoom::clear_board_col() {
  board_col_ = 0;
  clear_has_board_col();
}
inline ::google::protobuf::int32 ACKRoom::board_col() const {
  return board_col_;
}
inline void ACKRoom::set_board_col(::google::protobuf::int32 value) {
  set_has_board_col();
  board_col_ = value;
}

// -------------------------------------------------------------------

// REQCreatGame

// required bytes req_msg = 1;
inline bool REQCreatGame::has_req_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQCreatGame::set_has_req_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQCreatGame::clear_has_req_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQCreatGame::clear_req_msg() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    req_msg_->clear();
  }
  clear_has_req_msg();
}
inline const ::std::string& REQCreatGame::req_msg() const {
  return *req_msg_;
}
inline void REQCreatGame::set_req_msg(const ::std::string& value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQCreatGame::set_req_msg(const char* value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQCreatGame::set_req_msg(const void* value, size_t size) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQCreatGame::mutable_req_msg() {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  return req_msg_;
}
inline ::std::string* REQCreatGame::release_req_msg() {
  clear_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_msg_;
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQCreatGame::set_allocated_req_msg(::std::string* req_msg) {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (req_msg) {
    set_has_req_msg();
    req_msg_ = req_msg;
  } else {
    clear_has_req_msg();
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .UserInfo userinfo_player1 = 2;
inline bool REQCreatGame::has_userinfo_player1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQCreatGame::set_has_userinfo_player1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQCreatGame::clear_has_userinfo_player1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQCreatGame::clear_userinfo_player1() {
  if (userinfo_player1_ != NULL) userinfo_player1_->::UserInfo::Clear();
  clear_has_userinfo_player1();
}
inline const ::UserInfo& REQCreatGame::userinfo_player1() const {
  return userinfo_player1_ != NULL ? *userinfo_player1_ : *default_instance_->userinfo_player1_;
}
inline ::UserInfo* REQCreatGame::mutable_userinfo_player1() {
  set_has_userinfo_player1();
  if (userinfo_player1_ == NULL) userinfo_player1_ = new ::UserInfo;
  return userinfo_player1_;
}
inline ::UserInfo* REQCreatGame::release_userinfo_player1() {
  clear_has_userinfo_player1();
  ::UserInfo* temp = userinfo_player1_;
  userinfo_player1_ = NULL;
  return temp;
}
inline void REQCreatGame::set_allocated_userinfo_player1(::UserInfo* userinfo_player1) {
  delete userinfo_player1_;
  userinfo_player1_ = userinfo_player1;
  if (userinfo_player1) {
    set_has_userinfo_player1();
  } else {
    clear_has_userinfo_player1();
  }
}

// optional int32 player1_clientid = 3;
inline bool REQCreatGame::has_player1_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQCreatGame::set_has_player1_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQCreatGame::clear_has_player1_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQCreatGame::clear_player1_clientid() {
  player1_clientid_ = 0;
  clear_has_player1_clientid();
}
inline ::google::protobuf::int32 REQCreatGame::player1_clientid() const {
  return player1_clientid_;
}
inline void REQCreatGame::set_player1_clientid(::google::protobuf::int32 value) {
  set_has_player1_clientid();
  player1_clientid_ = value;
}

// optional .UserInfo userinfo_player2 = 4;
inline bool REQCreatGame::has_userinfo_player2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void REQCreatGame::set_has_userinfo_player2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void REQCreatGame::clear_has_userinfo_player2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void REQCreatGame::clear_userinfo_player2() {
  if (userinfo_player2_ != NULL) userinfo_player2_->::UserInfo::Clear();
  clear_has_userinfo_player2();
}
inline const ::UserInfo& REQCreatGame::userinfo_player2() const {
  return userinfo_player2_ != NULL ? *userinfo_player2_ : *default_instance_->userinfo_player2_;
}
inline ::UserInfo* REQCreatGame::mutable_userinfo_player2() {
  set_has_userinfo_player2();
  if (userinfo_player2_ == NULL) userinfo_player2_ = new ::UserInfo;
  return userinfo_player2_;
}
inline ::UserInfo* REQCreatGame::release_userinfo_player2() {
  clear_has_userinfo_player2();
  ::UserInfo* temp = userinfo_player2_;
  userinfo_player2_ = NULL;
  return temp;
}
inline void REQCreatGame::set_allocated_userinfo_player2(::UserInfo* userinfo_player2) {
  delete userinfo_player2_;
  userinfo_player2_ = userinfo_player2;
  if (userinfo_player2) {
    set_has_userinfo_player2();
  } else {
    clear_has_userinfo_player2();
  }
}

// optional int32 player2_clientid = 5;
inline bool REQCreatGame::has_player2_clientid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void REQCreatGame::set_has_player2_clientid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void REQCreatGame::clear_has_player2_clientid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void REQCreatGame::clear_player2_clientid() {
  player2_clientid_ = 0;
  clear_has_player2_clientid();
}
inline ::google::protobuf::int32 REQCreatGame::player2_clientid() const {
  return player2_clientid_;
}
inline void REQCreatGame::set_player2_clientid(::google::protobuf::int32 value) {
  set_has_player2_clientid();
  player2_clientid_ = value;
}

// optional int32 black_id = 6;
inline bool REQCreatGame::has_black_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void REQCreatGame::set_has_black_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void REQCreatGame::clear_has_black_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void REQCreatGame::clear_black_id() {
  black_id_ = 0;
  clear_has_black_id();
}
inline ::google::protobuf::int32 REQCreatGame::black_id() const {
  return black_id_;
}
inline void REQCreatGame::set_black_id(::google::protobuf::int32 value) {
  set_has_black_id();
  black_id_ = value;
}

// optional int32 white_id = 7;
inline bool REQCreatGame::has_white_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void REQCreatGame::set_has_white_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void REQCreatGame::clear_has_white_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void REQCreatGame::clear_white_id() {
  white_id_ = 0;
  clear_has_white_id();
}
inline ::google::protobuf::int32 REQCreatGame::white_id() const {
  return white_id_;
}
inline void REQCreatGame::set_white_id(::google::protobuf::int32 value) {
  set_has_white_id();
  white_id_ = value;
}

// optional int32 board_row = 8;
inline bool REQCreatGame::has_board_row() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void REQCreatGame::set_has_board_row() {
  _has_bits_[0] |= 0x00000080u;
}
inline void REQCreatGame::clear_has_board_row() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void REQCreatGame::clear_board_row() {
  board_row_ = 0;
  clear_has_board_row();
}
inline ::google::protobuf::int32 REQCreatGame::board_row() const {
  return board_row_;
}
inline void REQCreatGame::set_board_row(::google::protobuf::int32 value) {
  set_has_board_row();
  board_row_ = value;
}

// optional int32 board_col = 9;
inline bool REQCreatGame::has_board_col() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void REQCreatGame::set_has_board_col() {
  _has_bits_[0] |= 0x00000100u;
}
inline void REQCreatGame::clear_has_board_col() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void REQCreatGame::clear_board_col() {
  board_col_ = 0;
  clear_has_board_col();
}
inline ::google::protobuf::int32 REQCreatGame::board_col() const {
  return board_col_;
}
inline void REQCreatGame::set_board_col(::google::protobuf::int32 value) {
  set_has_board_col();
  board_col_ = value;
}

// -------------------------------------------------------------------

// ACKCreatGame

// required int32 code = 1;
inline bool ACKCreatGame::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKCreatGame::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKCreatGame::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKCreatGame::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKCreatGame::code() const {
  return code_;
}
inline void ACKCreatGame::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKCreatGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKCreatGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKCreatGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKCreatGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKCreatGame::result_msg() const {
  return *result_msg_;
}
inline void ACKCreatGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKCreatGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKCreatGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKCreatGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKCreatGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKCreatGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 room_id = 3;
inline bool ACKCreatGame::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKCreatGame::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKCreatGame::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKCreatGame::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 ACKCreatGame::room_id() const {
  return room_id_;
}
inline void ACKCreatGame::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// required int32 black_id = 4;
inline bool ACKCreatGame::has_black_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKCreatGame::set_has_black_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKCreatGame::clear_has_black_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKCreatGame::clear_black_id() {
  black_id_ = 0;
  clear_has_black_id();
}
inline ::google::protobuf::int32 ACKCreatGame::black_id() const {
  return black_id_;
}
inline void ACKCreatGame::set_black_id(::google::protobuf::int32 value) {
  set_has_black_id();
  black_id_ = value;
}

// required int32 white_id = 5;
inline bool ACKCreatGame::has_white_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACKCreatGame::set_has_white_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACKCreatGame::clear_has_white_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACKCreatGame::clear_white_id() {
  white_id_ = 0;
  clear_has_white_id();
}
inline ::google::protobuf::int32 ACKCreatGame::white_id() const {
  return white_id_;
}
inline void ACKCreatGame::set_white_id(::google::protobuf::int32 value) {
  set_has_white_id();
  white_id_ = value;
}

// -------------------------------------------------------------------

// REQAction

// required bytes req_msg = 1;
inline bool REQAction::has_req_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQAction::set_has_req_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQAction::clear_has_req_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQAction::clear_req_msg() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    req_msg_->clear();
  }
  clear_has_req_msg();
}
inline const ::std::string& REQAction::req_msg() const {
  return *req_msg_;
}
inline void REQAction::set_req_msg(const ::std::string& value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQAction::set_req_msg(const char* value) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(value);
}
inline void REQAction::set_req_msg(const void* value, size_t size) {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  req_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REQAction::mutable_req_msg() {
  set_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    req_msg_ = new ::std::string;
  }
  return req_msg_;
}
inline ::std::string* REQAction::release_req_msg() {
  clear_has_req_msg();
  if (req_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_msg_;
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REQAction::set_allocated_req_msg(::std::string* req_msg) {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (req_msg) {
    set_has_req_msg();
    req_msg_ = req_msg;
  } else {
    clear_has_req_msg();
    req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 table_id = 2;
inline bool REQAction::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQAction::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQAction::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQAction::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 REQAction::table_id() const {
  return table_id_;
}
inline void REQAction::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
}

// required int32 action_id = 3;
inline bool REQAction::has_action_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REQAction::set_has_action_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REQAction::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REQAction::clear_action_id() {
  action_id_ = 0;
  clear_has_action_id();
}
inline ::google::protobuf::int32 REQAction::action_id() const {
  return action_id_;
}
inline void REQAction::set_action_id(::google::protobuf::int32 value) {
  set_has_action_id();
  action_id_ = value;
}

// optional int32 action_board_row = 4;
inline bool REQAction::has_action_board_row() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void REQAction::set_has_action_board_row() {
  _has_bits_[0] |= 0x00000008u;
}
inline void REQAction::clear_has_action_board_row() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void REQAction::clear_action_board_row() {
  action_board_row_ = 0;
  clear_has_action_board_row();
}
inline ::google::protobuf::int32 REQAction::action_board_row() const {
  return action_board_row_;
}
inline void REQAction::set_action_board_row(::google::protobuf::int32 value) {
  set_has_action_board_row();
  action_board_row_ = value;
}

// optional int32 action_board_col = 5;
inline bool REQAction::has_action_board_col() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void REQAction::set_has_action_board_col() {
  _has_bits_[0] |= 0x00000010u;
}
inline void REQAction::clear_has_action_board_col() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void REQAction::clear_action_board_col() {
  action_board_col_ = 0;
  clear_has_action_board_col();
}
inline ::google::protobuf::int32 REQAction::action_board_col() const {
  return action_board_col_;
}
inline void REQAction::set_action_board_col(::google::protobuf::int32 value) {
  set_has_action_board_col();
  action_board_col_ = value;
}

// -------------------------------------------------------------------

// ACKAction

// required bytes result_msg = 1;
inline bool ACKAction::has_result_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKAction::set_has_result_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKAction::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKAction::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKAction::result_msg() const {
  return *result_msg_;
}
inline void ACKAction::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAction::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAction::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKAction::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKAction::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKAction::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 action_id = 2;
inline bool ACKAction::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKAction::set_has_action_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKAction::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKAction::clear_action_id() {
  action_id_ = 0;
  clear_has_action_id();
}
inline ::google::protobuf::int32 ACKAction::action_id() const {
  return action_id_;
}
inline void ACKAction::set_action_id(::google::protobuf::int32 value) {
  set_has_action_id();
  action_id_ = value;
}

// optional int32 action_board_row = 3;
inline bool ACKAction::has_action_board_row() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKAction::set_has_action_board_row() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKAction::clear_has_action_board_row() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKAction::clear_action_board_row() {
  action_board_row_ = 0;
  clear_has_action_board_row();
}
inline ::google::protobuf::int32 ACKAction::action_board_row() const {
  return action_board_row_;
}
inline void ACKAction::set_action_board_row(::google::protobuf::int32 value) {
  set_has_action_board_row();
  action_board_row_ = value;
}

// optional int32 action_board_col = 4;
inline bool ACKAction::has_action_board_col() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKAction::set_has_action_board_col() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKAction::clear_has_action_board_col() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKAction::clear_action_board_col() {
  action_board_col_ = 0;
  clear_has_action_board_col();
}
inline ::google::protobuf::int32 ACKAction::action_board_col() const {
  return action_board_col_;
}
inline void ACKAction::set_action_board_col(::google::protobuf::int32 value) {
  set_has_action_board_col();
  action_board_col_ = value;
}

// optional bool is_win = 5;
inline bool ACKAction::has_is_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACKAction::set_has_is_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACKAction::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACKAction::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool ACKAction::is_win() const {
  return is_win_;
}
inline void ACKAction::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// optional int32 win_id = 6;
inline bool ACKAction::has_win_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ACKAction::set_has_win_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ACKAction::clear_has_win_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ACKAction::clear_win_id() {
  win_id_ = 0;
  clear_has_win_id();
}
inline ::google::protobuf::int32 ACKAction::win_id() const {
  return win_id_;
}
inline void ACKAction::set_win_id(::google::protobuf::int32 value) {
  set_has_win_id();
  win_id_ = value;
}

// optional int32 lose_id = 7;
inline bool ACKAction::has_lose_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ACKAction::set_has_lose_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ACKAction::clear_has_lose_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ACKAction::clear_lose_id() {
  lose_id_ = 0;
  clear_has_lose_id();
}
inline ::google::protobuf::int32 ACKAction::lose_id() const {
  return lose_id_;
}
inline void ACKAction::set_lose_id(::google::protobuf::int32 value) {
  set_has_lose_id();
  lose_id_ = value;
}

// -------------------------------------------------------------------

// REQForcExit

// optional int32 user_id = 1;
inline bool REQForcExit::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQForcExit::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQForcExit::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQForcExit::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQForcExit::user_id() const {
  return user_id_;
}
inline void REQForcExit::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// REQInviteFriendGame

// optional .UserInfo userinfo = 1;
inline bool REQInviteFriendGame::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQInviteFriendGame::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQInviteFriendGame::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQInviteFriendGame::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& REQInviteFriendGame::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* REQInviteFriendGame::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* REQInviteFriendGame::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void REQInviteFriendGame::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// required int32 friend_id = 2;
inline bool REQInviteFriendGame::has_friend_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQInviteFriendGame::set_has_friend_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQInviteFriendGame::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQInviteFriendGame::clear_friend_id() {
  friend_id_ = 0;
  clear_has_friend_id();
}
inline ::google::protobuf::int32 REQInviteFriendGame::friend_id() const {
  return friend_id_;
}
inline void REQInviteFriendGame::set_friend_id(::google::protobuf::int32 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// -------------------------------------------------------------------

// ACKInviteFriendGame

// required int32 code = 1;
inline bool ACKInviteFriendGame::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKInviteFriendGame::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKInviteFriendGame::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKInviteFriendGame::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKInviteFriendGame::code() const {
  return code_;
}
inline void ACKInviteFriendGame::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKInviteFriendGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKInviteFriendGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKInviteFriendGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKInviteFriendGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKInviteFriendGame::result_msg() const {
  return *result_msg_;
}
inline void ACKInviteFriendGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKInviteFriendGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKInviteFriendGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKInviteFriendGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKInviteFriendGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKInviteFriendGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// REQAskInviteFriendGame

// optional .UserInfo friend_info = 1;
inline bool REQAskInviteFriendGame::has_friend_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REQAskInviteFriendGame::set_has_friend_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REQAskInviteFriendGame::clear_has_friend_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REQAskInviteFriendGame::clear_friend_info() {
  if (friend_info_ != NULL) friend_info_->::UserInfo::Clear();
  clear_has_friend_info();
}
inline const ::UserInfo& REQAskInviteFriendGame::friend_info() const {
  return friend_info_ != NULL ? *friend_info_ : *default_instance_->friend_info_;
}
inline ::UserInfo* REQAskInviteFriendGame::mutable_friend_info() {
  set_has_friend_info();
  if (friend_info_ == NULL) friend_info_ = new ::UserInfo;
  return friend_info_;
}
inline ::UserInfo* REQAskInviteFriendGame::release_friend_info() {
  clear_has_friend_info();
  ::UserInfo* temp = friend_info_;
  friend_info_ = NULL;
  return temp;
}
inline void REQAskInviteFriendGame::set_allocated_friend_info(::UserInfo* friend_info) {
  delete friend_info_;
  friend_info_ = friend_info;
  if (friend_info) {
    set_has_friend_info();
  } else {
    clear_has_friend_info();
  }
}

// required int32 user_id = 2;
inline bool REQAskInviteFriendGame::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REQAskInviteFriendGame::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REQAskInviteFriendGame::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REQAskInviteFriendGame::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 REQAskInviteFriendGame::user_id() const {
  return user_id_;
}
inline void REQAskInviteFriendGame::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// ACKAskInviteFriendGame

// required bool is_agree_invite_game = 1;
inline bool ACKAskInviteFriendGame::has_is_agree_invite_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKAskInviteFriendGame::set_has_is_agree_invite_game() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKAskInviteFriendGame::clear_has_is_agree_invite_game() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKAskInviteFriendGame::clear_is_agree_invite_game() {
  is_agree_invite_game_ = false;
  clear_has_is_agree_invite_game();
}
inline bool ACKAskInviteFriendGame::is_agree_invite_game() const {
  return is_agree_invite_game_;
}
inline void ACKAskInviteFriendGame::set_is_agree_invite_game(bool value) {
  set_has_is_agree_invite_game();
  is_agree_invite_game_ = value;
}

// optional .UserInfo userinfo = 2;
inline bool ACKAskInviteFriendGame::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKAskInviteFriendGame::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKAskInviteFriendGame::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKAskInviteFriendGame::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  clear_has_userinfo();
}
inline const ::UserInfo& ACKAskInviteFriendGame::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::UserInfo* ACKAskInviteFriendGame::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::UserInfo;
  return userinfo_;
}
inline ::UserInfo* ACKAskInviteFriendGame::release_userinfo() {
  clear_has_userinfo();
  ::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void ACKAskInviteFriendGame::set_allocated_userinfo(::UserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// required int32 friend_id = 3;
inline bool ACKAskInviteFriendGame::has_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACKAskInviteFriendGame::set_has_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACKAskInviteFriendGame::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACKAskInviteFriendGame::clear_friend_id() {
  friend_id_ = 0;
  clear_has_friend_id();
}
inline ::google::protobuf::int32 ACKAskInviteFriendGame::friend_id() const {
  return friend_id_;
}
inline void ACKAskInviteFriendGame::set_friend_id(::google::protobuf::int32 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// optional bytes result_msg = 4;
inline bool ACKAskInviteFriendGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACKAskInviteFriendGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACKAskInviteFriendGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACKAskInviteFriendGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKAskInviteFriendGame::result_msg() const {
  return *result_msg_;
}
inline void ACKAskInviteFriendGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAskInviteFriendGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKAskInviteFriendGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKAskInviteFriendGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKAskInviteFriendGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKAskInviteFriendGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ACKRefuseInviteFriendGame

// required int32 code = 1;
inline bool ACKRefuseInviteFriendGame::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACKRefuseInviteFriendGame::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACKRefuseInviteFriendGame::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACKRefuseInviteFriendGame::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ACKRefuseInviteFriendGame::code() const {
  return code_;
}
inline void ACKRefuseInviteFriendGame::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required bytes result_msg = 2;
inline bool ACKRefuseInviteFriendGame::has_result_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACKRefuseInviteFriendGame::set_has_result_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACKRefuseInviteFriendGame::clear_has_result_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACKRefuseInviteFriendGame::clear_result_msg() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    result_msg_->clear();
  }
  clear_has_result_msg();
}
inline const ::std::string& ACKRefuseInviteFriendGame::result_msg() const {
  return *result_msg_;
}
inline void ACKRefuseInviteFriendGame::set_result_msg(const ::std::string& value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRefuseInviteFriendGame::set_result_msg(const char* value) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(value);
}
inline void ACKRefuseInviteFriendGame::set_result_msg(const void* value, size_t size) {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  result_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACKRefuseInviteFriendGame::mutable_result_msg() {
  set_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    result_msg_ = new ::std::string;
  }
  return result_msg_;
}
inline ::std::string* ACKRefuseInviteFriendGame::release_result_msg() {
  clear_has_result_msg();
  if (result_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_msg_;
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ACKRefuseInviteFriendGame::set_allocated_result_msg(::std::string* result_msg) {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (result_msg) {
    set_has_result_msg();
    result_msg_ = result_msg;
  } else {
    clear_has_result_msg();
    result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wzqProtocol_2eproto__INCLUDED
