// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wzqProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wzqProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQCreatGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQCreatGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKCreatGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKCreatGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQForcExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQForcExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQInviteFriendGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKInviteFriendGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQAskInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQAskInviteFriendGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKAskInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKAskInviteFriendGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRefuseInviteFriendGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRefuseInviteFriendGame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wzqProtocol_2eproto() {
  protobuf_AddDesc_wzqProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wzqProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPackage_descriptor_ = file->message_type(0);
  static const int MsgPackage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, clientid_),
  };
  MsgPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPackage_descriptor_,
      MsgPackage::default_instance_,
      MsgPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPackage));
  UserInfo_descriptor_ = file->message_type(1);
  static const int UserInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, wintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, losetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, head_id_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  REQRoom_descriptor_ = file->message_type(2);
  static const int REQRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRoom, req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRoom, userinfo_),
  };
  REQRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQRoom_descriptor_,
      REQRoom::default_instance_,
      REQRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQRoom));
  ACKRoom_descriptor_ = file->message_type(3);
  static const int ACKRoom_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, black_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, white_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, board_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, board_col_),
  };
  ACKRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRoom_descriptor_,
      ACKRoom::default_instance_,
      ACKRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRoom));
  REQCreatGame_descriptor_ = file->message_type(4);
  static const int REQCreatGame_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, userinfo_player1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, player1_clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, userinfo_player2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, player2_clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, black_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, white_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, board_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, board_col_),
  };
  REQCreatGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQCreatGame_descriptor_,
      REQCreatGame::default_instance_,
      REQCreatGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQCreatGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQCreatGame));
  ACKCreatGame_descriptor_ = file->message_type(5);
  static const int ACKCreatGame_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, black_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, white_id_),
  };
  ACKCreatGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKCreatGame_descriptor_,
      ACKCreatGame::default_instance_,
      ACKCreatGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKCreatGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKCreatGame));
  REQAction_descriptor_ = file->message_type(6);
  static const int REQAction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, action_board_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, action_board_col_),
  };
  REQAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQAction_descriptor_,
      REQAction::default_instance_,
      REQAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQAction));
  ACKAction_descriptor_ = file->message_type(7);
  static const int ACKAction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, action_board_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, action_board_col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, win_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, lose_id_),
  };
  ACKAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKAction_descriptor_,
      ACKAction::default_instance_,
      ACKAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKAction));
  REQForcExit_descriptor_ = file->message_type(8);
  static const int REQForcExit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQForcExit, user_id_),
  };
  REQForcExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQForcExit_descriptor_,
      REQForcExit::default_instance_,
      REQForcExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQForcExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQForcExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQForcExit));
  REQInviteFriendGame_descriptor_ = file->message_type(9);
  static const int REQInviteFriendGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQInviteFriendGame, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQInviteFriendGame, friend_id_),
  };
  REQInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQInviteFriendGame_descriptor_,
      REQInviteFriendGame::default_instance_,
      REQInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQInviteFriendGame));
  ACKInviteFriendGame_descriptor_ = file->message_type(10);
  static const int ACKInviteFriendGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKInviteFriendGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKInviteFriendGame, result_msg_),
  };
  ACKInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKInviteFriendGame_descriptor_,
      ACKInviteFriendGame::default_instance_,
      ACKInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKInviteFriendGame));
  REQAskInviteFriendGame_descriptor_ = file->message_type(11);
  static const int REQAskInviteFriendGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskInviteFriendGame, friend_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskInviteFriendGame, user_id_),
  };
  REQAskInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQAskInviteFriendGame_descriptor_,
      REQAskInviteFriendGame::default_instance_,
      REQAskInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAskInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQAskInviteFriendGame));
  ACKAskInviteFriendGame_descriptor_ = file->message_type(12);
  static const int ACKAskInviteFriendGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, is_agree_invite_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, result_msg_),
  };
  ACKAskInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKAskInviteFriendGame_descriptor_,
      ACKAskInviteFriendGame::default_instance_,
      ACKAskInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAskInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKAskInviteFriendGame));
  ACKRefuseInviteFriendGame_descriptor_ = file->message_type(13);
  static const int ACKRefuseInviteFriendGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseInviteFriendGame, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseInviteFriendGame, result_msg_),
  };
  ACKRefuseInviteFriendGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRefuseInviteFriendGame_descriptor_,
      ACKRefuseInviteFriendGame::default_instance_,
      ACKRefuseInviteFriendGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseInviteFriendGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRefuseInviteFriendGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRefuseInviteFriendGame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wzqProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPackage_descriptor_, &MsgPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQRoom_descriptor_, &REQRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRoom_descriptor_, &ACKRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQCreatGame_descriptor_, &REQCreatGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKCreatGame_descriptor_, &ACKCreatGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQAction_descriptor_, &REQAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKAction_descriptor_, &ACKAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQForcExit_descriptor_, &REQForcExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQInviteFriendGame_descriptor_, &REQInviteFriendGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKInviteFriendGame_descriptor_, &ACKInviteFriendGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQAskInviteFriendGame_descriptor_, &REQAskInviteFriendGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKAskInviteFriendGame_descriptor_, &ACKAskInviteFriendGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRefuseInviteFriendGame_descriptor_, &ACKRefuseInviteFriendGame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wzqProtocol_2eproto() {
  delete MsgPackage::default_instance_;
  delete MsgPackage_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete REQRoom::default_instance_;
  delete REQRoom_reflection_;
  delete ACKRoom::default_instance_;
  delete ACKRoom_reflection_;
  delete REQCreatGame::default_instance_;
  delete REQCreatGame_reflection_;
  delete ACKCreatGame::default_instance_;
  delete ACKCreatGame_reflection_;
  delete REQAction::default_instance_;
  delete REQAction_reflection_;
  delete ACKAction::default_instance_;
  delete ACKAction_reflection_;
  delete REQForcExit::default_instance_;
  delete REQForcExit_reflection_;
  delete REQInviteFriendGame::default_instance_;
  delete REQInviteFriendGame_reflection_;
  delete ACKInviteFriendGame::default_instance_;
  delete ACKInviteFriendGame_reflection_;
  delete REQAskInviteFriendGame::default_instance_;
  delete REQAskInviteFriendGame_reflection_;
  delete ACKAskInviteFriendGame::default_instance_;
  delete ACKAskInviteFriendGame_reflection_;
  delete ACKRefuseInviteFriendGame::default_instance_;
  delete ACKRefuseInviteFriendGame_reflection_;
}

void protobuf_AddDesc_wzqProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021wzqProtocol.proto\"i\n\nMsgPackage\022\016\n\006msg"
    "_id\030\001 \001(\003\022\016\n\006seq_id\030\002 \001(\003\022\017\n\007user_id\030\003 \001"
    "(\003\022\013\n\003msg\030\004 \001(\014\022\013\n\003src\030\005 \001(\014\022\020\n\010clientid"
    "\030\006 \001(\003\"\210\001\n\010UserInfo\022\n\n\002id\030\001 \001(\005\022\020\n\010usern"
    "ame\030\002 \001(\014\022\020\n\010wintimes\030\003 \001(\005\022\021\n\tlosetimes"
    "\030\004 \001(\005\022\r\n\005score\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\n\n\002"
    "xp\030\007 \001(\005\022\017\n\007head_id\030\010 \001(\005\"7\n\007REQRoom\022\017\n\007"
    "req_msg\030\001 \002(\014\022\033\n\010userinfo\030\002 \001(\0132\t.UserIn"
    "fo\"\222\001\n\007ACKRoom\022\014\n\004code\030\001 \002(\005\022\022\n\nresult_m"
    "sg\030\002 \002(\014\022\033\n\010userinfo\030\003 \001(\0132\t.UserInfo\022\020\n"
    "\010black_id\030\004 \001(\005\022\020\n\010white_id\030\005 \001(\005\022\021\n\tboa"
    "rd_row\030\006 \001(\005\022\021\n\tboard_col\030\007 \001(\005\"\347\001\n\014REQC"
    "reatGame\022\017\n\007req_msg\030\001 \002(\014\022#\n\020userinfo_pl"
    "ayer1\030\002 \001(\0132\t.UserInfo\022\030\n\020player1_client"
    "id\030\003 \001(\005\022#\n\020userinfo_player2\030\004 \001(\0132\t.Use"
    "rInfo\022\030\n\020player2_clientid\030\005 \001(\005\022\020\n\010black"
    "_id\030\006 \001(\005\022\020\n\010white_id\030\007 \001(\005\022\021\n\tboard_row"
    "\030\010 \001(\005\022\021\n\tboard_col\030\t \001(\005\"e\n\014ACKCreatGam"
    "e\022\014\n\004code\030\001 \002(\005\022\022\n\nresult_msg\030\002 \002(\014\022\017\n\007r"
    "oom_id\030\003 \002(\005\022\020\n\010black_id\030\004 \002(\005\022\020\n\010white_"
    "id\030\005 \002(\005\"u\n\tREQAction\022\017\n\007req_msg\030\001 \002(\014\022\020"
    "\n\010table_id\030\002 \002(\005\022\021\n\taction_id\030\003 \002(\005\022\030\n\020a"
    "ction_board_row\030\004 \001(\005\022\030\n\020action_board_co"
    "l\030\005 \001(\005\"\227\001\n\tACKAction\022\022\n\nresult_msg\030\001 \002("
    "\014\022\021\n\taction_id\030\002 \002(\005\022\030\n\020action_board_row"
    "\030\003 \001(\005\022\030\n\020action_board_col\030\004 \001(\005\022\016\n\006is_w"
    "in\030\005 \001(\010\022\016\n\006win_id\030\006 \001(\005\022\017\n\007lose_id\030\007 \001("
    "\005\"\036\n\013REQForcExit\022\017\n\007user_id\030\001 \001(\005\"E\n\023REQ"
    "InviteFriendGame\022\033\n\010userinfo\030\001 \001(\0132\t.Use"
    "rInfo\022\021\n\tfriend_id\030\002 \002(\005\"7\n\023ACKInviteFri"
    "endGame\022\014\n\004code\030\001 \002(\005\022\022\n\nresult_msg\030\002 \002("
    "\014\"I\n\026REQAskInviteFriendGame\022\036\n\013friend_in"
    "fo\030\001 \001(\0132\t.UserInfo\022\017\n\007user_id\030\002 \002(\005\"z\n\026"
    "ACKAskInviteFriendGame\022\034\n\024is_agree_invit"
    "e_game\030\001 \002(\010\022\033\n\010userinfo\030\002 \001(\0132\t.UserInf"
    "o\022\021\n\tfriend_id\030\003 \002(\005\022\022\n\nresult_msg\030\004 \001(\014"
    "\"=\n\031ACKRefuseInviteFriendGame\022\014\n\004code\030\001 "
    "\002(\005\022\022\n\nresult_msg\030\002 \002(\014", 1503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wzqProtocol.proto", &protobuf_RegisterTypes);
  MsgPackage::default_instance_ = new MsgPackage();
  UserInfo::default_instance_ = new UserInfo();
  REQRoom::default_instance_ = new REQRoom();
  ACKRoom::default_instance_ = new ACKRoom();
  REQCreatGame::default_instance_ = new REQCreatGame();
  ACKCreatGame::default_instance_ = new ACKCreatGame();
  REQAction::default_instance_ = new REQAction();
  ACKAction::default_instance_ = new ACKAction();
  REQForcExit::default_instance_ = new REQForcExit();
  REQInviteFriendGame::default_instance_ = new REQInviteFriendGame();
  ACKInviteFriendGame::default_instance_ = new ACKInviteFriendGame();
  REQAskInviteFriendGame::default_instance_ = new REQAskInviteFriendGame();
  ACKAskInviteFriendGame::default_instance_ = new ACKAskInviteFriendGame();
  ACKRefuseInviteFriendGame::default_instance_ = new ACKRefuseInviteFriendGame();
  MsgPackage::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  REQRoom::default_instance_->InitAsDefaultInstance();
  ACKRoom::default_instance_->InitAsDefaultInstance();
  REQCreatGame::default_instance_->InitAsDefaultInstance();
  ACKCreatGame::default_instance_->InitAsDefaultInstance();
  REQAction::default_instance_->InitAsDefaultInstance();
  ACKAction::default_instance_->InitAsDefaultInstance();
  REQForcExit::default_instance_->InitAsDefaultInstance();
  REQInviteFriendGame::default_instance_->InitAsDefaultInstance();
  ACKInviteFriendGame::default_instance_->InitAsDefaultInstance();
  REQAskInviteFriendGame::default_instance_->InitAsDefaultInstance();
  ACKAskInviteFriendGame::default_instance_->InitAsDefaultInstance();
  ACKRefuseInviteFriendGame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wzqProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wzqProtocol_2eproto {
  StaticDescriptorInitializer_wzqProtocol_2eproto() {
    protobuf_AddDesc_wzqProtocol_2eproto();
  }
} static_descriptor_initializer_wzqProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgPackage::kMsgIdFieldNumber;
const int MsgPackage::kSeqIdFieldNumber;
const int MsgPackage::kUserIdFieldNumber;
const int MsgPackage::kMsgFieldNumber;
const int MsgPackage::kSrcFieldNumber;
const int MsgPackage::kClientidFieldNumber;
#endif  // !_MSC_VER

MsgPackage::MsgPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPackage::InitAsDefaultInstance() {
}

MsgPackage::MsgPackage(const MsgPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPackage::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_LONGLONG(0);
  seq_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPackage::~MsgPackage() {
  SharedDtor();
}

void MsgPackage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void MsgPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPackage_descriptor_;
}

const MsgPackage& MsgPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

MsgPackage* MsgPackage::default_instance_ = NULL;

MsgPackage* MsgPackage::New() const {
  return new MsgPackage;
}

void MsgPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_LONGLONG(0);
    seq_id_ = GOOGLE_LONGLONG(0);
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    clientid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq_id;
        break;
      }

      // optional int64 seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_src;
        break;
      }

      // optional bytes src = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clientid;
        break;
      }

      // optional int64 clientid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_id(), output);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->seq_id(), output);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_id(), output);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  // optional bytes src = 5;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->src(), output);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msg_id(), target);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->seq_id(), target);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_id(), target);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  // optional bytes src = 5;
  if (has_src()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->src(), target);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_id());
    }

    // optional int64 seq_id = 2;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_id());
    }

    // optional int64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional bytes src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src());
    }

    // optional int64 clientid = 6;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPackage::MergeFrom(const MsgPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPackage::CopyFrom(const MsgPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPackage::IsInitialized() const {

  return true;
}

void MsgPackage::Swap(MsgPackage* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(msg_, other->msg_);
    std::swap(src_, other->src_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPackage_descriptor_;
  metadata.reflection = MsgPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kIdFieldNumber;
const int UserInfo::kUsernameFieldNumber;
const int UserInfo::kWintimesFieldNumber;
const int UserInfo::kLosetimesFieldNumber;
const int UserInfo::kScoreFieldNumber;
const int UserInfo::kLevelFieldNumber;
const int UserInfo::kXpFieldNumber;
const int UserInfo::kHeadIdFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wintimes_ = 0;
  losetimes_ = 0;
  score_ = 0;
  level_ = 0;
  xp_ = 0;
  head_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    wintimes_ = 0;
    losetimes_ = 0;
    score_ = 0;
    level_ = 0;
    xp_ = 0;
    head_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wintimes;
        break;
      }

      // optional int32 wintimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintimes_)));
          set_has_wintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_losetimes;
        break;
      }

      // optional int32 losetimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losetimes_)));
          set_has_losetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_xp;
        break;
      }

      // optional int32 xp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_)));
          set_has_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_head_id;
        break;
      }

      // optional int32 head_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // optional int32 wintimes = 3;
  if (has_wintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wintimes(), output);
  }

  // optional int32 losetimes = 4;
  if (has_losetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->losetimes(), output);
  }

  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 xp = 7;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->xp(), output);
  }

  // optional int32 head_id = 8;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->head_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // optional int32 wintimes = 3;
  if (has_wintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wintimes(), target);
  }

  // optional int32 losetimes = 4;
  if (has_losetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->losetimes(), target);
  }

  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 xp = 7;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->xp(), target);
  }

  // optional int32 head_id = 8;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->head_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional int32 wintimes = 3;
    if (has_wintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintimes());
    }

    // optional int32 losetimes = 4;
    if (has_losetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losetimes());
    }

    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 xp = 7;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp());
    }

    // optional int32 head_id = 8;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_wintimes()) {
      set_wintimes(from.wintimes());
    }
    if (from.has_losetimes()) {
      set_losetimes(from.losetimes());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(wintimes_, other->wintimes_);
    std::swap(losetimes_, other->losetimes_);
    std::swap(score_, other->score_);
    std::swap(level_, other->level_);
    std::swap(xp_, other->xp_);
    std::swap(head_id_, other->head_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQRoom::kReqMsgFieldNumber;
const int REQRoom::kUserinfoFieldNumber;
#endif  // !_MSC_VER

REQRoom::REQRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQRoom::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

REQRoom::REQRoom(const REQRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQRoom::SharedCtor() {
  _cached_size_ = 0;
  req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQRoom::~REQRoom() {
  SharedDtor();
}

void REQRoom::SharedDtor() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void REQRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQRoom_descriptor_;
}

const REQRoom& REQRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQRoom* REQRoom::default_instance_ = NULL;

REQRoom* REQRoom::New() const {
  return new REQRoom;
}

void REQRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_msg()) {
      if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
        req_msg_->clear();
      }
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes req_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // optional .UserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->req_msg(), output);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->req_msg(), target);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes req_msg = 1;
    if (has_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_msg());
    }

    // optional .UserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQRoom::MergeFrom(const REQRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_msg()) {
      set_req_msg(from.req_msg());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQRoom::CopyFrom(const REQRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQRoom::Swap(REQRoom* other) {
  if (other != this) {
    std::swap(req_msg_, other->req_msg_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQRoom_descriptor_;
  metadata.reflection = REQRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRoom::kCodeFieldNumber;
const int ACKRoom::kResultMsgFieldNumber;
const int ACKRoom::kUserinfoFieldNumber;
const int ACKRoom::kBlackIdFieldNumber;
const int ACKRoom::kWhiteIdFieldNumber;
const int ACKRoom::kBoardRowFieldNumber;
const int ACKRoom::kBoardColFieldNumber;
#endif  // !_MSC_VER

ACKRoom::ACKRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRoom::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKRoom::ACKRoom(const ACKRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRoom::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userinfo_ = NULL;
  black_id_ = 0;
  white_id_ = 0;
  board_row_ = 0;
  board_col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRoom::~ACKRoom() {
  SharedDtor();
}

void ACKRoom::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void ACKRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRoom_descriptor_;
}

const ACKRoom& ACKRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKRoom* ACKRoom::default_instance_ = NULL;

ACKRoom* ACKRoom::New() const {
  return new ACKRoom;
}

void ACKRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
    black_id_ = 0;
    white_id_ = 0;
    board_row_ = 0;
    board_col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userinfo;
        break;
      }

      // optional .UserInfo userinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_black_id;
        break;
      }

      // optional int32 black_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_id_)));
          set_has_black_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_white_id;
        break;
      }

      // optional int32 white_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_id_)));
          set_has_white_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_board_row;
        break;
      }

      // optional int32 board_row = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_board_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_row_)));
          set_has_board_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_board_col;
        break;
      }

      // optional int32 board_col = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_board_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_col_)));
          set_has_board_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  // optional .UserInfo userinfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  // optional int32 black_id = 4;
  if (has_black_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->black_id(), output);
  }

  // optional int32 white_id = 5;
  if (has_white_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->white_id(), output);
  }

  // optional int32 board_row = 6;
  if (has_board_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->board_row(), output);
  }

  // optional int32 board_col = 7;
  if (has_board_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->board_col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  // optional .UserInfo userinfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  // optional int32 black_id = 4;
  if (has_black_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->black_id(), target);
  }

  // optional int32 white_id = 5;
  if (has_white_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->white_id(), target);
  }

  // optional int32 board_row = 6;
  if (has_board_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->board_row(), target);
  }

  // optional int32 board_col = 7;
  if (has_board_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->board_col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // optional .UserInfo userinfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional int32 black_id = 4;
    if (has_black_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_id());
    }

    // optional int32 white_id = 5;
    if (has_white_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_id());
    }

    // optional int32 board_row = 6;
    if (has_board_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_row());
    }

    // optional int32 board_col = 7;
    if (has_board_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRoom::MergeFrom(const ACKRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_black_id()) {
      set_black_id(from.black_id());
    }
    if (from.has_white_id()) {
      set_white_id(from.white_id());
    }
    if (from.has_board_row()) {
      set_board_row(from.board_row());
    }
    if (from.has_board_col()) {
      set_board_col(from.board_col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRoom::CopyFrom(const ACKRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKRoom::Swap(ACKRoom* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(black_id_, other->black_id_);
    std::swap(white_id_, other->white_id_);
    std::swap(board_row_, other->board_row_);
    std::swap(board_col_, other->board_col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRoom_descriptor_;
  metadata.reflection = ACKRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQCreatGame::kReqMsgFieldNumber;
const int REQCreatGame::kUserinfoPlayer1FieldNumber;
const int REQCreatGame::kPlayer1ClientidFieldNumber;
const int REQCreatGame::kUserinfoPlayer2FieldNumber;
const int REQCreatGame::kPlayer2ClientidFieldNumber;
const int REQCreatGame::kBlackIdFieldNumber;
const int REQCreatGame::kWhiteIdFieldNumber;
const int REQCreatGame::kBoardRowFieldNumber;
const int REQCreatGame::kBoardColFieldNumber;
#endif  // !_MSC_VER

REQCreatGame::REQCreatGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQCreatGame::InitAsDefaultInstance() {
  userinfo_player1_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
  userinfo_player2_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

REQCreatGame::REQCreatGame(const REQCreatGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQCreatGame::SharedCtor() {
  _cached_size_ = 0;
  req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userinfo_player1_ = NULL;
  player1_clientid_ = 0;
  userinfo_player2_ = NULL;
  player2_clientid_ = 0;
  black_id_ = 0;
  white_id_ = 0;
  board_row_ = 0;
  board_col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQCreatGame::~REQCreatGame() {
  SharedDtor();
}

void REQCreatGame::SharedDtor() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (this != default_instance_) {
    delete userinfo_player1_;
    delete userinfo_player2_;
  }
}

void REQCreatGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQCreatGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQCreatGame_descriptor_;
}

const REQCreatGame& REQCreatGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQCreatGame* REQCreatGame::default_instance_ = NULL;

REQCreatGame* REQCreatGame::New() const {
  return new REQCreatGame;
}

void REQCreatGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_msg()) {
      if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
        req_msg_->clear();
      }
    }
    if (has_userinfo_player1()) {
      if (userinfo_player1_ != NULL) userinfo_player1_->::UserInfo::Clear();
    }
    player1_clientid_ = 0;
    if (has_userinfo_player2()) {
      if (userinfo_player2_ != NULL) userinfo_player2_->::UserInfo::Clear();
    }
    player2_clientid_ = 0;
    black_id_ = 0;
    white_id_ = 0;
    board_row_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    board_col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQCreatGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes req_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo_player1;
        break;
      }

      // optional .UserInfo userinfo_player1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo_player1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo_player1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player1_clientid;
        break;
      }

      // optional int32 player1_clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player1_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player1_clientid_)));
          set_has_player1_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userinfo_player2;
        break;
      }

      // optional .UserInfo userinfo_player2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo_player2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo_player2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player2_clientid;
        break;
      }

      // optional int32 player2_clientid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player2_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player2_clientid_)));
          set_has_player2_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_black_id;
        break;
      }

      // optional int32 black_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_id_)));
          set_has_black_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_white_id;
        break;
      }

      // optional int32 white_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_id_)));
          set_has_white_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_board_row;
        break;
      }

      // optional int32 board_row = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_board_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_row_)));
          set_has_board_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_board_col;
        break;
      }

      // optional int32 board_col = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_board_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &board_col_)));
          set_has_board_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQCreatGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->req_msg(), output);
  }

  // optional .UserInfo userinfo_player1 = 2;
  if (has_userinfo_player1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo_player1(), output);
  }

  // optional int32 player1_clientid = 3;
  if (has_player1_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player1_clientid(), output);
  }

  // optional .UserInfo userinfo_player2 = 4;
  if (has_userinfo_player2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo_player2(), output);
  }

  // optional int32 player2_clientid = 5;
  if (has_player2_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player2_clientid(), output);
  }

  // optional int32 black_id = 6;
  if (has_black_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->black_id(), output);
  }

  // optional int32 white_id = 7;
  if (has_white_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->white_id(), output);
  }

  // optional int32 board_row = 8;
  if (has_board_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->board_row(), output);
  }

  // optional int32 board_col = 9;
  if (has_board_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->board_col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQCreatGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->req_msg(), target);
  }

  // optional .UserInfo userinfo_player1 = 2;
  if (has_userinfo_player1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo_player1(), target);
  }

  // optional int32 player1_clientid = 3;
  if (has_player1_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player1_clientid(), target);
  }

  // optional .UserInfo userinfo_player2 = 4;
  if (has_userinfo_player2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo_player2(), target);
  }

  // optional int32 player2_clientid = 5;
  if (has_player2_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player2_clientid(), target);
  }

  // optional int32 black_id = 6;
  if (has_black_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->black_id(), target);
  }

  // optional int32 white_id = 7;
  if (has_white_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->white_id(), target);
  }

  // optional int32 board_row = 8;
  if (has_board_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->board_row(), target);
  }

  // optional int32 board_col = 9;
  if (has_board_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->board_col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQCreatGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes req_msg = 1;
    if (has_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_msg());
    }

    // optional .UserInfo userinfo_player1 = 2;
    if (has_userinfo_player1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo_player1());
    }

    // optional int32 player1_clientid = 3;
    if (has_player1_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player1_clientid());
    }

    // optional .UserInfo userinfo_player2 = 4;
    if (has_userinfo_player2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo_player2());
    }

    // optional int32 player2_clientid = 5;
    if (has_player2_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player2_clientid());
    }

    // optional int32 black_id = 6;
    if (has_black_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_id());
    }

    // optional int32 white_id = 7;
    if (has_white_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_id());
    }

    // optional int32 board_row = 8;
    if (has_board_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_row());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 board_col = 9;
    if (has_board_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->board_col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQCreatGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQCreatGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQCreatGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQCreatGame::MergeFrom(const REQCreatGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_msg()) {
      set_req_msg(from.req_msg());
    }
    if (from.has_userinfo_player1()) {
      mutable_userinfo_player1()->::UserInfo::MergeFrom(from.userinfo_player1());
    }
    if (from.has_player1_clientid()) {
      set_player1_clientid(from.player1_clientid());
    }
    if (from.has_userinfo_player2()) {
      mutable_userinfo_player2()->::UserInfo::MergeFrom(from.userinfo_player2());
    }
    if (from.has_player2_clientid()) {
      set_player2_clientid(from.player2_clientid());
    }
    if (from.has_black_id()) {
      set_black_id(from.black_id());
    }
    if (from.has_white_id()) {
      set_white_id(from.white_id());
    }
    if (from.has_board_row()) {
      set_board_row(from.board_row());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_board_col()) {
      set_board_col(from.board_col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQCreatGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQCreatGame::CopyFrom(const REQCreatGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQCreatGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQCreatGame::Swap(REQCreatGame* other) {
  if (other != this) {
    std::swap(req_msg_, other->req_msg_);
    std::swap(userinfo_player1_, other->userinfo_player1_);
    std::swap(player1_clientid_, other->player1_clientid_);
    std::swap(userinfo_player2_, other->userinfo_player2_);
    std::swap(player2_clientid_, other->player2_clientid_);
    std::swap(black_id_, other->black_id_);
    std::swap(white_id_, other->white_id_);
    std::swap(board_row_, other->board_row_);
    std::swap(board_col_, other->board_col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQCreatGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQCreatGame_descriptor_;
  metadata.reflection = REQCreatGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKCreatGame::kCodeFieldNumber;
const int ACKCreatGame::kResultMsgFieldNumber;
const int ACKCreatGame::kRoomIdFieldNumber;
const int ACKCreatGame::kBlackIdFieldNumber;
const int ACKCreatGame::kWhiteIdFieldNumber;
#endif  // !_MSC_VER

ACKCreatGame::ACKCreatGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKCreatGame::InitAsDefaultInstance() {
}

ACKCreatGame::ACKCreatGame(const ACKCreatGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKCreatGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_id_ = 0;
  black_id_ = 0;
  white_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKCreatGame::~ACKCreatGame() {
  SharedDtor();
}

void ACKCreatGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKCreatGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKCreatGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKCreatGame_descriptor_;
}

const ACKCreatGame& ACKCreatGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKCreatGame* ACKCreatGame::default_instance_ = NULL;

ACKCreatGame* ACKCreatGame::New() const {
  return new ACKCreatGame;
}

void ACKCreatGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    room_id_ = 0;
    black_id_ = 0;
    white_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKCreatGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // required int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_black_id;
        break;
      }

      // required int32 black_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_id_)));
          set_has_black_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_white_id;
        break;
      }

      // required int32 white_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_id_)));
          set_has_white_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKCreatGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  // required int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->black_id(), output);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->white_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKCreatGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  // required int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->black_id(), target);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->white_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKCreatGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // required int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // required int32 black_id = 4;
    if (has_black_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_id());
    }

    // required int32 white_id = 5;
    if (has_white_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKCreatGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKCreatGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKCreatGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKCreatGame::MergeFrom(const ACKCreatGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_black_id()) {
      set_black_id(from.black_id());
    }
    if (from.has_white_id()) {
      set_white_id(from.white_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKCreatGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKCreatGame::CopyFrom(const ACKCreatGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKCreatGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ACKCreatGame::Swap(ACKCreatGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(room_id_, other->room_id_);
    std::swap(black_id_, other->black_id_);
    std::swap(white_id_, other->white_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKCreatGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKCreatGame_descriptor_;
  metadata.reflection = ACKCreatGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQAction::kReqMsgFieldNumber;
const int REQAction::kTableIdFieldNumber;
const int REQAction::kActionIdFieldNumber;
const int REQAction::kActionBoardRowFieldNumber;
const int REQAction::kActionBoardColFieldNumber;
#endif  // !_MSC_VER

REQAction::REQAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQAction::InitAsDefaultInstance() {
}

REQAction::REQAction(const REQAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQAction::SharedCtor() {
  _cached_size_ = 0;
  req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_id_ = 0;
  action_id_ = 0;
  action_board_row_ = 0;
  action_board_col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQAction::~REQAction() {
  SharedDtor();
}

void REQAction::SharedDtor() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (this != default_instance_) {
  }
}

void REQAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQAction_descriptor_;
}

const REQAction& REQAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQAction* REQAction::default_instance_ = NULL;

REQAction* REQAction::New() const {
  return new REQAction;
}

void REQAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_msg()) {
      if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
        req_msg_->clear();
      }
    }
    table_id_ = 0;
    action_id_ = 0;
    action_board_row_ = 0;
    action_board_col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes req_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_id;
        break;
      }

      // required int32 action_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_board_row;
        break;
      }

      // optional int32 action_board_row = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_board_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_board_row_)));
          set_has_action_board_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_action_board_col;
        break;
      }

      // optional int32 action_board_col = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_board_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_board_col_)));
          set_has_action_board_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->req_msg(), output);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  // required int32 action_id = 3;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_id(), output);
  }

  // optional int32 action_board_row = 4;
  if (has_action_board_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action_board_row(), output);
  }

  // optional int32 action_board_col = 5;
  if (has_action_board_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action_board_col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->req_msg(), target);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  // required int32 action_id = 3;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_id(), target);
  }

  // optional int32 action_board_row = 4;
  if (has_action_board_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action_board_row(), target);
  }

  // optional int32 action_board_col = 5;
  if (has_action_board_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action_board_col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes req_msg = 1;
    if (has_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_msg());
    }

    // required int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required int32 action_id = 3;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_id());
    }

    // optional int32 action_board_row = 4;
    if (has_action_board_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_board_row());
    }

    // optional int32 action_board_col = 5;
    if (has_action_board_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_board_col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQAction::MergeFrom(const REQAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_msg()) {
      set_req_msg(from.req_msg());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_action_board_row()) {
      set_action_board_row(from.action_board_row());
    }
    if (from.has_action_board_col()) {
      set_action_board_col(from.action_board_col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQAction::CopyFrom(const REQAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQAction::Swap(REQAction* other) {
  if (other != this) {
    std::swap(req_msg_, other->req_msg_);
    std::swap(table_id_, other->table_id_);
    std::swap(action_id_, other->action_id_);
    std::swap(action_board_row_, other->action_board_row_);
    std::swap(action_board_col_, other->action_board_col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQAction_descriptor_;
  metadata.reflection = REQAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKAction::kResultMsgFieldNumber;
const int ACKAction::kActionIdFieldNumber;
const int ACKAction::kActionBoardRowFieldNumber;
const int ACKAction::kActionBoardColFieldNumber;
const int ACKAction::kIsWinFieldNumber;
const int ACKAction::kWinIdFieldNumber;
const int ACKAction::kLoseIdFieldNumber;
#endif  // !_MSC_VER

ACKAction::ACKAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKAction::InitAsDefaultInstance() {
}

ACKAction::ACKAction(const ACKAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKAction::SharedCtor() {
  _cached_size_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_id_ = 0;
  action_board_row_ = 0;
  action_board_col_ = 0;
  is_win_ = false;
  win_id_ = 0;
  lose_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKAction::~ACKAction() {
  SharedDtor();
}

void ACKAction::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKAction_descriptor_;
}

const ACKAction& ACKAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKAction* ACKAction::default_instance_ = NULL;

ACKAction* ACKAction::New() const {
  return new ACKAction;
}

void ACKAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    action_id_ = 0;
    action_board_row_ = 0;
    action_board_col_ = 0;
    is_win_ = false;
    win_id_ = 0;
    lose_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes result_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_id;
        break;
      }

      // required int32 action_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_board_row;
        break;
      }

      // optional int32 action_board_row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_board_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_board_row_)));
          set_has_action_board_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_board_col;
        break;
      }

      // optional int32 action_board_col = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_board_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_board_col_)));
          set_has_action_board_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_win;
        break;
      }

      // optional bool is_win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_id;
        break;
      }

      // optional int32 win_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_id_)));
          set_has_win_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lose_id;
        break;
      }

      // optional int32 lose_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_id_)));
          set_has_lose_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes result_msg = 1;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->result_msg(), output);
  }

  // required int32 action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_id(), output);
  }

  // optional int32 action_board_row = 3;
  if (has_action_board_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_board_row(), output);
  }

  // optional int32 action_board_col = 4;
  if (has_action_board_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action_board_col(), output);
  }

  // optional bool is_win = 5;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_win(), output);
  }

  // optional int32 win_id = 6;
  if (has_win_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win_id(), output);
  }

  // optional int32 lose_id = 7;
  if (has_lose_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lose_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes result_msg = 1;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->result_msg(), target);
  }

  // required int32 action_id = 2;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_id(), target);
  }

  // optional int32 action_board_row = 3;
  if (has_action_board_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_board_row(), target);
  }

  // optional int32 action_board_col = 4;
  if (has_action_board_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action_board_col(), target);
  }

  // optional bool is_win = 5;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_win(), target);
  }

  // optional int32 win_id = 6;
  if (has_win_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win_id(), target);
  }

  // optional int32 lose_id = 7;
  if (has_lose_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lose_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes result_msg = 1;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // required int32 action_id = 2;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_id());
    }

    // optional int32 action_board_row = 3;
    if (has_action_board_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_board_row());
    }

    // optional int32 action_board_col = 4;
    if (has_action_board_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_board_col());
    }

    // optional bool is_win = 5;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional int32 win_id = 6;
    if (has_win_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_id());
    }

    // optional int32 lose_id = 7;
    if (has_lose_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKAction::MergeFrom(const ACKAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_action_board_row()) {
      set_action_board_row(from.action_board_row());
    }
    if (from.has_action_board_col()) {
      set_action_board_col(from.action_board_col());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_win_id()) {
      set_win_id(from.win_id());
    }
    if (from.has_lose_id()) {
      set_lose_id(from.lose_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKAction::CopyFrom(const ACKAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKAction::Swap(ACKAction* other) {
  if (other != this) {
    std::swap(result_msg_, other->result_msg_);
    std::swap(action_id_, other->action_id_);
    std::swap(action_board_row_, other->action_board_row_);
    std::swap(action_board_col_, other->action_board_col_);
    std::swap(is_win_, other->is_win_);
    std::swap(win_id_, other->win_id_);
    std::swap(lose_id_, other->lose_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKAction_descriptor_;
  metadata.reflection = ACKAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQForcExit::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQForcExit::REQForcExit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQForcExit::InitAsDefaultInstance() {
}

REQForcExit::REQForcExit(const REQForcExit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQForcExit::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQForcExit::~REQForcExit() {
  SharedDtor();
}

void REQForcExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQForcExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQForcExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQForcExit_descriptor_;
}

const REQForcExit& REQForcExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQForcExit* REQForcExit::default_instance_ = NULL;

REQForcExit* REQForcExit::New() const {
  return new REQForcExit;
}

void REQForcExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQForcExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQForcExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQForcExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQForcExit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQForcExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQForcExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQForcExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQForcExit::MergeFrom(const REQForcExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQForcExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQForcExit::CopyFrom(const REQForcExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQForcExit::IsInitialized() const {

  return true;
}

void REQForcExit::Swap(REQForcExit* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQForcExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQForcExit_descriptor_;
  metadata.reflection = REQForcExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQInviteFriendGame::kUserinfoFieldNumber;
const int REQInviteFriendGame::kFriendIdFieldNumber;
#endif  // !_MSC_VER

REQInviteFriendGame::REQInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQInviteFriendGame::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

REQInviteFriendGame::REQInviteFriendGame(const REQInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  friend_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQInviteFriendGame::~REQInviteFriendGame() {
  SharedDtor();
}

void REQInviteFriendGame::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void REQInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQInviteFriendGame_descriptor_;
}

const REQInviteFriendGame& REQInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQInviteFriendGame* REQInviteFriendGame::default_instance_ = NULL;

REQInviteFriendGame* REQInviteFriendGame::New() const {
  return new REQInviteFriendGame;
}

void REQInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
    friend_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserInfo userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required int32 friend_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .UserInfo userinfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // required int32 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friend_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .UserInfo userinfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // required int32 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friend_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UserInfo userinfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // required int32 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQInviteFriendGame::MergeFrom(const REQInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQInviteFriendGame::CopyFrom(const REQInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void REQInviteFriendGame::Swap(REQInviteFriendGame* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQInviteFriendGame_descriptor_;
  metadata.reflection = REQInviteFriendGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKInviteFriendGame::kCodeFieldNumber;
const int ACKInviteFriendGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKInviteFriendGame::ACKInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKInviteFriendGame::InitAsDefaultInstance() {
}

ACKInviteFriendGame::ACKInviteFriendGame(const ACKInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKInviteFriendGame::~ACKInviteFriendGame() {
  SharedDtor();
}

void ACKInviteFriendGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKInviteFriendGame_descriptor_;
}

const ACKInviteFriendGame& ACKInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKInviteFriendGame* ACKInviteFriendGame::default_instance_ = NULL;

ACKInviteFriendGame* ACKInviteFriendGame::New() const {
  return new ACKInviteFriendGame;
}

void ACKInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKInviteFriendGame::MergeFrom(const ACKInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKInviteFriendGame::CopyFrom(const ACKInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKInviteFriendGame::Swap(ACKInviteFriendGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKInviteFriendGame_descriptor_;
  metadata.reflection = ACKInviteFriendGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQAskInviteFriendGame::kFriendInfoFieldNumber;
const int REQAskInviteFriendGame::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQAskInviteFriendGame::REQAskInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQAskInviteFriendGame::InitAsDefaultInstance() {
  friend_info_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

REQAskInviteFriendGame::REQAskInviteFriendGame(const REQAskInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQAskInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  friend_info_ = NULL;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQAskInviteFriendGame::~REQAskInviteFriendGame() {
  SharedDtor();
}

void REQAskInviteFriendGame::SharedDtor() {
  if (this != default_instance_) {
    delete friend_info_;
  }
}

void REQAskInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQAskInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQAskInviteFriendGame_descriptor_;
}

const REQAskInviteFriendGame& REQAskInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQAskInviteFriendGame* REQAskInviteFriendGame::default_instance_ = NULL;

REQAskInviteFriendGame* REQAskInviteFriendGame::New() const {
  return new REQAskInviteFriendGame;
}

void REQAskInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friend_info()) {
      if (friend_info_ != NULL) friend_info_->::UserInfo::Clear();
    }
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQAskInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserInfo friend_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQAskInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .UserInfo friend_info = 1;
  if (has_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_info(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQAskInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .UserInfo friend_info = 1;
  if (has_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_info(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQAskInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UserInfo friend_info = 1;
    if (has_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_info());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQAskInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQAskInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQAskInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQAskInviteFriendGame::MergeFrom(const REQAskInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_info()) {
      mutable_friend_info()->::UserInfo::MergeFrom(from.friend_info());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQAskInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQAskInviteFriendGame::CopyFrom(const REQAskInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQAskInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void REQAskInviteFriendGame::Swap(REQAskInviteFriendGame* other) {
  if (other != this) {
    std::swap(friend_info_, other->friend_info_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQAskInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQAskInviteFriendGame_descriptor_;
  metadata.reflection = REQAskInviteFriendGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKAskInviteFriendGame::kIsAgreeInviteGameFieldNumber;
const int ACKAskInviteFriendGame::kUserinfoFieldNumber;
const int ACKAskInviteFriendGame::kFriendIdFieldNumber;
const int ACKAskInviteFriendGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKAskInviteFriendGame::ACKAskInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKAskInviteFriendGame::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKAskInviteFriendGame::ACKAskInviteFriendGame(const ACKAskInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKAskInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  is_agree_invite_game_ = false;
  userinfo_ = NULL;
  friend_id_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKAskInviteFriendGame::~ACKAskInviteFriendGame() {
  SharedDtor();
}

void ACKAskInviteFriendGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void ACKAskInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKAskInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKAskInviteFriendGame_descriptor_;
}

const ACKAskInviteFriendGame& ACKAskInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKAskInviteFriendGame* ACKAskInviteFriendGame::default_instance_ = NULL;

ACKAskInviteFriendGame* ACKAskInviteFriendGame::New() const {
  return new ACKAskInviteFriendGame;
}

void ACKAskInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_agree_invite_game_ = false;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
    friend_id_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKAskInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_agree_invite_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_invite_game_)));
          set_has_is_agree_invite_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // optional .UserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friend_id;
        break;
      }

      // required int32 friend_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_msg;
        break;
      }

      // optional bytes result_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKAskInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_agree_invite_game = 1;
  if (has_is_agree_invite_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_agree_invite_game(), output);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  // required int32 friend_id = 3;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->friend_id(), output);
  }

  // optional bytes result_msg = 4;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKAskInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_agree_invite_game = 1;
  if (has_is_agree_invite_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_agree_invite_game(), target);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  // required int32 friend_id = 3;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->friend_id(), target);
  }

  // optional bytes result_msg = 4;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKAskInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_agree_invite_game = 1;
    if (has_is_agree_invite_game()) {
      total_size += 1 + 1;
    }

    // optional .UserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // required int32 friend_id = 3;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_id());
    }

    // optional bytes result_msg = 4;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKAskInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKAskInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKAskInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKAskInviteFriendGame::MergeFrom(const ACKAskInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_agree_invite_game()) {
      set_is_agree_invite_game(from.is_agree_invite_game());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKAskInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKAskInviteFriendGame::CopyFrom(const ACKAskInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKAskInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void ACKAskInviteFriendGame::Swap(ACKAskInviteFriendGame* other) {
  if (other != this) {
    std::swap(is_agree_invite_game_, other->is_agree_invite_game_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKAskInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKAskInviteFriendGame_descriptor_;
  metadata.reflection = ACKAskInviteFriendGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRefuseInviteFriendGame::kCodeFieldNumber;
const int ACKRefuseInviteFriendGame::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKRefuseInviteFriendGame::ACKRefuseInviteFriendGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRefuseInviteFriendGame::InitAsDefaultInstance() {
}

ACKRefuseInviteFriendGame::ACKRefuseInviteFriendGame(const ACKRefuseInviteFriendGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRefuseInviteFriendGame::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRefuseInviteFriendGame::~ACKRefuseInviteFriendGame() {
  SharedDtor();
}

void ACKRefuseInviteFriendGame::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKRefuseInviteFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRefuseInviteFriendGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRefuseInviteFriendGame_descriptor_;
}

const ACKRefuseInviteFriendGame& ACKRefuseInviteFriendGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKRefuseInviteFriendGame* ACKRefuseInviteFriendGame::default_instance_ = NULL;

ACKRefuseInviteFriendGame* ACKRefuseInviteFriendGame::New() const {
  return new ACKRefuseInviteFriendGame;
}

void ACKRefuseInviteFriendGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRefuseInviteFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRefuseInviteFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRefuseInviteFriendGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRefuseInviteFriendGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRefuseInviteFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRefuseInviteFriendGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRefuseInviteFriendGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRefuseInviteFriendGame::MergeFrom(const ACKRefuseInviteFriendGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRefuseInviteFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRefuseInviteFriendGame::CopyFrom(const ACKRefuseInviteFriendGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRefuseInviteFriendGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKRefuseInviteFriendGame::Swap(ACKRefuseInviteFriendGame* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRefuseInviteFriendGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRefuseInviteFriendGame_descriptor_;
  metadata.reflection = ACKRefuseInviteFriendGame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
