// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wzqProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wzqProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* REQHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_Prop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_Prop_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQGetUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQGetUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKGetUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKGetUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQEditHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQEditHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKEditHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKEditHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQEditUserName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQEditUserName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKEditUserName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKEditUserName_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQGetRandingList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQGetRandingList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKGetRandingList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKGetRandingList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQGameOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQGameOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQGetGameHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQGetGameHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKGetGameHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKGetGameHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQGetFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQGetFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKGetFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKGetFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQRequestFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQRequestFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQIsAgreeFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQIsAgreeFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKIsAgreeFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKIsAgreeFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKUpdateFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKUpdateFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQWaitFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQWaitFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKWaitFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKWaitFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQDeleteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQDeleteFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKDeleteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKDeleteFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKBuy_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wzqProtocol_2eproto() {
  protobuf_AddDesc_wzqProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wzqProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  REQHold_descriptor_ = file->message_type(0);
  static const int REQHold_offsets_[1] = {
  };
  REQHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQHold_descriptor_,
      REQHold::default_instance_,
      REQHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQHold));
  ACKHold_descriptor_ = file->message_type(1);
  static const int ACKHold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, result_id_),
  };
  ACKHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKHold_descriptor_,
      ACKHold::default_instance_,
      ACKHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKHold));
  MsgPackage_descriptor_ = file->message_type(2);
  static const int MsgPackage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, clientid_),
  };
  MsgPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPackage_descriptor_,
      MsgPackage::default_instance_,
      MsgPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPackage));
  REQRegister_descriptor_ = file->message_type(3);
  static const int REQRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, passwd_),
  };
  REQRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQRegister_descriptor_,
      REQRegister::default_instance_,
      REQRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQRegister));
  ACKRegister_descriptor_ = file->message_type(4);
  static const int ACKRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, result_),
  };
  ACKRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRegister_descriptor_,
      ACKRegister::default_instance_,
      ACKRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRegister));
  REQLogin_descriptor_ = file->message_type(5);
  static const int REQLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLogin, passwd_),
  };
  REQLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQLogin_descriptor_,
      REQLogin::default_instance_,
      REQLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQLogin));
  ACKLogin_descriptor_ = file->message_type(6);
  static const int ACKLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLogin, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLogin, userinfo_),
  };
  ACKLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKLogin_descriptor_,
      ACKLogin::default_instance_,
      ACKLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKLogin));
  UserInfo_descriptor_ = file->message_type(7);
  static const int UserInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, wintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, losetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, xp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, account_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  UserInfo_Prop_descriptor_ = UserInfo_descriptor_->nested_type(0);
  static const int UserInfo_Prop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Prop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Prop, quantity_),
  };
  UserInfo_Prop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_Prop_descriptor_,
      UserInfo_Prop::default_instance_,
      UserInfo_Prop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Prop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Prop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo_Prop));
  REQGetUserInfo_descriptor_ = file->message_type(8);
  static const int REQGetUserInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetUserInfo, user_id_),
  };
  REQGetUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQGetUserInfo_descriptor_,
      REQGetUserInfo::default_instance_,
      REQGetUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQGetUserInfo));
  ACKGetUserInfo_descriptor_ = file->message_type(9);
  static const int ACKGetUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetUserInfo, result_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetUserInfo, userinfo_),
  };
  ACKGetUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKGetUserInfo_descriptor_,
      ACKGetUserInfo::default_instance_,
      ACKGetUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKGetUserInfo));
  REQEditHead_descriptor_ = file->message_type(10);
  static const int REQEditHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditHead, head_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditHead, user_id_),
  };
  REQEditHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQEditHead_descriptor_,
      REQEditHead::default_instance_,
      REQEditHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQEditHead));
  ACKEditHead_descriptor_ = file->message_type(11);
  static const int ACKEditHead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditHead, code_),
  };
  ACKEditHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKEditHead_descriptor_,
      ACKEditHead::default_instance_,
      ACKEditHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKEditHead));
  REQEditUserName_descriptor_ = file->message_type(12);
  static const int REQEditUserName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditUserName, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditUserName, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditUserName, item_id_),
  };
  REQEditUserName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQEditUserName_descriptor_,
      REQEditUserName::default_instance_,
      REQEditUserName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditUserName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQEditUserName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQEditUserName));
  ACKEditUserName_descriptor_ = file->message_type(13);
  static const int ACKEditUserName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditUserName, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditUserName, username_),
  };
  ACKEditUserName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKEditUserName_descriptor_,
      ACKEditUserName::default_instance_,
      ACKEditUserName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditUserName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKEditUserName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKEditUserName));
  REQGetRandingList_descriptor_ = file->message_type(14);
  static const int REQGetRandingList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetRandingList, req_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetRandingList, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetRandingList, offset_),
  };
  REQGetRandingList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQGetRandingList_descriptor_,
      REQGetRandingList::default_instance_,
      REQGetRandingList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetRandingList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetRandingList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQGetRandingList));
  ACKGetRandingList_descriptor_ = file->message_type(15);
  static const int ACKGetRandingList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetRandingList, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetRandingList, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetRandingList, userinfo_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetRandingList, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetRandingList, offset_),
  };
  ACKGetRandingList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKGetRandingList_descriptor_,
      ACKGetRandingList::default_instance_,
      ACKGetRandingList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetRandingList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetRandingList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKGetRandingList));
  Position_descriptor_ = file->message_type(16);
  static const int Position_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, col_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  REQGameOver_descriptor_ = file->message_type(17);
  static const int REQGameOver_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, winner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, loser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, black_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, white_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, is_no_winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, is_force_exit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, black_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, white_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, conis_),
  };
  REQGameOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQGameOver_descriptor_,
      REQGameOver::default_instance_,
      REQGameOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGameOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQGameOver));
  REQGetGameHistory_descriptor_ = file->message_type(18);
  static const int REQGetGameHistory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetGameHistory, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetGameHistory, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetGameHistory, offset_),
  };
  REQGetGameHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQGetGameHistory_descriptor_,
      REQGetGameHistory::default_instance_,
      REQGetGameHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetGameHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetGameHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQGetGameHistory));
  GameInfo_descriptor_ = file->message_type(19);
  static const int GameInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, enemy_userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, winner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, loser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, black_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, white_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_no_winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_force_exit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, black_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, white_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, game_time_),
  };
  GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfo));
  ACKGetGameHistory_descriptor_ = file->message_type(20);
  static const int ACKGetGameHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetGameHistory, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetGameHistory, game_info_list_),
  };
  ACKGetGameHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKGetGameHistory_descriptor_,
      ACKGetGameHistory::default_instance_,
      ACKGetGameHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetGameHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetGameHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKGetGameHistory));
  REQGetFriendInfo_descriptor_ = file->message_type(21);
  static const int REQGetFriendInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetFriendInfo, friend_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetFriendInfo, user_id_),
  };
  REQGetFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQGetFriendInfo_descriptor_,
      REQGetFriendInfo::default_instance_,
      REQGetFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQGetFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQGetFriendInfo));
  ACKGetFriendInfo_descriptor_ = file->message_type(22);
  static const int ACKGetFriendInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetFriendInfo, friendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetFriendInfo, is_my_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetFriendInfo, is_exist_),
  };
  ACKGetFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKGetFriendInfo_descriptor_,
      ACKGetFriendInfo::default_instance_,
      ACKGetFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKGetFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKGetFriendInfo));
  REQAddFriend_descriptor_ = file->message_type(23);
  static const int REQAddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAddFriend, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAddFriend, user_id_),
  };
  REQAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQAddFriend_descriptor_,
      REQAddFriend::default_instance_,
      REQAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQAddFriend));
  ACKAddFriend_descriptor_ = file->message_type(24);
  static const int ACKAddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAddFriend, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAddFriend, result_msg_),
  };
  ACKAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKAddFriend_descriptor_,
      ACKAddFriend::default_instance_,
      ACKAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKAddFriend));
  REQRequestFriend_descriptor_ = file->message_type(25);
  static const int REQRequestFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRequestFriend, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRequestFriend, user_id_),
  };
  REQRequestFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQRequestFriend_descriptor_,
      REQRequestFriend::default_instance_,
      REQRequestFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRequestFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRequestFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQRequestFriend));
  REQIsAgreeFriend_descriptor_ = file->message_type(26);
  static const int REQIsAgreeFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQIsAgreeFriend, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQIsAgreeFriend, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQIsAgreeFriend, is_agree_),
  };
  REQIsAgreeFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQIsAgreeFriend_descriptor_,
      REQIsAgreeFriend::default_instance_,
      REQIsAgreeFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQIsAgreeFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQIsAgreeFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQIsAgreeFriend));
  ACKIsAgreeFriend_descriptor_ = file->message_type(27);
  static const int ACKIsAgreeFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKIsAgreeFriend, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKIsAgreeFriend, result_msg_),
  };
  ACKIsAgreeFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKIsAgreeFriend_descriptor_,
      ACKIsAgreeFriend::default_instance_,
      ACKIsAgreeFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKIsAgreeFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKIsAgreeFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKIsAgreeFriend));
  ACKUpdateFriend_descriptor_ = file->message_type(28);
  static const int ACKUpdateFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUpdateFriend, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUpdateFriend, firendinfo_),
  };
  ACKUpdateFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKUpdateFriend_descriptor_,
      ACKUpdateFriend::default_instance_,
      ACKUpdateFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUpdateFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUpdateFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKUpdateFriend));
  REQFriendsList_descriptor_ = file->message_type(29);
  static const int REQFriendsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQFriendsList, user_id_),
  };
  REQFriendsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQFriendsList_descriptor_,
      REQFriendsList::default_instance_,
      REQFriendsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQFriendsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQFriendsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQFriendsList));
  ACKFriendsList_descriptor_ = file->message_type(30);
  static const int ACKFriendsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKFriendsList, firendinfo_),
  };
  ACKFriendsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKFriendsList_descriptor_,
      ACKFriendsList::default_instance_,
      ACKFriendsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKFriendsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKFriendsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKFriendsList));
  REQWaitFriendsList_descriptor_ = file->message_type(31);
  static const int REQWaitFriendsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQWaitFriendsList, user_id_),
  };
  REQWaitFriendsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQWaitFriendsList_descriptor_,
      REQWaitFriendsList::default_instance_,
      REQWaitFriendsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQWaitFriendsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQWaitFriendsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQWaitFriendsList));
  ACKWaitFriendsList_descriptor_ = file->message_type(32);
  static const int ACKWaitFriendsList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKWaitFriendsList, firendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKWaitFriendsList, times_),
  };
  ACKWaitFriendsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKWaitFriendsList_descriptor_,
      ACKWaitFriendsList::default_instance_,
      ACKWaitFriendsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKWaitFriendsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKWaitFriendsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKWaitFriendsList));
  REQDeleteFriend_descriptor_ = file->message_type(33);
  static const int REQDeleteFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQDeleteFriend, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQDeleteFriend, user_id_),
  };
  REQDeleteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQDeleteFriend_descriptor_,
      REQDeleteFriend::default_instance_,
      REQDeleteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQDeleteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQDeleteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQDeleteFriend));
  ACKDeleteFriend_descriptor_ = file->message_type(34);
  static const int ACKDeleteFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKDeleteFriend, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKDeleteFriend, result_msg_),
  };
  ACKDeleteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKDeleteFriend_descriptor_,
      ACKDeleteFriend::default_instance_,
      ACKDeleteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKDeleteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKDeleteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKDeleteFriend));
  REQBuy_descriptor_ = file->message_type(35);
  static const int REQBuy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQBuy, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQBuy, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQBuy, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQBuy, num_),
  };
  REQBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQBuy_descriptor_,
      REQBuy::default_instance_,
      REQBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQBuy));
  ACKBuy_descriptor_ = file->message_type(36);
  static const int ACKBuy_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKBuy, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKBuy, result_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKBuy, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKBuy, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKBuy, num_),
  };
  ACKBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKBuy_descriptor_,
      ACKBuy::default_instance_,
      ACKBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKBuy));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wzqProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQHold_descriptor_, &REQHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKHold_descriptor_, &ACKHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPackage_descriptor_, &MsgPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQRegister_descriptor_, &REQRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRegister_descriptor_, &ACKRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQLogin_descriptor_, &REQLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKLogin_descriptor_, &ACKLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_Prop_descriptor_, &UserInfo_Prop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQGetUserInfo_descriptor_, &REQGetUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKGetUserInfo_descriptor_, &ACKGetUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQEditHead_descriptor_, &REQEditHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKEditHead_descriptor_, &ACKEditHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQEditUserName_descriptor_, &REQEditUserName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKEditUserName_descriptor_, &ACKEditUserName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQGetRandingList_descriptor_, &REQGetRandingList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKGetRandingList_descriptor_, &ACKGetRandingList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQGameOver_descriptor_, &REQGameOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQGetGameHistory_descriptor_, &REQGetGameHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKGetGameHistory_descriptor_, &ACKGetGameHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQGetFriendInfo_descriptor_, &REQGetFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKGetFriendInfo_descriptor_, &ACKGetFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQAddFriend_descriptor_, &REQAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKAddFriend_descriptor_, &ACKAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQRequestFriend_descriptor_, &REQRequestFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQIsAgreeFriend_descriptor_, &REQIsAgreeFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKIsAgreeFriend_descriptor_, &ACKIsAgreeFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKUpdateFriend_descriptor_, &ACKUpdateFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQFriendsList_descriptor_, &REQFriendsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKFriendsList_descriptor_, &ACKFriendsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQWaitFriendsList_descriptor_, &REQWaitFriendsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKWaitFriendsList_descriptor_, &ACKWaitFriendsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQDeleteFriend_descriptor_, &REQDeleteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKDeleteFriend_descriptor_, &ACKDeleteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQBuy_descriptor_, &REQBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKBuy_descriptor_, &ACKBuy::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wzqProtocol_2eproto() {
  delete REQHold::default_instance_;
  delete REQHold_reflection_;
  delete ACKHold::default_instance_;
  delete ACKHold_reflection_;
  delete MsgPackage::default_instance_;
  delete MsgPackage_reflection_;
  delete REQRegister::default_instance_;
  delete REQRegister_reflection_;
  delete ACKRegister::default_instance_;
  delete ACKRegister_reflection_;
  delete REQLogin::default_instance_;
  delete REQLogin_reflection_;
  delete ACKLogin::default_instance_;
  delete ACKLogin_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete UserInfo_Prop::default_instance_;
  delete UserInfo_Prop_reflection_;
  delete REQGetUserInfo::default_instance_;
  delete REQGetUserInfo_reflection_;
  delete ACKGetUserInfo::default_instance_;
  delete ACKGetUserInfo_reflection_;
  delete REQEditHead::default_instance_;
  delete REQEditHead_reflection_;
  delete ACKEditHead::default_instance_;
  delete ACKEditHead_reflection_;
  delete REQEditUserName::default_instance_;
  delete REQEditUserName_reflection_;
  delete ACKEditUserName::default_instance_;
  delete ACKEditUserName_reflection_;
  delete REQGetRandingList::default_instance_;
  delete REQGetRandingList_reflection_;
  delete ACKGetRandingList::default_instance_;
  delete ACKGetRandingList_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete REQGameOver::default_instance_;
  delete REQGameOver_reflection_;
  delete REQGetGameHistory::default_instance_;
  delete REQGetGameHistory_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete ACKGetGameHistory::default_instance_;
  delete ACKGetGameHistory_reflection_;
  delete REQGetFriendInfo::default_instance_;
  delete REQGetFriendInfo_reflection_;
  delete ACKGetFriendInfo::default_instance_;
  delete ACKGetFriendInfo_reflection_;
  delete REQAddFriend::default_instance_;
  delete REQAddFriend_reflection_;
  delete ACKAddFriend::default_instance_;
  delete ACKAddFriend_reflection_;
  delete REQRequestFriend::default_instance_;
  delete REQRequestFriend_reflection_;
  delete REQIsAgreeFriend::default_instance_;
  delete REQIsAgreeFriend_reflection_;
  delete ACKIsAgreeFriend::default_instance_;
  delete ACKIsAgreeFriend_reflection_;
  delete ACKUpdateFriend::default_instance_;
  delete ACKUpdateFriend_reflection_;
  delete REQFriendsList::default_instance_;
  delete REQFriendsList_reflection_;
  delete ACKFriendsList::default_instance_;
  delete ACKFriendsList_reflection_;
  delete REQWaitFriendsList::default_instance_;
  delete REQWaitFriendsList_reflection_;
  delete ACKWaitFriendsList::default_instance_;
  delete ACKWaitFriendsList_reflection_;
  delete REQDeleteFriend::default_instance_;
  delete REQDeleteFriend_reflection_;
  delete ACKDeleteFriend::default_instance_;
  delete ACKDeleteFriend_reflection_;
  delete REQBuy::default_instance_;
  delete REQBuy_reflection_;
  delete ACKBuy::default_instance_;
  delete ACKBuy_reflection_;
}

void protobuf_AddDesc_wzqProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021wzqProtocol.proto\"\t\n\007REQHold\"\034\n\007ACKHol"
    "d\022\021\n\tresult_id\030\001 \001(\005\"i\n\nMsgPackage\022\016\n\006ms"
    "g_id\030\001 \001(\003\022\016\n\006seq_id\030\002 \001(\003\022\017\n\007user_id\030\003 "
    "\001(\003\022\013\n\003msg\030\004 \001(\014\022\013\n\003src\030\005 \001(\014\022\020\n\010clienti"
    "d\030\006 \001(\003\".\n\013REQRegister\022\017\n\007account\030\001 \001(\014\022"
    "\016\n\006passwd\030\002 \001(\014\"+\n\013ACKRegister\022\014\n\004code\030\001"
    " \001(\005\022\016\n\006result\030\002 \001(\014\"+\n\010REQLogin\022\017\n\007acco"
    "unt\030\001 \001(\014\022\016\n\006passwd\030\002 \001(\014\"5\n\010ACKLogin\022\014\n"
    "\004code\030\001 \001(\005\022\033\n\010userinfo\030\002 \001(\0132\t.UserInfo"
    "\"\200\002\n\010UserInfo\022\n\n\002id\030\001 \001(\005\022\020\n\010username\030\002 "
    "\001(\014\022\020\n\010wintimes\030\003 \001(\005\022\021\n\tlosetimes\030\004 \001(\005"
    "\022\r\n\005score\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\n\n\002xp\030\007 \001"
    "(\005\022\017\n\007head_id\030\010 \001(\005\022\021\n\tis_online\030\t \001(\010\022\r"
    "\n\005coins\030\n \001(\005\022\035\n\005props\030\013 \003(\0132\016.UserInfo."
    "Prop\022\017\n\007account\030\014 \001(\014\032$\n\004Prop\022\n\n\002id\030\001 \001("
    "\005\022\020\n\010quantity\030\002 \001(\005\"!\n\016REQGetUserInfo\022\017\n"
    "\007user_id\030\001 \002(\005\"@\n\016ACKGetUserInfo\022\021\n\tresu"
    "lt_id\030\001 \002(\005\022\033\n\010userinfo\030\002 \002(\0132\t.UserInfo"
    "\"0\n\013REQEditHead\022\020\n\010head_num\030\001 \001(\005\022\017\n\007use"
    "r_id\030\002 \001(\005\"\033\n\013ACKEditHead\022\014\n\004code\030\001 \001(\005\""
    "E\n\017REQEditUserName\022\020\n\010username\030\001 \002(\014\022\017\n\007"
    "user_id\030\002 \002(\005\022\017\n\007item_id\030\003 \001(\005\"1\n\017ACKEdi"
    "tUserName\022\014\n\004code\030\001 \002(\005\022\020\n\010username\030\002 \002("
    "\014\"C\n\021REQGetRandingList\022\017\n\007req_msg\030\001 \002(\014\022"
    "\r\n\005limit\030\002 \001(\005\022\016\n\006offset\030\003 \001(\005\"v\n\021ACKGet"
    "RandingList\022\014\n\004code\030\001 \002(\005\022\022\n\nresult_msg\030"
    "\002 \002(\014\022 \n\ruserinfo_list\030\003 \003(\0132\t.UserInfo\022"
    "\r\n\005limit\030\004 \001(\005\022\016\n\006offset\030\005 \001(\005\"$\n\010Positi"
    "on\022\013\n\003row\030\001 \002(\005\022\013\n\003col\030\002 \002(\005\"\351\001\n\013REQGame"
    "Over\022\021\n\twinner_id\030\001 \001(\005\022\020\n\010loser_id\030\002 \001("
    "\005\022\r\n\005score\030\003 \001(\005\022\020\n\010black_id\030\004 \002(\005\022\020\n\010wh"
    "ite_id\030\005 \002(\005\022\024\n\014is_no_winner\030\006 \002(\010\022\025\n\ris"
    "_force_exit\030\007 \002(\010\022\"\n\017black_positions\030\010 \003"
    "(\0132\t.Position\022\"\n\017white_positions\030\t \003(\0132\t"
    ".Position\022\r\n\005conis\030\n \002(\005\"E\n\021REQGetGameHi"
    "story\022\021\n\tplayer_id\030\001 \002(\005\022\r\n\005limit\030\002 \002(\005\022"
    "\016\n\006offset\030\003 \002(\005\"\236\002\n\010GameInfo\022!\n\016enemy_us"
    "erinfo\030\001 \002(\0132\t.UserInfo\022\017\n\007game_id\030\002 \002(\005"
    "\022\021\n\twinner_id\030\003 \002(\005\022\020\n\010loser_id\030\004 \002(\005\022\r\n"
    "\005score\030\005 \002(\005\022\020\n\010black_id\030\006 \002(\005\022\020\n\010white_"
    "id\030\007 \002(\005\022\024\n\014is_no_winner\030\010 \002(\010\022\025\n\ris_for"
    "ce_exit\030\t \002(\010\022\"\n\017black_positions\030\n \003(\0132\t"
    ".Position\022\"\n\017white_positions\030\013 \003(\0132\t.Pos"
    "ition\022\021\n\tgame_time\030\014 \002(\014\"I\n\021ACKGetGameHi"
    "story\022\021\n\tplayer_id\030\001 \002(\005\022!\n\016game_info_li"
    "st\030\002 \003(\0132\t.GameInfo\"8\n\020REQGetFriendInfo\022"
    "\023\n\013friend_name\030\001 \002(\014\022\017\n\007user_id\030\002 \002(\005\"Y\n"
    "\020ACKGetFriendInfo\022\035\n\nfriendinfo\030\001 \002(\0132\t."
    "UserInfo\022\024\n\014is_my_friend\030\002 \002(\010\022\020\n\010is_exi"
    "st\030\003 \002(\010\"2\n\014REQAddFriend\022\021\n\tfriend_id\030\001 "
    "\002(\005\022\017\n\007user_id\030\002 \002(\005\"0\n\014ACKAddFriend\022\014\n\004"
    "code\030\001 \002(\005\022\022\n\nresult_msg\030\002 \001(\014\"0\n\020REQReq"
    "uestFriend\022\013\n\003num\030\001 \002(\005\022\017\n\007user_id\030\002 \002(\005"
    "\"H\n\020REQIsAgreeFriend\022\017\n\007user_id\030\001 \002(\005\022\021\n"
    "\tfriend_id\030\002 \002(\005\022\020\n\010is_agree\030\003 \002(\010\"4\n\020AC"
    "KIsAgreeFriend\022\014\n\004code\030\001 \002(\005\022\022\n\nresult_m"
    "sg\030\002 \002(\014\"A\n\017ACKUpdateFriend\022\017\n\007user_id\030\001"
    " \002(\005\022\035\n\nfirendinfo\030\002 \002(\0132\t.UserInfo\"!\n\016R"
    "EQFriendsList\022\017\n\007user_id\030\001 \002(\005\"/\n\016ACKFri"
    "endsList\022\035\n\nfirendinfo\030\001 \003(\0132\t.UserInfo\""
    "%\n\022REQWaitFriendsList\022\017\n\007user_id\030\001 \002(\005\"B"
    "\n\022ACKWaitFriendsList\022\035\n\nfirendinfo\030\001 \003(\013"
    "2\t.UserInfo\022\r\n\005times\030\002 \003(\014\"5\n\017REQDeleteF"
    "riend\022\021\n\tfriend_id\030\001 \002(\005\022\017\n\007user_id\030\002 \002("
    "\005\"3\n\017ACKDeleteFriend\022\014\n\004code\030\001 \002(\005\022\022\n\nre"
    "sult_msg\030\002 \001(\014\"F\n\006REQBuy\022\017\n\007user_id\030\001 \002("
    "\005\022\017\n\007item_id\030\002 \002(\005\022\r\n\005price\030\003 \002(\005\022\013\n\003num"
    "\030\004 \002(\005\"W\n\006ACKBuy\022\014\n\004code\030\001 \002(\005\022\022\n\nresult"
    "_msg\030\002 \002(\014\022\017\n\007item_id\030\003 \001(\005\022\r\n\005price\030\004 \001"
    "(\005\022\013\n\003num\030\005 \001(\005", 2775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wzqProtocol.proto", &protobuf_RegisterTypes);
  REQHold::default_instance_ = new REQHold();
  ACKHold::default_instance_ = new ACKHold();
  MsgPackage::default_instance_ = new MsgPackage();
  REQRegister::default_instance_ = new REQRegister();
  ACKRegister::default_instance_ = new ACKRegister();
  REQLogin::default_instance_ = new REQLogin();
  ACKLogin::default_instance_ = new ACKLogin();
  UserInfo::default_instance_ = new UserInfo();
  UserInfo_Prop::default_instance_ = new UserInfo_Prop();
  REQGetUserInfo::default_instance_ = new REQGetUserInfo();
  ACKGetUserInfo::default_instance_ = new ACKGetUserInfo();
  REQEditHead::default_instance_ = new REQEditHead();
  ACKEditHead::default_instance_ = new ACKEditHead();
  REQEditUserName::default_instance_ = new REQEditUserName();
  ACKEditUserName::default_instance_ = new ACKEditUserName();
  REQGetRandingList::default_instance_ = new REQGetRandingList();
  ACKGetRandingList::default_instance_ = new ACKGetRandingList();
  Position::default_instance_ = new Position();
  REQGameOver::default_instance_ = new REQGameOver();
  REQGetGameHistory::default_instance_ = new REQGetGameHistory();
  GameInfo::default_instance_ = new GameInfo();
  ACKGetGameHistory::default_instance_ = new ACKGetGameHistory();
  REQGetFriendInfo::default_instance_ = new REQGetFriendInfo();
  ACKGetFriendInfo::default_instance_ = new ACKGetFriendInfo();
  REQAddFriend::default_instance_ = new REQAddFriend();
  ACKAddFriend::default_instance_ = new ACKAddFriend();
  REQRequestFriend::default_instance_ = new REQRequestFriend();
  REQIsAgreeFriend::default_instance_ = new REQIsAgreeFriend();
  ACKIsAgreeFriend::default_instance_ = new ACKIsAgreeFriend();
  ACKUpdateFriend::default_instance_ = new ACKUpdateFriend();
  REQFriendsList::default_instance_ = new REQFriendsList();
  ACKFriendsList::default_instance_ = new ACKFriendsList();
  REQWaitFriendsList::default_instance_ = new REQWaitFriendsList();
  ACKWaitFriendsList::default_instance_ = new ACKWaitFriendsList();
  REQDeleteFriend::default_instance_ = new REQDeleteFriend();
  ACKDeleteFriend::default_instance_ = new ACKDeleteFriend();
  REQBuy::default_instance_ = new REQBuy();
  ACKBuy::default_instance_ = new ACKBuy();
  REQHold::default_instance_->InitAsDefaultInstance();
  ACKHold::default_instance_->InitAsDefaultInstance();
  MsgPackage::default_instance_->InitAsDefaultInstance();
  REQRegister::default_instance_->InitAsDefaultInstance();
  ACKRegister::default_instance_->InitAsDefaultInstance();
  REQLogin::default_instance_->InitAsDefaultInstance();
  ACKLogin::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserInfo_Prop::default_instance_->InitAsDefaultInstance();
  REQGetUserInfo::default_instance_->InitAsDefaultInstance();
  ACKGetUserInfo::default_instance_->InitAsDefaultInstance();
  REQEditHead::default_instance_->InitAsDefaultInstance();
  ACKEditHead::default_instance_->InitAsDefaultInstance();
  REQEditUserName::default_instance_->InitAsDefaultInstance();
  ACKEditUserName::default_instance_->InitAsDefaultInstance();
  REQGetRandingList::default_instance_->InitAsDefaultInstance();
  ACKGetRandingList::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  REQGameOver::default_instance_->InitAsDefaultInstance();
  REQGetGameHistory::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  ACKGetGameHistory::default_instance_->InitAsDefaultInstance();
  REQGetFriendInfo::default_instance_->InitAsDefaultInstance();
  ACKGetFriendInfo::default_instance_->InitAsDefaultInstance();
  REQAddFriend::default_instance_->InitAsDefaultInstance();
  ACKAddFriend::default_instance_->InitAsDefaultInstance();
  REQRequestFriend::default_instance_->InitAsDefaultInstance();
  REQIsAgreeFriend::default_instance_->InitAsDefaultInstance();
  ACKIsAgreeFriend::default_instance_->InitAsDefaultInstance();
  ACKUpdateFriend::default_instance_->InitAsDefaultInstance();
  REQFriendsList::default_instance_->InitAsDefaultInstance();
  ACKFriendsList::default_instance_->InitAsDefaultInstance();
  REQWaitFriendsList::default_instance_->InitAsDefaultInstance();
  ACKWaitFriendsList::default_instance_->InitAsDefaultInstance();
  REQDeleteFriend::default_instance_->InitAsDefaultInstance();
  ACKDeleteFriend::default_instance_->InitAsDefaultInstance();
  REQBuy::default_instance_->InitAsDefaultInstance();
  ACKBuy::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wzqProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wzqProtocol_2eproto {
  StaticDescriptorInitializer_wzqProtocol_2eproto() {
    protobuf_AddDesc_wzqProtocol_2eproto();
  }
} static_descriptor_initializer_wzqProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

REQHold::REQHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQHold::InitAsDefaultInstance() {
}

REQHold::REQHold(const REQHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQHold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQHold::~REQHold() {
  SharedDtor();
}

void REQHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQHold_descriptor_;
}

const REQHold& REQHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQHold* REQHold::default_instance_ = NULL;

REQHold* REQHold::New() const {
  return new REQHold;
}

void REQHold::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void REQHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQHold::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQHold::MergeFrom(const REQHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQHold::CopyFrom(const REQHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQHold::IsInitialized() const {

  return true;
}

void REQHold::Swap(REQHold* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQHold_descriptor_;
  metadata.reflection = REQHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKHold::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKHold::ACKHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKHold::InitAsDefaultInstance() {
}

ACKHold::ACKHold(const ACKHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKHold::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKHold::~ACKHold() {
  SharedDtor();
}

void ACKHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKHold_descriptor_;
}

const ACKHold& ACKHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKHold* ACKHold::default_instance_ = NULL;

ACKHold* ACKHold::New() const {
  return new ACKHold;
}

void ACKHold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKHold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result_id = 1;
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKHold::MergeFrom(const ACKHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKHold::CopyFrom(const ACKHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKHold::IsInitialized() const {

  return true;
}

void ACKHold::Swap(ACKHold* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKHold_descriptor_;
  metadata.reflection = ACKHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPackage::kMsgIdFieldNumber;
const int MsgPackage::kSeqIdFieldNumber;
const int MsgPackage::kUserIdFieldNumber;
const int MsgPackage::kMsgFieldNumber;
const int MsgPackage::kSrcFieldNumber;
const int MsgPackage::kClientidFieldNumber;
#endif  // !_MSC_VER

MsgPackage::MsgPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPackage::InitAsDefaultInstance() {
}

MsgPackage::MsgPackage(const MsgPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPackage::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = GOOGLE_LONGLONG(0);
  seq_id_ = GOOGLE_LONGLONG(0);
  user_id_ = GOOGLE_LONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPackage::~MsgPackage() {
  SharedDtor();
}

void MsgPackage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void MsgPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPackage_descriptor_;
}

const MsgPackage& MsgPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

MsgPackage* MsgPackage::default_instance_ = NULL;

MsgPackage* MsgPackage::New() const {
  return new MsgPackage;
}

void MsgPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = GOOGLE_LONGLONG(0);
    seq_id_ = GOOGLE_LONGLONG(0);
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    clientid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq_id;
        break;
      }

      // optional int64 seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_src;
        break;
      }

      // optional bytes src = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clientid;
        break;
      }

      // optional int64 clientid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msg_id(), output);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->seq_id(), output);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_id(), output);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  // optional bytes src = 5;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->src(), output);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msg_id(), target);
  }

  // optional int64 seq_id = 2;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->seq_id(), target);
  }

  // optional int64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_id(), target);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  // optional bytes src = 5;
  if (has_src()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->src(), target);
  }

  // optional int64 clientid = 6;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msg_id());
    }

    // optional int64 seq_id = 2;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_id());
    }

    // optional int64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional bytes src = 5;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src());
    }

    // optional int64 clientid = 6;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPackage::MergeFrom(const MsgPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPackage::CopyFrom(const MsgPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPackage::IsInitialized() const {

  return true;
}

void MsgPackage::Swap(MsgPackage* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(msg_, other->msg_);
    std::swap(src_, other->src_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPackage_descriptor_;
  metadata.reflection = MsgPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQRegister::kAccountFieldNumber;
const int REQRegister::kPasswdFieldNumber;
#endif  // !_MSC_VER

REQRegister::REQRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQRegister::InitAsDefaultInstance() {
}

REQRegister::REQRegister(const REQRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQRegister::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQRegister::~REQRegister() {
  SharedDtor();
}

void REQRegister::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void REQRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQRegister_descriptor_;
}

const REQRegister& REQRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQRegister* REQRegister::default_instance_ = NULL;

REQRegister* REQRegister::New() const {
  return new REQRegister;
}

void REQRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional bytes passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQRegister::MergeFrom(const REQRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQRegister::CopyFrom(const REQRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQRegister::IsInitialized() const {

  return true;
}

void REQRegister::Swap(REQRegister* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQRegister_descriptor_;
  metadata.reflection = REQRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRegister::kCodeFieldNumber;
const int ACKRegister::kResultFieldNumber;
#endif  // !_MSC_VER

ACKRegister::ACKRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRegister::InitAsDefaultInstance() {
}

ACKRegister::ACKRegister(const ACKRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRegister::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRegister::~ACKRegister() {
  SharedDtor();
}

void ACKRegister::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void ACKRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRegister_descriptor_;
}

const ACKRegister& ACKRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKRegister* ACKRegister::default_instance_ = NULL;

ACKRegister* ACKRegister::New() const {
  return new ACKRegister;
}

void ACKRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional bytes result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional bytes result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional bytes result = 2;
  if (has_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional bytes result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRegister::MergeFrom(const ACKRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRegister::CopyFrom(const ACKRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRegister::IsInitialized() const {

  return true;
}

void ACKRegister::Swap(ACKRegister* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRegister_descriptor_;
  metadata.reflection = ACKRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQLogin::kAccountFieldNumber;
const int REQLogin::kPasswdFieldNumber;
#endif  // !_MSC_VER

REQLogin::REQLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQLogin::InitAsDefaultInstance() {
}

REQLogin::REQLogin(const REQLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQLogin::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQLogin::~REQLogin() {
  SharedDtor();
}

void REQLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void REQLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQLogin_descriptor_;
}

const REQLogin& REQLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQLogin* REQLogin::default_instance_ = NULL;

REQLogin* REQLogin::New() const {
  return new REQLogin;
}

void REQLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional bytes passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQLogin::MergeFrom(const REQLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQLogin::CopyFrom(const REQLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQLogin::IsInitialized() const {

  return true;
}

void REQLogin::Swap(REQLogin* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQLogin_descriptor_;
  metadata.reflection = REQLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKLogin::kCodeFieldNumber;
const int ACKLogin::kUserinfoFieldNumber;
#endif  // !_MSC_VER

ACKLogin::ACKLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKLogin::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKLogin::ACKLogin(const ACKLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKLogin::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKLogin::~ACKLogin() {
  SharedDtor();
}

void ACKLogin::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void ACKLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKLogin_descriptor_;
}

const ACKLogin& ACKLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKLogin* ACKLogin::default_instance_ = NULL;

ACKLogin* ACKLogin::New() const {
  return new ACKLogin;
}

void ACKLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // optional .UserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional .UserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional .UserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKLogin::MergeFrom(const ACKLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKLogin::CopyFrom(const ACKLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKLogin::IsInitialized() const {

  return true;
}

void ACKLogin::Swap(ACKLogin* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKLogin_descriptor_;
  metadata.reflection = ACKLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo_Prop::kIdFieldNumber;
const int UserInfo_Prop::kQuantityFieldNumber;
#endif  // !_MSC_VER

UserInfo_Prop::UserInfo_Prop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo_Prop::InitAsDefaultInstance() {
}

UserInfo_Prop::UserInfo_Prop(const UserInfo_Prop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo_Prop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo_Prop::~UserInfo_Prop() {
  SharedDtor();
}

void UserInfo_Prop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserInfo_Prop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo_Prop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_Prop_descriptor_;
}

const UserInfo_Prop& UserInfo_Prop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

UserInfo_Prop* UserInfo_Prop::default_instance_ = NULL;

UserInfo_Prop* UserInfo_Prop::New() const {
  return new UserInfo_Prop;
}

void UserInfo_Prop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo_Prop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }

      // optional int32 quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo_Prop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo_Prop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo_Prop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo_Prop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo_Prop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo_Prop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo_Prop::MergeFrom(const UserInfo_Prop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo_Prop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo_Prop::CopyFrom(const UserInfo_Prop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo_Prop::IsInitialized() const {

  return true;
}

void UserInfo_Prop::Swap(UserInfo_Prop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo_Prop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_Prop_descriptor_;
  metadata.reflection = UserInfo_Prop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserInfo::kIdFieldNumber;
const int UserInfo::kUsernameFieldNumber;
const int UserInfo::kWintimesFieldNumber;
const int UserInfo::kLosetimesFieldNumber;
const int UserInfo::kScoreFieldNumber;
const int UserInfo::kLevelFieldNumber;
const int UserInfo::kXpFieldNumber;
const int UserInfo::kHeadIdFieldNumber;
const int UserInfo::kIsOnlineFieldNumber;
const int UserInfo::kCoinsFieldNumber;
const int UserInfo::kPropsFieldNumber;
const int UserInfo::kAccountFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wintimes_ = 0;
  losetimes_ = 0;
  score_ = 0;
  level_ = 0;
  xp_ = 0;
  head_id_ = 0;
  is_online_ = false;
  coins_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    wintimes_ = 0;
    losetimes_ = 0;
    score_ = 0;
    level_ = 0;
    xp_ = 0;
    head_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_online_ = false;
    coins_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wintimes;
        break;
      }

      // optional int32 wintimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintimes_)));
          set_has_wintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_losetimes;
        break;
      }

      // optional int32 losetimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losetimes_)));
          set_has_losetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_xp;
        break;
      }

      // optional int32 xp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_)));
          set_has_xp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_head_id;
        break;
      }

      // optional int32 head_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coins;
        break;
      }

      // optional int32 coins = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_props;
        break;
      }

      // repeated .UserInfo.Prop props = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_props;
        if (input->ExpectTag(98)) goto parse_account;
        break;
      }

      // optional bytes account = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // optional int32 wintimes = 3;
  if (has_wintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wintimes(), output);
  }

  // optional int32 losetimes = 4;
  if (has_losetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->losetimes(), output);
  }

  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 xp = 7;
  if (has_xp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->xp(), output);
  }

  // optional int32 head_id = 8;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->head_id(), output);
  }

  // optional bool is_online = 9;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_online(), output);
  }

  // optional int32 coins = 10;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->coins(), output);
  }

  // repeated .UserInfo.Prop props = 11;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->props(i), output);
  }

  // optional bytes account = 12;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // optional int32 wintimes = 3;
  if (has_wintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wintimes(), target);
  }

  // optional int32 losetimes = 4;
  if (has_losetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->losetimes(), target);
  }

  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 xp = 7;
  if (has_xp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->xp(), target);
  }

  // optional int32 head_id = 8;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->head_id(), target);
  }

  // optional bool is_online = 9;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_online(), target);
  }

  // optional int32 coins = 10;
  if (has_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->coins(), target);
  }

  // repeated .UserInfo.Prop props = 11;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->props(i), target);
  }

  // optional bytes account = 12;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional int32 wintimes = 3;
    if (has_wintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintimes());
    }

    // optional int32 losetimes = 4;
    if (has_losetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losetimes());
    }

    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 xp = 7;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xp());
    }

    // optional int32 head_id = 8;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_online = 9;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

    // optional int32 coins = 10;
    if (has_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

    // optional bytes account = 12;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

  }
  // repeated .UserInfo.Prop props = 11;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_wintimes()) {
      set_wintimes(from.wintimes());
    }
    if (from.has_losetimes()) {
      set_losetimes(from.losetimes());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_xp()) {
      set_xp(from.xp());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(wintimes_, other->wintimes_);
    std::swap(losetimes_, other->losetimes_);
    std::swap(score_, other->score_);
    std::swap(level_, other->level_);
    std::swap(xp_, other->xp_);
    std::swap(head_id_, other->head_id_);
    std::swap(is_online_, other->is_online_);
    std::swap(coins_, other->coins_);
    props_.Swap(&other->props_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQGetUserInfo::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQGetUserInfo::REQGetUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQGetUserInfo::InitAsDefaultInstance() {
}

REQGetUserInfo::REQGetUserInfo(const REQGetUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQGetUserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQGetUserInfo::~REQGetUserInfo() {
  SharedDtor();
}

void REQGetUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQGetUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQGetUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQGetUserInfo_descriptor_;
}

const REQGetUserInfo& REQGetUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQGetUserInfo* REQGetUserInfo::default_instance_ = NULL;

REQGetUserInfo* REQGetUserInfo::New() const {
  return new REQGetUserInfo;
}

void REQGetUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQGetUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQGetUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQGetUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQGetUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQGetUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQGetUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQGetUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQGetUserInfo::MergeFrom(const REQGetUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQGetUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQGetUserInfo::CopyFrom(const REQGetUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQGetUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQGetUserInfo::Swap(REQGetUserInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQGetUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQGetUserInfo_descriptor_;
  metadata.reflection = REQGetUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKGetUserInfo::kResultIdFieldNumber;
const int ACKGetUserInfo::kUserinfoFieldNumber;
#endif  // !_MSC_VER

ACKGetUserInfo::ACKGetUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKGetUserInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKGetUserInfo::ACKGetUserInfo(const ACKGetUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKGetUserInfo::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKGetUserInfo::~ACKGetUserInfo() {
  SharedDtor();
}

void ACKGetUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void ACKGetUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKGetUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKGetUserInfo_descriptor_;
}

const ACKGetUserInfo& ACKGetUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKGetUserInfo* ACKGetUserInfo::default_instance_ = NULL;

ACKGetUserInfo* ACKGetUserInfo::New() const {
  return new ACKGetUserInfo;
}

void ACKGetUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKGetUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }

      // required .UserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKGetUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_id = 1;
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  // required .UserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKGetUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_id = 1;
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  // required .UserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKGetUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_id = 1;
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

    // required .UserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKGetUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKGetUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKGetUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKGetUserInfo::MergeFrom(const ACKGetUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKGetUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKGetUserInfo::CopyFrom(const ACKGetUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKGetUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKGetUserInfo::Swap(ACKGetUserInfo* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKGetUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKGetUserInfo_descriptor_;
  metadata.reflection = ACKGetUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQEditHead::kHeadNumFieldNumber;
const int REQEditHead::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQEditHead::REQEditHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQEditHead::InitAsDefaultInstance() {
}

REQEditHead::REQEditHead(const REQEditHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQEditHead::SharedCtor() {
  _cached_size_ = 0;
  head_num_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQEditHead::~REQEditHead() {
  SharedDtor();
}

void REQEditHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQEditHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQEditHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQEditHead_descriptor_;
}

const REQEditHead& REQEditHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQEditHead* REQEditHead::default_instance_ = NULL;

REQEditHead* REQEditHead::New() const {
  return new REQEditHead;
}

void REQEditHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    head_num_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQEditHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 head_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_num_)));
          set_has_head_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQEditHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 head_num = 1;
  if (has_head_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->head_num(), output);
  }

  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQEditHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 head_num = 1;
  if (has_head_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->head_num(), target);
  }

  // optional int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQEditHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 head_num = 1;
    if (has_head_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_num());
    }

    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQEditHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQEditHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQEditHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQEditHead::MergeFrom(const REQEditHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head_num()) {
      set_head_num(from.head_num());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQEditHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQEditHead::CopyFrom(const REQEditHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQEditHead::IsInitialized() const {

  return true;
}

void REQEditHead::Swap(REQEditHead* other) {
  if (other != this) {
    std::swap(head_num_, other->head_num_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQEditHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQEditHead_descriptor_;
  metadata.reflection = REQEditHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKEditHead::kCodeFieldNumber;
#endif  // !_MSC_VER

ACKEditHead::ACKEditHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKEditHead::InitAsDefaultInstance() {
}

ACKEditHead::ACKEditHead(const ACKEditHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKEditHead::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKEditHead::~ACKEditHead() {
  SharedDtor();
}

void ACKEditHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKEditHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKEditHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKEditHead_descriptor_;
}

const ACKEditHead& ACKEditHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKEditHead* ACKEditHead::default_instance_ = NULL;

ACKEditHead* ACKEditHead::New() const {
  return new ACKEditHead;
}

void ACKEditHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKEditHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKEditHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKEditHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKEditHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKEditHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKEditHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKEditHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKEditHead::MergeFrom(const ACKEditHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKEditHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKEditHead::CopyFrom(const ACKEditHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKEditHead::IsInitialized() const {

  return true;
}

void ACKEditHead::Swap(ACKEditHead* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKEditHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKEditHead_descriptor_;
  metadata.reflection = ACKEditHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQEditUserName::kUsernameFieldNumber;
const int REQEditUserName::kUserIdFieldNumber;
const int REQEditUserName::kItemIdFieldNumber;
#endif  // !_MSC_VER

REQEditUserName::REQEditUserName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQEditUserName::InitAsDefaultInstance() {
}

REQEditUserName::REQEditUserName(const REQEditUserName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQEditUserName::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = 0;
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQEditUserName::~REQEditUserName() {
  SharedDtor();
}

void REQEditUserName::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void REQEditUserName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQEditUserName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQEditUserName_descriptor_;
}

const REQEditUserName& REQEditUserName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQEditUserName* REQEditUserName::default_instance_ = NULL;

REQEditUserName* REQEditUserName::New() const {
  return new REQEditUserName;
}

void REQEditUserName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    user_id_ = 0;
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQEditUserName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQEditUserName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->username(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQEditUserName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes username = 1;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQEditUserName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQEditUserName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQEditUserName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQEditUserName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQEditUserName::MergeFrom(const REQEditUserName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQEditUserName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQEditUserName::CopyFrom(const REQEditUserName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQEditUserName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQEditUserName::Swap(REQEditUserName* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(user_id_, other->user_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQEditUserName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQEditUserName_descriptor_;
  metadata.reflection = REQEditUserName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKEditUserName::kCodeFieldNumber;
const int ACKEditUserName::kUsernameFieldNumber;
#endif  // !_MSC_VER

ACKEditUserName::ACKEditUserName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKEditUserName::InitAsDefaultInstance() {
}

ACKEditUserName::ACKEditUserName(const ACKEditUserName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKEditUserName::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKEditUserName::~ACKEditUserName() {
  SharedDtor();
}

void ACKEditUserName::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void ACKEditUserName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKEditUserName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKEditUserName_descriptor_;
}

const ACKEditUserName& ACKEditUserName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKEditUserName* ACKEditUserName::default_instance_ = NULL;

ACKEditUserName* ACKEditUserName::New() const {
  return new ACKEditUserName;
}

void ACKEditUserName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKEditUserName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKEditUserName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKEditUserName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKEditUserName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKEditUserName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKEditUserName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKEditUserName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKEditUserName::MergeFrom(const ACKEditUserName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKEditUserName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKEditUserName::CopyFrom(const ACKEditUserName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKEditUserName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKEditUserName::Swap(ACKEditUserName* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKEditUserName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKEditUserName_descriptor_;
  metadata.reflection = ACKEditUserName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQGetRandingList::kReqMsgFieldNumber;
const int REQGetRandingList::kLimitFieldNumber;
const int REQGetRandingList::kOffsetFieldNumber;
#endif  // !_MSC_VER

REQGetRandingList::REQGetRandingList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQGetRandingList::InitAsDefaultInstance() {
}

REQGetRandingList::REQGetRandingList(const REQGetRandingList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQGetRandingList::SharedCtor() {
  _cached_size_ = 0;
  req_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQGetRandingList::~REQGetRandingList() {
  SharedDtor();
}

void REQGetRandingList::SharedDtor() {
  if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete req_msg_;
  }
  if (this != default_instance_) {
  }
}

void REQGetRandingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQGetRandingList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQGetRandingList_descriptor_;
}

const REQGetRandingList& REQGetRandingList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQGetRandingList* REQGetRandingList::default_instance_ = NULL;

REQGetRandingList* REQGetRandingList::New() const {
  return new REQGetRandingList;
}

void REQGetRandingList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_msg()) {
      if (req_msg_ != &::google::protobuf::internal::kEmptyString) {
        req_msg_->clear();
      }
    }
    limit_ = 0;
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQGetRandingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes req_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // optional int32 limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQGetRandingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->req_msg(), output);
  }

  // optional int32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQGetRandingList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes req_msg = 1;
  if (has_req_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->req_msg(), target);
  }

  // optional int32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQGetRandingList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes req_msg = 1;
    if (has_req_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->req_msg());
    }

    // optional int32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQGetRandingList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQGetRandingList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQGetRandingList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQGetRandingList::MergeFrom(const REQGetRandingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_msg()) {
      set_req_msg(from.req_msg());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQGetRandingList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQGetRandingList::CopyFrom(const REQGetRandingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQGetRandingList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQGetRandingList::Swap(REQGetRandingList* other) {
  if (other != this) {
    std::swap(req_msg_, other->req_msg_);
    std::swap(limit_, other->limit_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQGetRandingList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQGetRandingList_descriptor_;
  metadata.reflection = REQGetRandingList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKGetRandingList::kCodeFieldNumber;
const int ACKGetRandingList::kResultMsgFieldNumber;
const int ACKGetRandingList::kUserinfoListFieldNumber;
const int ACKGetRandingList::kLimitFieldNumber;
const int ACKGetRandingList::kOffsetFieldNumber;
#endif  // !_MSC_VER

ACKGetRandingList::ACKGetRandingList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKGetRandingList::InitAsDefaultInstance() {
}

ACKGetRandingList::ACKGetRandingList(const ACKGetRandingList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKGetRandingList::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKGetRandingList::~ACKGetRandingList() {
  SharedDtor();
}

void ACKGetRandingList::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKGetRandingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKGetRandingList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKGetRandingList_descriptor_;
}

const ACKGetRandingList& ACKGetRandingList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKGetRandingList* ACKGetRandingList::default_instance_ = NULL;

ACKGetRandingList* ACKGetRandingList::New() const {
  return new ACKGetRandingList;
}

void ACKGetRandingList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    limit_ = 0;
    offset_ = 0;
  }
  userinfo_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKGetRandingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userinfo_list;
        break;
      }

      // repeated .UserInfo userinfo_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userinfo_list;
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // optional int32 limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }

      // optional int32 offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKGetRandingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  // repeated .UserInfo userinfo_list = 3;
  for (int i = 0; i < this->userinfo_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo_list(i), output);
  }

  // optional int32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }

  // optional int32 offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKGetRandingList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  // repeated .UserInfo userinfo_list = 3;
  for (int i = 0; i < this->userinfo_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo_list(i), target);
  }

  // optional int32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }

  // optional int32 offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKGetRandingList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // optional int32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional int32 offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .UserInfo userinfo_list = 3;
  total_size += 1 * this->userinfo_list_size();
  for (int i = 0; i < this->userinfo_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKGetRandingList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKGetRandingList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKGetRandingList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKGetRandingList::MergeFrom(const ACKGetRandingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_list_.MergeFrom(from.userinfo_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKGetRandingList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKGetRandingList::CopyFrom(const ACKGetRandingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKGetRandingList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKGetRandingList::Swap(ACKGetRandingList* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    userinfo_list_.Swap(&other->userinfo_list_);
    std::swap(limit_, other->limit_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKGetRandingList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKGetRandingList_descriptor_;
  metadata.reflection = ACKGetRandingList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kRowFieldNumber;
const int Position::kColFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 2;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQGameOver::kWinnerIdFieldNumber;
const int REQGameOver::kLoserIdFieldNumber;
const int REQGameOver::kScoreFieldNumber;
const int REQGameOver::kBlackIdFieldNumber;
const int REQGameOver::kWhiteIdFieldNumber;
const int REQGameOver::kIsNoWinnerFieldNumber;
const int REQGameOver::kIsForceExitFieldNumber;
const int REQGameOver::kBlackPositionsFieldNumber;
const int REQGameOver::kWhitePositionsFieldNumber;
const int REQGameOver::kConisFieldNumber;
#endif  // !_MSC_VER

REQGameOver::REQGameOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQGameOver::InitAsDefaultInstance() {
}

REQGameOver::REQGameOver(const REQGameOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQGameOver::SharedCtor() {
  _cached_size_ = 0;
  winner_id_ = 0;
  loser_id_ = 0;
  score_ = 0;
  black_id_ = 0;
  white_id_ = 0;
  is_no_winner_ = false;
  is_force_exit_ = false;
  conis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQGameOver::~REQGameOver() {
  SharedDtor();
}

void REQGameOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQGameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQGameOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQGameOver_descriptor_;
}

const REQGameOver& REQGameOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQGameOver* REQGameOver::default_instance_ = NULL;

REQGameOver* REQGameOver::New() const {
  return new REQGameOver;
}

void REQGameOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winner_id_ = 0;
    loser_id_ = 0;
    score_ = 0;
    black_id_ = 0;
    white_id_ = 0;
    is_no_winner_ = false;
    is_force_exit_ = false;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    conis_ = 0;
  }
  black_positions_.Clear();
  white_positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQGameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 winner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_id_)));
          set_has_winner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loser_id;
        break;
      }

      // optional int32 loser_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loser_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loser_id_)));
          set_has_loser_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_black_id;
        break;
      }

      // required int32 black_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_id_)));
          set_has_black_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_white_id;
        break;
      }

      // required int32 white_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_id_)));
          set_has_white_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_no_winner;
        break;
      }

      // required bool is_no_winner = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_no_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_no_winner_)));
          set_has_is_no_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_force_exit;
        break;
      }

      // required bool is_force_exit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_force_exit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_force_exit_)));
          set_has_is_force_exit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_black_positions;
        break;
      }

      // repeated .Position black_positions = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_black_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_black_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_black_positions;
        if (input->ExpectTag(74)) goto parse_white_positions;
        break;
      }

      // repeated .Position white_positions = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_white_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_white_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_white_positions;
        if (input->ExpectTag(80)) goto parse_conis;
        break;
      }

      // required int32 conis = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conis_)));
          set_has_conis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQGameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 winner_id = 1;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winner_id(), output);
  }

  // optional int32 loser_id = 2;
  if (has_loser_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->loser_id(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->black_id(), output);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->white_id(), output);
  }

  // required bool is_no_winner = 6;
  if (has_is_no_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_no_winner(), output);
  }

  // required bool is_force_exit = 7;
  if (has_is_force_exit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_force_exit(), output);
  }

  // repeated .Position black_positions = 8;
  for (int i = 0; i < this->black_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->black_positions(i), output);
  }

  // repeated .Position white_positions = 9;
  for (int i = 0; i < this->white_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->white_positions(i), output);
  }

  // required int32 conis = 10;
  if (has_conis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->conis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQGameOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 winner_id = 1;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winner_id(), target);
  }

  // optional int32 loser_id = 2;
  if (has_loser_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->loser_id(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // required int32 black_id = 4;
  if (has_black_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->black_id(), target);
  }

  // required int32 white_id = 5;
  if (has_white_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->white_id(), target);
  }

  // required bool is_no_winner = 6;
  if (has_is_no_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_no_winner(), target);
  }

  // required bool is_force_exit = 7;
  if (has_is_force_exit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_force_exit(), target);
  }

  // repeated .Position black_positions = 8;
  for (int i = 0; i < this->black_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->black_positions(i), target);
  }

  // repeated .Position white_positions = 9;
  for (int i = 0; i < this->white_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->white_positions(i), target);
  }

  // required int32 conis = 10;
  if (has_conis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->conis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQGameOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 winner_id = 1;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_id());
    }

    // optional int32 loser_id = 2;
    if (has_loser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loser_id());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 black_id = 4;
    if (has_black_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_id());
    }

    // required int32 white_id = 5;
    if (has_white_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_id());
    }

    // required bool is_no_winner = 6;
    if (has_is_no_winner()) {
      total_size += 1 + 1;
    }

    // required bool is_force_exit = 7;
    if (has_is_force_exit()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 conis = 10;
    if (has_conis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conis());
    }

  }
  // repeated .Position black_positions = 8;
  total_size += 1 * this->black_positions_size();
  for (int i = 0; i < this->black_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->black_positions(i));
  }

  // repeated .Position white_positions = 9;
  total_size += 1 * this->white_positions_size();
  for (int i = 0; i < this->white_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->white_positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQGameOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQGameOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQGameOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQGameOver::MergeFrom(const REQGameOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  black_positions_.MergeFrom(from.black_positions_);
  white_positions_.MergeFrom(from.white_positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner_id()) {
      set_winner_id(from.winner_id());
    }
    if (from.has_loser_id()) {
      set_loser_id(from.loser_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_black_id()) {
      set_black_id(from.black_id());
    }
    if (from.has_white_id()) {
      set_white_id(from.white_id());
    }
    if (from.has_is_no_winner()) {
      set_is_no_winner(from.is_no_winner());
    }
    if (from.has_is_force_exit()) {
      set_is_force_exit(from.is_force_exit());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_conis()) {
      set_conis(from.conis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQGameOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQGameOver::CopyFrom(const REQGameOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQGameOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000278) != 0x00000278) return false;

  for (int i = 0; i < black_positions_size(); i++) {
    if (!this->black_positions(i).IsInitialized()) return false;
  }
  for (int i = 0; i < white_positions_size(); i++) {
    if (!this->white_positions(i).IsInitialized()) return false;
  }
  return true;
}

void REQGameOver::Swap(REQGameOver* other) {
  if (other != this) {
    std::swap(winner_id_, other->winner_id_);
    std::swap(loser_id_, other->loser_id_);
    std::swap(score_, other->score_);
    std::swap(black_id_, other->black_id_);
    std::swap(white_id_, other->white_id_);
    std::swap(is_no_winner_, other->is_no_winner_);
    std::swap(is_force_exit_, other->is_force_exit_);
    black_positions_.Swap(&other->black_positions_);
    white_positions_.Swap(&other->white_positions_);
    std::swap(conis_, other->conis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQGameOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQGameOver_descriptor_;
  metadata.reflection = REQGameOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQGetGameHistory::kPlayerIdFieldNumber;
const int REQGetGameHistory::kLimitFieldNumber;
const int REQGetGameHistory::kOffsetFieldNumber;
#endif  // !_MSC_VER

REQGetGameHistory::REQGetGameHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQGetGameHistory::InitAsDefaultInstance() {
}

REQGetGameHistory::REQGetGameHistory(const REQGetGameHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQGetGameHistory::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  limit_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQGetGameHistory::~REQGetGameHistory() {
  SharedDtor();
}

void REQGetGameHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQGetGameHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQGetGameHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQGetGameHistory_descriptor_;
}

const REQGetGameHistory& REQGetGameHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQGetGameHistory* REQGetGameHistory::default_instance_ = NULL;

REQGetGameHistory* REQGetGameHistory::New() const {
  return new REQGetGameHistory;
}

void REQGetGameHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    limit_ = 0;
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQGetGameHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // required int32 limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQGetGameHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required int32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQGetGameHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required int32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQGetGameHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required int32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // required int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQGetGameHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQGetGameHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQGetGameHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQGetGameHistory::MergeFrom(const REQGetGameHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQGetGameHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQGetGameHistory::CopyFrom(const REQGetGameHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQGetGameHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQGetGameHistory::Swap(REQGetGameHistory* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(limit_, other->limit_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQGetGameHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQGetGameHistory_descriptor_;
  metadata.reflection = REQGetGameHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kEnemyUserinfoFieldNumber;
const int GameInfo::kGameIdFieldNumber;
const int GameInfo::kWinnerIdFieldNumber;
const int GameInfo::kLoserIdFieldNumber;
const int GameInfo::kScoreFieldNumber;
const int GameInfo::kBlackIdFieldNumber;
const int GameInfo::kWhiteIdFieldNumber;
const int GameInfo::kIsNoWinnerFieldNumber;
const int GameInfo::kIsForceExitFieldNumber;
const int GameInfo::kBlackPositionsFieldNumber;
const int GameInfo::kWhitePositionsFieldNumber;
const int GameInfo::kGameTimeFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameInfo::InitAsDefaultInstance() {
  enemy_userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  enemy_userinfo_ = NULL;
  game_id_ = 0;
  winner_id_ = 0;
  loser_id_ = 0;
  score_ = 0;
  black_id_ = 0;
  white_id_ = 0;
  is_no_winner_ = false;
  is_force_exit_ = false;
  game_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (game_time_ != &::google::protobuf::internal::kEmptyString) {
    delete game_time_;
  }
  if (this != default_instance_) {
    delete enemy_userinfo_;
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_enemy_userinfo()) {
      if (enemy_userinfo_ != NULL) enemy_userinfo_->::UserInfo::Clear();
    }
    game_id_ = 0;
    winner_id_ = 0;
    loser_id_ = 0;
    score_ = 0;
    black_id_ = 0;
    white_id_ = 0;
    is_no_winner_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_force_exit_ = false;
    if (has_game_time()) {
      if (game_time_ != &::google::protobuf::internal::kEmptyString) {
        game_time_->clear();
      }
    }
  }
  black_positions_.Clear();
  white_positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UserInfo enemy_userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemy_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winner_id;
        break;
      }

      // required int32 winner_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_id_)));
          set_has_winner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loser_id;
        break;
      }

      // required int32 loser_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loser_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loser_id_)));
          set_has_loser_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // required int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_black_id;
        break;
      }

      // required int32 black_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_id_)));
          set_has_black_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_white_id;
        break;
      }

      // required int32 white_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_id_)));
          set_has_white_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_no_winner;
        break;
      }

      // required bool is_no_winner = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_no_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_no_winner_)));
          set_has_is_no_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_force_exit;
        break;
      }

      // required bool is_force_exit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_force_exit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_force_exit_)));
          set_has_is_force_exit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_black_positions;
        break;
      }

      // repeated .Position black_positions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_black_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_black_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_black_positions;
        if (input->ExpectTag(90)) goto parse_white_positions;
        break;
      }

      // repeated .Position white_positions = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_white_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_white_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_white_positions;
        if (input->ExpectTag(98)) goto parse_game_time;
        break;
      }

      // required bytes game_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .UserInfo enemy_userinfo = 1;
  if (has_enemy_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemy_userinfo(), output);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // required int32 winner_id = 3;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winner_id(), output);
  }

  // required int32 loser_id = 4;
  if (has_loser_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->loser_id(), output);
  }

  // required int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // required int32 black_id = 6;
  if (has_black_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->black_id(), output);
  }

  // required int32 white_id = 7;
  if (has_white_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->white_id(), output);
  }

  // required bool is_no_winner = 8;
  if (has_is_no_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_no_winner(), output);
  }

  // required bool is_force_exit = 9;
  if (has_is_force_exit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_force_exit(), output);
  }

  // repeated .Position black_positions = 10;
  for (int i = 0; i < this->black_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->black_positions(i), output);
  }

  // repeated .Position white_positions = 11;
  for (int i = 0; i < this->white_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->white_positions(i), output);
  }

  // required bytes game_time = 12;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->game_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .UserInfo enemy_userinfo = 1;
  if (has_enemy_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemy_userinfo(), target);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  // required int32 winner_id = 3;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winner_id(), target);
  }

  // required int32 loser_id = 4;
  if (has_loser_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->loser_id(), target);
  }

  // required int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // required int32 black_id = 6;
  if (has_black_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->black_id(), target);
  }

  // required int32 white_id = 7;
  if (has_white_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->white_id(), target);
  }

  // required bool is_no_winner = 8;
  if (has_is_no_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_no_winner(), target);
  }

  // required bool is_force_exit = 9;
  if (has_is_force_exit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_force_exit(), target);
  }

  // repeated .Position black_positions = 10;
  for (int i = 0; i < this->black_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->black_positions(i), target);
  }

  // repeated .Position white_positions = 11;
  for (int i = 0; i < this->white_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->white_positions(i), target);
  }

  // required bytes game_time = 12;
  if (has_game_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->game_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UserInfo enemy_userinfo = 1;
    if (has_enemy_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemy_userinfo());
    }

    // required int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // required int32 winner_id = 3;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_id());
    }

    // required int32 loser_id = 4;
    if (has_loser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loser_id());
    }

    // required int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 black_id = 6;
    if (has_black_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_id());
    }

    // required int32 white_id = 7;
    if (has_white_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_id());
    }

    // required bool is_no_winner = 8;
    if (has_is_no_winner()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool is_force_exit = 9;
    if (has_is_force_exit()) {
      total_size += 1 + 1;
    }

    // required bytes game_time = 12;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_time());
    }

  }
  // repeated .Position black_positions = 10;
  total_size += 1 * this->black_positions_size();
  for (int i = 0; i < this->black_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->black_positions(i));
  }

  // repeated .Position white_positions = 11;
  total_size += 1 * this->white_positions_size();
  for (int i = 0; i < this->white_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->white_positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  black_positions_.MergeFrom(from.black_positions_);
  white_positions_.MergeFrom(from.white_positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemy_userinfo()) {
      mutable_enemy_userinfo()->::UserInfo::MergeFrom(from.enemy_userinfo());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_winner_id()) {
      set_winner_id(from.winner_id());
    }
    if (from.has_loser_id()) {
      set_loser_id(from.loser_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_black_id()) {
      set_black_id(from.black_id());
    }
    if (from.has_white_id()) {
      set_white_id(from.white_id());
    }
    if (from.has_is_no_winner()) {
      set_is_no_winner(from.is_no_winner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_force_exit()) {
      set_is_force_exit(from.is_force_exit());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000009ff) != 0x000009ff) return false;

  for (int i = 0; i < black_positions_size(); i++) {
    if (!this->black_positions(i).IsInitialized()) return false;
  }
  for (int i = 0; i < white_positions_size(); i++) {
    if (!this->white_positions(i).IsInitialized()) return false;
  }
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(enemy_userinfo_, other->enemy_userinfo_);
    std::swap(game_id_, other->game_id_);
    std::swap(winner_id_, other->winner_id_);
    std::swap(loser_id_, other->loser_id_);
    std::swap(score_, other->score_);
    std::swap(black_id_, other->black_id_);
    std::swap(white_id_, other->white_id_);
    std::swap(is_no_winner_, other->is_no_winner_);
    std::swap(is_force_exit_, other->is_force_exit_);
    black_positions_.Swap(&other->black_positions_);
    white_positions_.Swap(&other->white_positions_);
    std::swap(game_time_, other->game_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKGetGameHistory::kPlayerIdFieldNumber;
const int ACKGetGameHistory::kGameInfoListFieldNumber;
#endif  // !_MSC_VER

ACKGetGameHistory::ACKGetGameHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKGetGameHistory::InitAsDefaultInstance() {
}

ACKGetGameHistory::ACKGetGameHistory(const ACKGetGameHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKGetGameHistory::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKGetGameHistory::~ACKGetGameHistory() {
  SharedDtor();
}

void ACKGetGameHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKGetGameHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKGetGameHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKGetGameHistory_descriptor_;
}

const ACKGetGameHistory& ACKGetGameHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKGetGameHistory* ACKGetGameHistory::default_instance_ = NULL;

ACKGetGameHistory* ACKGetGameHistory::New() const {
  return new ACKGetGameHistory;
}

void ACKGetGameHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
  }
  game_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKGetGameHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_info_list;
        break;
      }

      // repeated .GameInfo game_info_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKGetGameHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // repeated .GameInfo game_info_list = 2;
  for (int i = 0; i < this->game_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKGetGameHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // repeated .GameInfo game_info_list = 2;
  for (int i = 0; i < this->game_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKGetGameHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  // repeated .GameInfo game_info_list = 2;
  total_size += 1 * this->game_info_list_size();
  for (int i = 0; i < this->game_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKGetGameHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKGetGameHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKGetGameHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKGetGameHistory::MergeFrom(const ACKGetGameHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_info_list_.MergeFrom(from.game_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKGetGameHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKGetGameHistory::CopyFrom(const ACKGetGameHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKGetGameHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < game_info_list_size(); i++) {
    if (!this->game_info_list(i).IsInitialized()) return false;
  }
  return true;
}

void ACKGetGameHistory::Swap(ACKGetGameHistory* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    game_info_list_.Swap(&other->game_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKGetGameHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKGetGameHistory_descriptor_;
  metadata.reflection = ACKGetGameHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQGetFriendInfo::kFriendNameFieldNumber;
const int REQGetFriendInfo::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQGetFriendInfo::REQGetFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQGetFriendInfo::InitAsDefaultInstance() {
}

REQGetFriendInfo::REQGetFriendInfo(const REQGetFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQGetFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  friend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQGetFriendInfo::~REQGetFriendInfo() {
  SharedDtor();
}

void REQGetFriendInfo::SharedDtor() {
  if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friend_name_;
  }
  if (this != default_instance_) {
  }
}

void REQGetFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQGetFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQGetFriendInfo_descriptor_;
}

const REQGetFriendInfo& REQGetFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQGetFriendInfo* REQGetFriendInfo::default_instance_ = NULL;

REQGetFriendInfo* REQGetFriendInfo::New() const {
  return new REQGetFriendInfo;
}

void REQGetFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friend_name()) {
      if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
        friend_name_->clear();
      }
    }
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQGetFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes friend_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQGetFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes friend_name = 1;
  if (has_friend_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->friend_name(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQGetFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes friend_name = 1;
  if (has_friend_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->friend_name(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQGetFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes friend_name = 1;
    if (has_friend_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_name());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQGetFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQGetFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQGetFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQGetFriendInfo::MergeFrom(const REQGetFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_name()) {
      set_friend_name(from.friend_name());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQGetFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQGetFriendInfo::CopyFrom(const REQGetFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQGetFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQGetFriendInfo::Swap(REQGetFriendInfo* other) {
  if (other != this) {
    std::swap(friend_name_, other->friend_name_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQGetFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQGetFriendInfo_descriptor_;
  metadata.reflection = REQGetFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKGetFriendInfo::kFriendinfoFieldNumber;
const int ACKGetFriendInfo::kIsMyFriendFieldNumber;
const int ACKGetFriendInfo::kIsExistFieldNumber;
#endif  // !_MSC_VER

ACKGetFriendInfo::ACKGetFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKGetFriendInfo::InitAsDefaultInstance() {
  friendinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKGetFriendInfo::ACKGetFriendInfo(const ACKGetFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKGetFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  friendinfo_ = NULL;
  is_my_friend_ = false;
  is_exist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKGetFriendInfo::~ACKGetFriendInfo() {
  SharedDtor();
}

void ACKGetFriendInfo::SharedDtor() {
  if (this != default_instance_) {
    delete friendinfo_;
  }
}

void ACKGetFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKGetFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKGetFriendInfo_descriptor_;
}

const ACKGetFriendInfo& ACKGetFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKGetFriendInfo* ACKGetFriendInfo::default_instance_ = NULL;

ACKGetFriendInfo* ACKGetFriendInfo::New() const {
  return new ACKGetFriendInfo;
}

void ACKGetFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friendinfo()) {
      if (friendinfo_ != NULL) friendinfo_->::UserInfo::Clear();
    }
    is_my_friend_ = false;
    is_exist_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKGetFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UserInfo friendinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_my_friend;
        break;
      }

      // required bool is_my_friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_my_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_my_friend_)));
          set_has_is_my_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_exist;
        break;
      }

      // required bool is_exist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_exist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exist_)));
          set_has_is_exist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKGetFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .UserInfo friendinfo = 1;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendinfo(), output);
  }

  // required bool is_my_friend = 2;
  if (has_is_my_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_my_friend(), output);
  }

  // required bool is_exist = 3;
  if (has_is_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_exist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKGetFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .UserInfo friendinfo = 1;
  if (has_friendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendinfo(), target);
  }

  // required bool is_my_friend = 2;
  if (has_is_my_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_my_friend(), target);
  }

  // required bool is_exist = 3;
  if (has_is_exist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_exist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKGetFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UserInfo friendinfo = 1;
    if (has_friendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendinfo());
    }

    // required bool is_my_friend = 2;
    if (has_is_my_friend()) {
      total_size += 1 + 1;
    }

    // required bool is_exist = 3;
    if (has_is_exist()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKGetFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKGetFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKGetFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKGetFriendInfo::MergeFrom(const ACKGetFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendinfo()) {
      mutable_friendinfo()->::UserInfo::MergeFrom(from.friendinfo());
    }
    if (from.has_is_my_friend()) {
      set_is_my_friend(from.is_my_friend());
    }
    if (from.has_is_exist()) {
      set_is_exist(from.is_exist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKGetFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKGetFriendInfo::CopyFrom(const ACKGetFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKGetFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ACKGetFriendInfo::Swap(ACKGetFriendInfo* other) {
  if (other != this) {
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(is_my_friend_, other->is_my_friend_);
    std::swap(is_exist_, other->is_exist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKGetFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKGetFriendInfo_descriptor_;
  metadata.reflection = ACKGetFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQAddFriend::kFriendIdFieldNumber;
const int REQAddFriend::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQAddFriend::REQAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQAddFriend::InitAsDefaultInstance() {
}

REQAddFriend::REQAddFriend(const REQAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQAddFriend::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQAddFriend::~REQAddFriend() {
  SharedDtor();
}

void REQAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQAddFriend_descriptor_;
}

const REQAddFriend& REQAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQAddFriend* REQAddFriend::default_instance_ = NULL;

REQAddFriend* REQAddFriend::New() const {
  return new REQAddFriend;
}

void REQAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friend_id(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friend_id(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_id());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQAddFriend::MergeFrom(const REQAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQAddFriend::CopyFrom(const REQAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQAddFriend::Swap(REQAddFriend* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQAddFriend_descriptor_;
  metadata.reflection = REQAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKAddFriend::kCodeFieldNumber;
const int ACKAddFriend::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKAddFriend::ACKAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKAddFriend::InitAsDefaultInstance() {
}

ACKAddFriend::ACKAddFriend(const ACKAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKAddFriend::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKAddFriend::~ACKAddFriend() {
  SharedDtor();
}

void ACKAddFriend::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKAddFriend_descriptor_;
}

const ACKAddFriend& ACKAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKAddFriend* ACKAddFriend::default_instance_ = NULL;

ACKAddFriend* ACKAddFriend::New() const {
  return new ACKAddFriend;
}

void ACKAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // optional bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKAddFriend::MergeFrom(const ACKAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKAddFriend::CopyFrom(const ACKAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKAddFriend::Swap(ACKAddFriend* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKAddFriend_descriptor_;
  metadata.reflection = ACKAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQRequestFriend::kNumFieldNumber;
const int REQRequestFriend::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQRequestFriend::REQRequestFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQRequestFriend::InitAsDefaultInstance() {
}

REQRequestFriend::REQRequestFriend(const REQRequestFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQRequestFriend::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQRequestFriend::~REQRequestFriend() {
  SharedDtor();
}

void REQRequestFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQRequestFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQRequestFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQRequestFriend_descriptor_;
}

const REQRequestFriend& REQRequestFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQRequestFriend* REQRequestFriend::default_instance_ = NULL;

REQRequestFriend* REQRequestFriend::New() const {
  return new REQRequestFriend;
}

void REQRequestFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQRequestFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQRequestFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQRequestFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQRequestFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQRequestFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQRequestFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQRequestFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQRequestFriend::MergeFrom(const REQRequestFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQRequestFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQRequestFriend::CopyFrom(const REQRequestFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQRequestFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQRequestFriend::Swap(REQRequestFriend* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQRequestFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQRequestFriend_descriptor_;
  metadata.reflection = REQRequestFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQIsAgreeFriend::kUserIdFieldNumber;
const int REQIsAgreeFriend::kFriendIdFieldNumber;
const int REQIsAgreeFriend::kIsAgreeFieldNumber;
#endif  // !_MSC_VER

REQIsAgreeFriend::REQIsAgreeFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQIsAgreeFriend::InitAsDefaultInstance() {
}

REQIsAgreeFriend::REQIsAgreeFriend(const REQIsAgreeFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQIsAgreeFriend::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  friend_id_ = 0;
  is_agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQIsAgreeFriend::~REQIsAgreeFriend() {
  SharedDtor();
}

void REQIsAgreeFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQIsAgreeFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQIsAgreeFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQIsAgreeFriend_descriptor_;
}

const REQIsAgreeFriend& REQIsAgreeFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQIsAgreeFriend* REQIsAgreeFriend::default_instance_ = NULL;

REQIsAgreeFriend* REQIsAgreeFriend::New() const {
  return new REQIsAgreeFriend;
}

void REQIsAgreeFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    friend_id_ = 0;
    is_agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQIsAgreeFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // required int32 friend_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_agree;
        break;
      }

      // required bool is_agree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_)));
          set_has_is_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQIsAgreeFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friend_id(), output);
  }

  // required bool is_agree = 3;
  if (has_is_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQIsAgreeFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // required int32 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friend_id(), target);
  }

  // required bool is_agree = 3;
  if (has_is_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQIsAgreeFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_id());
    }

    // required bool is_agree = 3;
    if (has_is_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQIsAgreeFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQIsAgreeFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQIsAgreeFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQIsAgreeFriend::MergeFrom(const REQIsAgreeFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_is_agree()) {
      set_is_agree(from.is_agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQIsAgreeFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQIsAgreeFriend::CopyFrom(const REQIsAgreeFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQIsAgreeFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQIsAgreeFriend::Swap(REQIsAgreeFriend* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(is_agree_, other->is_agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQIsAgreeFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQIsAgreeFriend_descriptor_;
  metadata.reflection = REQIsAgreeFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKIsAgreeFriend::kCodeFieldNumber;
const int ACKIsAgreeFriend::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKIsAgreeFriend::ACKIsAgreeFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKIsAgreeFriend::InitAsDefaultInstance() {
}

ACKIsAgreeFriend::ACKIsAgreeFriend(const ACKIsAgreeFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKIsAgreeFriend::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKIsAgreeFriend::~ACKIsAgreeFriend() {
  SharedDtor();
}

void ACKIsAgreeFriend::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKIsAgreeFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKIsAgreeFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKIsAgreeFriend_descriptor_;
}

const ACKIsAgreeFriend& ACKIsAgreeFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKIsAgreeFriend* ACKIsAgreeFriend::default_instance_ = NULL;

ACKIsAgreeFriend* ACKIsAgreeFriend::New() const {
  return new ACKIsAgreeFriend;
}

void ACKIsAgreeFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKIsAgreeFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKIsAgreeFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKIsAgreeFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKIsAgreeFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKIsAgreeFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKIsAgreeFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKIsAgreeFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKIsAgreeFriend::MergeFrom(const ACKIsAgreeFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKIsAgreeFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKIsAgreeFriend::CopyFrom(const ACKIsAgreeFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKIsAgreeFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKIsAgreeFriend::Swap(ACKIsAgreeFriend* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKIsAgreeFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKIsAgreeFriend_descriptor_;
  metadata.reflection = ACKIsAgreeFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKUpdateFriend::kUserIdFieldNumber;
const int ACKUpdateFriend::kFirendinfoFieldNumber;
#endif  // !_MSC_VER

ACKUpdateFriend::ACKUpdateFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKUpdateFriend::InitAsDefaultInstance() {
  firendinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

ACKUpdateFriend::ACKUpdateFriend(const ACKUpdateFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKUpdateFriend::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  firendinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKUpdateFriend::~ACKUpdateFriend() {
  SharedDtor();
}

void ACKUpdateFriend::SharedDtor() {
  if (this != default_instance_) {
    delete firendinfo_;
  }
}

void ACKUpdateFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKUpdateFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKUpdateFriend_descriptor_;
}

const ACKUpdateFriend& ACKUpdateFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKUpdateFriend* ACKUpdateFriend::default_instance_ = NULL;

ACKUpdateFriend* ACKUpdateFriend::New() const {
  return new ACKUpdateFriend;
}

void ACKUpdateFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    if (has_firendinfo()) {
      if (firendinfo_ != NULL) firendinfo_->::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKUpdateFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_firendinfo;
        break;
      }

      // required .UserInfo firendinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firendinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKUpdateFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required .UserInfo firendinfo = 2;
  if (has_firendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->firendinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKUpdateFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // required .UserInfo firendinfo = 2;
  if (has_firendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->firendinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKUpdateFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required .UserInfo firendinfo = 2;
    if (has_firendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firendinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKUpdateFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKUpdateFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKUpdateFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKUpdateFriend::MergeFrom(const ACKUpdateFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_firendinfo()) {
      mutable_firendinfo()->::UserInfo::MergeFrom(from.firendinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKUpdateFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKUpdateFriend::CopyFrom(const ACKUpdateFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKUpdateFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKUpdateFriend::Swap(ACKUpdateFriend* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(firendinfo_, other->firendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKUpdateFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKUpdateFriend_descriptor_;
  metadata.reflection = ACKUpdateFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQFriendsList::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQFriendsList::REQFriendsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQFriendsList::InitAsDefaultInstance() {
}

REQFriendsList::REQFriendsList(const REQFriendsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQFriendsList::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQFriendsList::~REQFriendsList() {
  SharedDtor();
}

void REQFriendsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQFriendsList_descriptor_;
}

const REQFriendsList& REQFriendsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQFriendsList* REQFriendsList::default_instance_ = NULL;

REQFriendsList* REQFriendsList::New() const {
  return new REQFriendsList;
}

void REQFriendsList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQFriendsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQFriendsList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQFriendsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQFriendsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQFriendsList::MergeFrom(const REQFriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQFriendsList::CopyFrom(const REQFriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQFriendsList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQFriendsList::Swap(REQFriendsList* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQFriendsList_descriptor_;
  metadata.reflection = REQFriendsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKFriendsList::kFirendinfoFieldNumber;
#endif  // !_MSC_VER

ACKFriendsList::ACKFriendsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKFriendsList::InitAsDefaultInstance() {
}

ACKFriendsList::ACKFriendsList(const ACKFriendsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKFriendsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKFriendsList::~ACKFriendsList() {
  SharedDtor();
}

void ACKFriendsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKFriendsList_descriptor_;
}

const ACKFriendsList& ACKFriendsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKFriendsList* ACKFriendsList::default_instance_ = NULL;

ACKFriendsList* ACKFriendsList::New() const {
  return new ACKFriendsList;
}

void ACKFriendsList::Clear() {
  firendinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserInfo firendinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firendinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_firendinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .UserInfo firendinfo = 1;
  for (int i = 0; i < this->firendinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->firendinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKFriendsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .UserInfo firendinfo = 1;
  for (int i = 0; i < this->firendinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->firendinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKFriendsList::ByteSize() const {
  int total_size = 0;

  // repeated .UserInfo firendinfo = 1;
  total_size += 1 * this->firendinfo_size();
  for (int i = 0; i < this->firendinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firendinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKFriendsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKFriendsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKFriendsList::MergeFrom(const ACKFriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  firendinfo_.MergeFrom(from.firendinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKFriendsList::CopyFrom(const ACKFriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKFriendsList::IsInitialized() const {

  return true;
}

void ACKFriendsList::Swap(ACKFriendsList* other) {
  if (other != this) {
    firendinfo_.Swap(&other->firendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKFriendsList_descriptor_;
  metadata.reflection = ACKFriendsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQWaitFriendsList::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQWaitFriendsList::REQWaitFriendsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQWaitFriendsList::InitAsDefaultInstance() {
}

REQWaitFriendsList::REQWaitFriendsList(const REQWaitFriendsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQWaitFriendsList::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQWaitFriendsList::~REQWaitFriendsList() {
  SharedDtor();
}

void REQWaitFriendsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQWaitFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQWaitFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQWaitFriendsList_descriptor_;
}

const REQWaitFriendsList& REQWaitFriendsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQWaitFriendsList* REQWaitFriendsList::default_instance_ = NULL;

REQWaitFriendsList* REQWaitFriendsList::New() const {
  return new REQWaitFriendsList;
}

void REQWaitFriendsList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQWaitFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQWaitFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQWaitFriendsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQWaitFriendsList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQWaitFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQWaitFriendsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQWaitFriendsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQWaitFriendsList::MergeFrom(const REQWaitFriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQWaitFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQWaitFriendsList::CopyFrom(const REQWaitFriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQWaitFriendsList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void REQWaitFriendsList::Swap(REQWaitFriendsList* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQWaitFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQWaitFriendsList_descriptor_;
  metadata.reflection = REQWaitFriendsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKWaitFriendsList::kFirendinfoFieldNumber;
const int ACKWaitFriendsList::kTimesFieldNumber;
#endif  // !_MSC_VER

ACKWaitFriendsList::ACKWaitFriendsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKWaitFriendsList::InitAsDefaultInstance() {
}

ACKWaitFriendsList::ACKWaitFriendsList(const ACKWaitFriendsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKWaitFriendsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKWaitFriendsList::~ACKWaitFriendsList() {
  SharedDtor();
}

void ACKWaitFriendsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKWaitFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKWaitFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKWaitFriendsList_descriptor_;
}

const ACKWaitFriendsList& ACKWaitFriendsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKWaitFriendsList* ACKWaitFriendsList::default_instance_ = NULL;

ACKWaitFriendsList* ACKWaitFriendsList::New() const {
  return new ACKWaitFriendsList;
}

void ACKWaitFriendsList::Clear() {
  firendinfo_.Clear();
  times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKWaitFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserInfo firendinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firendinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_firendinfo;
        if (input->ExpectTag(18)) goto parse_times;
        break;
      }

      // repeated bytes times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_times()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_times;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKWaitFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .UserInfo firendinfo = 1;
  for (int i = 0; i < this->firendinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->firendinfo(i), output);
  }

  // repeated bytes times = 2;
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->times(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKWaitFriendsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .UserInfo firendinfo = 1;
  for (int i = 0; i < this->firendinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->firendinfo(i), target);
  }

  // repeated bytes times = 2;
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->times(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKWaitFriendsList::ByteSize() const {
  int total_size = 0;

  // repeated .UserInfo firendinfo = 1;
  total_size += 1 * this->firendinfo_size();
  for (int i = 0; i < this->firendinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firendinfo(i));
  }

  // repeated bytes times = 2;
  total_size += 1 * this->times_size();
  for (int i = 0; i < this->times_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->times(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKWaitFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKWaitFriendsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKWaitFriendsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKWaitFriendsList::MergeFrom(const ACKWaitFriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  firendinfo_.MergeFrom(from.firendinfo_);
  times_.MergeFrom(from.times_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKWaitFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKWaitFriendsList::CopyFrom(const ACKWaitFriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKWaitFriendsList::IsInitialized() const {

  return true;
}

void ACKWaitFriendsList::Swap(ACKWaitFriendsList* other) {
  if (other != this) {
    firendinfo_.Swap(&other->firendinfo_);
    times_.Swap(&other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKWaitFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKWaitFriendsList_descriptor_;
  metadata.reflection = ACKWaitFriendsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQDeleteFriend::kFriendIdFieldNumber;
const int REQDeleteFriend::kUserIdFieldNumber;
#endif  // !_MSC_VER

REQDeleteFriend::REQDeleteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQDeleteFriend::InitAsDefaultInstance() {
}

REQDeleteFriend::REQDeleteFriend(const REQDeleteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQDeleteFriend::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQDeleteFriend::~REQDeleteFriend() {
  SharedDtor();
}

void REQDeleteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQDeleteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQDeleteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQDeleteFriend_descriptor_;
}

const REQDeleteFriend& REQDeleteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQDeleteFriend* REQDeleteFriend::default_instance_ = NULL;

REQDeleteFriend* REQDeleteFriend::New() const {
  return new REQDeleteFriend;
}

void REQDeleteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQDeleteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQDeleteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friend_id(), output);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQDeleteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friend_id(), target);
  }

  // required int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQDeleteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_id());
    }

    // required int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQDeleteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQDeleteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQDeleteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQDeleteFriend::MergeFrom(const REQDeleteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQDeleteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQDeleteFriend::CopyFrom(const REQDeleteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQDeleteFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void REQDeleteFriend::Swap(REQDeleteFriend* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQDeleteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQDeleteFriend_descriptor_;
  metadata.reflection = REQDeleteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKDeleteFriend::kCodeFieldNumber;
const int ACKDeleteFriend::kResultMsgFieldNumber;
#endif  // !_MSC_VER

ACKDeleteFriend::ACKDeleteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKDeleteFriend::InitAsDefaultInstance() {
}

ACKDeleteFriend::ACKDeleteFriend(const ACKDeleteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKDeleteFriend::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKDeleteFriend::~ACKDeleteFriend() {
  SharedDtor();
}

void ACKDeleteFriend::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKDeleteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKDeleteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKDeleteFriend_descriptor_;
}

const ACKDeleteFriend& ACKDeleteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKDeleteFriend* ACKDeleteFriend::default_instance_ = NULL;

ACKDeleteFriend* ACKDeleteFriend::New() const {
  return new ACKDeleteFriend;
}

void ACKDeleteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKDeleteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // optional bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKDeleteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKDeleteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKDeleteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKDeleteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKDeleteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKDeleteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKDeleteFriend::MergeFrom(const ACKDeleteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKDeleteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKDeleteFriend::CopyFrom(const ACKDeleteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKDeleteFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKDeleteFriend::Swap(ACKDeleteFriend* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKDeleteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKDeleteFriend_descriptor_;
  metadata.reflection = ACKDeleteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQBuy::kUserIdFieldNumber;
const int REQBuy::kItemIdFieldNumber;
const int REQBuy::kPriceFieldNumber;
const int REQBuy::kNumFieldNumber;
#endif  // !_MSC_VER

REQBuy::REQBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQBuy::InitAsDefaultInstance() {
}

REQBuy::REQBuy(const REQBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQBuy::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  item_id_ = 0;
  price_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQBuy::~REQBuy() {
  SharedDtor();
}

void REQBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQBuy_descriptor_;
}

const REQBuy& REQBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

REQBuy* REQBuy::default_instance_ = NULL;

REQBuy* REQBuy::New() const {
  return new REQBuy;
}

void REQBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    item_id_ = 0;
    price_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // required int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // required int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // required int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // required int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // required int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  // required int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // required int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQBuy::MergeFrom(const REQBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQBuy::CopyFrom(const REQBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQBuy::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void REQBuy::Swap(REQBuy* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(price_, other->price_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQBuy_descriptor_;
  metadata.reflection = REQBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKBuy::kCodeFieldNumber;
const int ACKBuy::kResultMsgFieldNumber;
const int ACKBuy::kItemIdFieldNumber;
const int ACKBuy::kPriceFieldNumber;
const int ACKBuy::kNumFieldNumber;
#endif  // !_MSC_VER

ACKBuy::ACKBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKBuy::InitAsDefaultInstance() {
}

ACKBuy::ACKBuy(const ACKBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKBuy::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  result_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0;
  price_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKBuy::~ACKBuy() {
  SharedDtor();
}

void ACKBuy::SharedDtor() {
  if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete result_msg_;
  }
  if (this != default_instance_) {
  }
}

void ACKBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKBuy_descriptor_;
}

const ACKBuy& ACKBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wzqProtocol_2eproto();
  return *default_instance_;
}

ACKBuy* ACKBuy::default_instance_ = NULL;

ACKBuy* ACKBuy::New() const {
  return new ACKBuy;
}

void ACKBuy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_result_msg()) {
      if (result_msg_ != &::google::protobuf::internal::kEmptyString) {
        result_msg_->clear();
      }
    }
    item_id_ = 0;
    price_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_msg;
        break;
      }

      // required bytes result_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // optional int32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional int32 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->result_msg(), output);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  // optional int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // optional int32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bytes result_msg = 2;
  if (has_result_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result_msg(), target);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }

  // optional int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // optional int32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bytes result_msg = 2;
    if (has_result_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_msg());
    }

    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKBuy::MergeFrom(const ACKBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_result_msg()) {
      set_result_msg(from.result_msg());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKBuy::CopyFrom(const ACKBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKBuy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACKBuy::Swap(ACKBuy* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(result_msg_, other->result_msg_);
    std::swap(item_id_, other->item_id_);
    std::swap(price_, other->price_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKBuy_descriptor_;
  metadata.reflection = ACKBuy_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
